[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/summernote_summernote/packages/summernote_summernote.js  //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {                                                       // 1\n                                                                     // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/summernote:summernote/dist/summernote.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Super simple wysiwyg editor on Bootstrap v0.6.16                                                                    // 2\n * http://summernote.org/                                                                                              // 3\n *                                                                                                                     // 4\n * summernote.js                                                                                                       // 5\n * Copyright 2013-2015 Alan Hong. and other contributors                                                               // 6\n * summernote may be freely distributed under the MIT license./                                                        // 7\n *                                                                                                                     // 8\n * Date: 2015-08-03T16:41Z                                                                                             // 9\n */                                                                                                                    // 10\n(function (factory) {                                                                                                  // 11\n  /* global define */                                                                                                  // 12\n  if (typeof define === 'function' && define.amd) {                                                                    // 13\n    // AMD. Register as an anonymous module.                                                                           // 14\n    define(['jquery'], factory);                                                                                       // 15\n  } else {                                                                                                             // 16\n    // Browser globals: jQuery                                                                                         // 17\n    factory(window.jQuery);                                                                                            // 18\n  }                                                                                                                    // 19\n}(function ($) {                                                                                                       // 20\n                                                                                                                       // 21\n                                                                                                                       // 22\n                                                                                                                       // 23\n  if (!Array.prototype.reduce) {                                                                                       // 24\n    /**                                                                                                                // 25\n     * Array.prototype.reduce polyfill                                                                                 // 26\n     *                                                                                                                 // 27\n     * @param {Function} callback                                                                                      // 28\n     * @param {Value} [initialValue]                                                                                   // 29\n     * @return {Value}                                                                                                 // 30\n     *                                                                                                                 // 31\n     * @see http://goo.gl/WNriQD                                                                                       // 32\n     */                                                                                                                // 33\n    Array.prototype.reduce = function (callback) {                                                                     // 34\n      var t = Object(this), len = t.length >>> 0, k = 0, value;                                                        // 35\n      if (arguments.length === 2) {                                                                                    // 36\n        value = arguments[1];                                                                                          // 37\n      } else {                                                                                                         // 38\n        while (k < len && !(k in t)) {                                                                                 // 39\n          k++;                                                                                                         // 40\n        }                                                                                                              // 41\n        if (k >= len) {                                                                                                // 42\n          throw new TypeError('Reduce of empty array with no initial value');                                          // 43\n        }                                                                                                              // 44\n        value = t[k++];                                                                                                // 45\n      }                                                                                                                // 46\n      for (; k < len; k++) {                                                                                           // 47\n        if (k in t) {                                                                                                  // 48\n          value = callback(value, t[k], k, t);                                                                         // 49\n        }                                                                                                              // 50\n      }                                                                                                                // 51\n      return value;                                                                                                    // 52\n    };                                                                                                                 // 53\n  }                                                                                                                    // 54\n                                                                                                                       // 55\n  if ('function' !== typeof Array.prototype.filter) {                                                                  // 56\n    /**                                                                                                                // 57\n     * Array.prototype.filter polyfill                                                                                 // 58\n     *                                                                                                                 // 59\n     * @param {Function} func                                                                                          // 60\n     * @return {Array}                                                                                                 // 61\n     *                                                                                                                 // 62\n     * @see http://goo.gl/T1KFnq                                                                                       // 63\n     */                                                                                                                // 64\n    Array.prototype.filter = function (func) {                                                                         // 65\n      var t = Object(this), len = t.length >>> 0;                                                                      // 66\n                                                                                                                       // 67\n      var res = [];                                                                                                    // 68\n      var thisArg = arguments.length >= 2 ? arguments[1] : void 0;                                                     // 69\n      for (var i = 0; i < len; i++) {                                                                                  // 70\n        if (i in t) {                                                                                                  // 71\n          var val = t[i];                                                                                              // 72\n          if (func.call(thisArg, val, i, t)) {                                                                         // 73\n            res.push(val);                                                                                             // 74\n          }                                                                                                            // 75\n        }                                                                                                              // 76\n      }                                                                                                                // 77\n                                                                                                                       // 78\n      return res;                                                                                                      // 79\n    };                                                                                                                 // 80\n  }                                                                                                                    // 81\n                                                                                                                       // 82\n  if (!Array.prototype.map) {                                                                                          // 83\n    /**                                                                                                                // 84\n     * Array.prototype.map polyfill                                                                                    // 85\n     *                                                                                                                 // 86\n     * @param {Function} callback                                                                                      // 87\n     * @return {Array}                                                                                                 // 88\n     *                                                                                                                 // 89\n     * @see https://goo.gl/SMWaMK                                                                                      // 90\n     */                                                                                                                // 91\n    Array.prototype.map = function (callback, thisArg) {                                                               // 92\n      var T, A, k;                                                                                                     // 93\n      if (this === null) {                                                                                             // 94\n        throw new TypeError(' this is null or not defined');                                                           // 95\n      }                                                                                                                // 96\n                                                                                                                       // 97\n      var O = Object(this);                                                                                            // 98\n      var len = O.length >>> 0;                                                                                        // 99\n      if (typeof callback !== 'function') {                                                                            // 100\n        throw new TypeError(callback + ' is not a function');                                                          // 101\n      }                                                                                                                // 102\n                                                                                                                       // 103\n      if (arguments.length > 1) {                                                                                      // 104\n        T = thisArg;                                                                                                   // 105\n      }                                                                                                                // 106\n                                                                                                                       // 107\n      A = new Array(len);                                                                                              // 108\n      k = 0;                                                                                                           // 109\n                                                                                                                       // 110\n      while (k < len) {                                                                                                // 111\n        var kValue, mappedValue;                                                                                       // 112\n        if (k in O) {                                                                                                  // 113\n          kValue = O[k];                                                                                               // 114\n          mappedValue = callback.call(T, kValue, k, O);                                                                // 115\n          A[k] = mappedValue;                                                                                          // 116\n        }                                                                                                              // 117\n        k++;                                                                                                           // 118\n      }                                                                                                                // 119\n      return A;                                                                                                        // 120\n    };                                                                                                                 // 121\n  }                                                                                                                    // 122\n                                                                                                                       // 123\n  var isSupportAmd = typeof define === 'function' && define.amd;                                                       // 124\n                                                                                                                       // 125\n  /**                                                                                                                  // 126\n   * returns whether font is installed or not.                                                                         // 127\n   *                                                                                                                   // 128\n   * @param {String} fontName                                                                                          // 129\n   * @return {Boolean}                                                                                                 // 130\n   */                                                                                                                  // 131\n  var isFontInstalled = function (fontName) {                                                                          // 132\n    var testFontName = fontName === 'Comic Sans MS' ? 'Courier New' : 'Comic Sans MS';                                 // 133\n    var $tester = $('<div>').css({                                                                                     // 134\n      position: 'absolute',                                                                                            // 135\n      left: '-9999px',                                                                                                 // 136\n      top: '-9999px',                                                                                                  // 137\n      fontSize: '200px'                                                                                                // 138\n    }).text('mmmmmmmmmwwwwwww').appendTo(document.body);                                                               // 139\n                                                                                                                       // 140\n    var originalWidth = $tester.css('fontFamily', testFontName).width();                                               // 141\n    var width = $tester.css('fontFamily', fontName + ',' + testFontName).width();                                      // 142\n                                                                                                                       // 143\n    $tester.remove();                                                                                                  // 144\n                                                                                                                       // 145\n    return originalWidth !== width;                                                                                    // 146\n  };                                                                                                                   // 147\n                                                                                                                       // 148\n  var userAgent = navigator.userAgent;                                                                                 // 149\n  var isMSIE = /MSIE|Trident/i.test(userAgent);                                                                        // 150\n  var browserVersion;                                                                                                  // 151\n  if (isMSIE) {                                                                                                        // 152\n    var matches = /MSIE (\\d+[.]\\d+)/.exec(userAgent);                                                                  // 153\n    if (matches) {                                                                                                     // 154\n      browserVersion = parseFloat(matches[1]);                                                                         // 155\n    }                                                                                                                  // 156\n    matches = /Trident\\/.*rv:([0-9]{1,}[\\.0-9]{0,})/.exec(userAgent);                                                  // 157\n    if (matches) {                                                                                                     // 158\n      browserVersion = parseFloat(matches[1]);                                                                         // 159\n    }                                                                                                                  // 160\n  }                                                                                                                    // 161\n                                                                                                                       // 162\n  /**                                                                                                                  // 163\n   * @class core.agent                                                                                                 // 164\n   *                                                                                                                   // 165\n   * Object which check platform and agent                                                                             // 166\n   *                                                                                                                   // 167\n   * @singleton                                                                                                        // 168\n   * @alternateClassName agent                                                                                         // 169\n   */                                                                                                                  // 170\n  var agent = {                                                                                                        // 171\n    /** @property {Boolean} [isMac=false] true if this agent is Mac  */                                                // 172\n    isMac: navigator.appVersion.indexOf('Mac') > -1,                                                                   // 173\n    /** @property {Boolean} [isMSIE=false] true if this agent is a Internet Explorer  */                               // 174\n    isMSIE: isMSIE,                                                                                                    // 175\n    /** @property {Boolean} [isFF=false] true if this agent is a Firefox  */                                           // 176\n    isFF: /firefox/i.test(userAgent),                                                                                  // 177\n    isWebkit: /webkit/i.test(userAgent),                                                                               // 178\n    /** @property {Boolean} [isSafari=false] true if this agent is a Safari  */                                        // 179\n    isSafari: /safari/i.test(userAgent),                                                                               // 180\n    /** @property {Float} browserVersion current browser version  */                                                   // 181\n    browserVersion: browserVersion,                                                                                    // 182\n    /** @property {String} jqueryVersion current jQuery version string  */                                             // 183\n    jqueryVersion: parseFloat($.fn.jquery),                                                                            // 184\n    isSupportAmd: isSupportAmd,                                                                                        // 185\n    hasCodeMirror: isSupportAmd ? require.specified('CodeMirror') : !!window.CodeMirror,                               // 186\n    isFontInstalled: isFontInstalled,                                                                                  // 187\n    isW3CRangeSupport: !!document.createRange                                                                          // 188\n  };                                                                                                                   // 189\n                                                                                                                       // 190\n  /**                                                                                                                  // 191\n   * @class core.func                                                                                                  // 192\n   *                                                                                                                   // 193\n   * func utils (for high-order func's arg)                                                                            // 194\n   *                                                                                                                   // 195\n   * @singleton                                                                                                        // 196\n   * @alternateClassName func                                                                                          // 197\n   */                                                                                                                  // 198\n  var func = (function () {                                                                                            // 199\n    var eq = function (itemA) {                                                                                        // 200\n      return function (itemB) {                                                                                        // 201\n        return itemA === itemB;                                                                                        // 202\n      };                                                                                                               // 203\n    };                                                                                                                 // 204\n                                                                                                                       // 205\n    var eq2 = function (itemA, itemB) {                                                                                // 206\n      return itemA === itemB;                                                                                          // 207\n    };                                                                                                                 // 208\n                                                                                                                       // 209\n    var peq2 = function (propName) {                                                                                   // 210\n      return function (itemA, itemB) {                                                                                 // 211\n        return itemA[propName] === itemB[propName];                                                                    // 212\n      };                                                                                                               // 213\n    };                                                                                                                 // 214\n                                                                                                                       // 215\n    var ok = function () {                                                                                             // 216\n      return true;                                                                                                     // 217\n    };                                                                                                                 // 218\n                                                                                                                       // 219\n    var fail = function () {                                                                                           // 220\n      return false;                                                                                                    // 221\n    };                                                                                                                 // 222\n                                                                                                                       // 223\n    var not = function (f) {                                                                                           // 224\n      return function () {                                                                                             // 225\n        return !f.apply(f, arguments);                                                                                 // 226\n      };                                                                                                               // 227\n    };                                                                                                                 // 228\n                                                                                                                       // 229\n    var and = function (fA, fB) {                                                                                      // 230\n      return function (item) {                                                                                         // 231\n        return fA(item) && fB(item);                                                                                   // 232\n      };                                                                                                               // 233\n    };                                                                                                                 // 234\n                                                                                                                       // 235\n    var self = function (a) {                                                                                          // 236\n      return a;                                                                                                        // 237\n    };                                                                                                                 // 238\n                                                                                                                       // 239\n    var idCounter = 0;                                                                                                 // 240\n                                                                                                                       // 241\n    /**                                                                                                                // 242\n     * generate a globally-unique id                                                                                   // 243\n     *                                                                                                                 // 244\n     * @param {String} [prefix]                                                                                        // 245\n     */                                                                                                                // 246\n    var uniqueId = function (prefix) {                                                                                 // 247\n      var id = ++idCounter + '';                                                                                       // 248\n      return prefix ? prefix + id : id;                                                                                // 249\n    };                                                                                                                 // 250\n                                                                                                                       // 251\n    /**                                                                                                                // 252\n     * returns bnd (bounds) from rect                                                                                  // 253\n     *                                                                                                                 // 254\n     * - IE Compatability Issue: http://goo.gl/sRLOAo                                                                  // 255\n     * - Scroll Issue: http://goo.gl/sNjUc                                                                             // 256\n     *                                                                                                                 // 257\n     * @param {Rect} rect                                                                                              // 258\n     * @return {Object} bounds                                                                                         // 259\n     * @return {Number} bounds.top                                                                                     // 260\n     * @return {Number} bounds.left                                                                                    // 261\n     * @return {Number} bounds.width                                                                                   // 262\n     * @return {Number} bounds.height                                                                                  // 263\n     */                                                                                                                // 264\n    var rect2bnd = function (rect) {                                                                                   // 265\n      var $document = $(document);                                                                                     // 266\n      return {                                                                                                         // 267\n        top: rect.top + $document.scrollTop(),                                                                         // 268\n        left: rect.left + $document.scrollLeft(),                                                                      // 269\n        width: rect.right - rect.left,                                                                                 // 270\n        height: rect.bottom - rect.top                                                                                 // 271\n      };                                                                                                               // 272\n    };                                                                                                                 // 273\n                                                                                                                       // 274\n    /**                                                                                                                // 275\n     * returns a copy of the object where the keys have become the values and the values the keys.                     // 276\n     * @param {Object} obj                                                                                             // 277\n     * @return {Object}                                                                                                // 278\n     */                                                                                                                // 279\n    var invertObject = function (obj) {                                                                                // 280\n      var inverted = {};                                                                                               // 281\n      for (var key in obj) {                                                                                           // 282\n        if (obj.hasOwnProperty(key)) {                                                                                 // 283\n          inverted[obj[key]] = key;                                                                                    // 284\n        }                                                                                                              // 285\n      }                                                                                                                // 286\n      return inverted;                                                                                                 // 287\n    };                                                                                                                 // 288\n                                                                                                                       // 289\n    /**                                                                                                                // 290\n     * @param {String} namespace                                                                                       // 291\n     * @param {String} [prefix]                                                                                        // 292\n     * @return {String}                                                                                                // 293\n     */                                                                                                                // 294\n    var namespaceToCamel = function (namespace, prefix) {                                                              // 295\n      prefix = prefix || '';                                                                                           // 296\n      return prefix + namespace.split('.').map(function (name) {                                                       // 297\n        return name.substring(0, 1).toUpperCase() + name.substring(1);                                                 // 298\n      }).join('');                                                                                                     // 299\n    };                                                                                                                 // 300\n                                                                                                                       // 301\n    return {                                                                                                           // 302\n      eq: eq,                                                                                                          // 303\n      eq2: eq2,                                                                                                        // 304\n      peq2: peq2,                                                                                                      // 305\n      ok: ok,                                                                                                          // 306\n      fail: fail,                                                                                                      // 307\n      self: self,                                                                                                      // 308\n      not: not,                                                                                                        // 309\n      and: and,                                                                                                        // 310\n      uniqueId: uniqueId,                                                                                              // 311\n      rect2bnd: rect2bnd,                                                                                              // 312\n      invertObject: invertObject,                                                                                      // 313\n      namespaceToCamel: namespaceToCamel                                                                               // 314\n    };                                                                                                                 // 315\n  })();                                                                                                                // 316\n                                                                                                                       // 317\n  /**                                                                                                                  // 318\n   * @class core.list                                                                                                  // 319\n   *                                                                                                                   // 320\n   * list utils                                                                                                        // 321\n   *                                                                                                                   // 322\n   * @singleton                                                                                                        // 323\n   * @alternateClassName list                                                                                          // 324\n   */                                                                                                                  // 325\n  var list = (function () {                                                                                            // 326\n    /**                                                                                                                // 327\n     * returns the first item of an array.                                                                             // 328\n     *                                                                                                                 // 329\n     * @param {Array} array                                                                                            // 330\n     */                                                                                                                // 331\n    var head = function (array) {                                                                                      // 332\n      return array[0];                                                                                                 // 333\n    };                                                                                                                 // 334\n                                                                                                                       // 335\n    /**                                                                                                                // 336\n     * returns the last item of an array.                                                                              // 337\n     *                                                                                                                 // 338\n     * @param {Array} array                                                                                            // 339\n     */                                                                                                                // 340\n    var last = function (array) {                                                                                      // 341\n      return array[array.length - 1];                                                                                  // 342\n    };                                                                                                                 // 343\n                                                                                                                       // 344\n    /**                                                                                                                // 345\n     * returns everything but the last entry of the array.                                                             // 346\n     *                                                                                                                 // 347\n     * @param {Array} array                                                                                            // 348\n     */                                                                                                                // 349\n    var initial = function (array) {                                                                                   // 350\n      return array.slice(0, array.length - 1);                                                                         // 351\n    };                                                                                                                 // 352\n                                                                                                                       // 353\n    /**                                                                                                                // 354\n     * returns the rest of the items in an array.                                                                      // 355\n     *                                                                                                                 // 356\n     * @param {Array} array                                                                                            // 357\n     */                                                                                                                // 358\n    var tail = function (array) {                                                                                      // 359\n      return array.slice(1);                                                                                           // 360\n    };                                                                                                                 // 361\n                                                                                                                       // 362\n    /**                                                                                                                // 363\n     * returns item of array                                                                                           // 364\n     */                                                                                                                // 365\n    var find = function (array, pred) {                                                                                // 366\n      for (var idx = 0, len = array.length; idx < len; idx ++) {                                                       // 367\n        var item = array[idx];                                                                                         // 368\n        if (pred(item)) {                                                                                              // 369\n          return item;                                                                                                 // 370\n        }                                                                                                              // 371\n      }                                                                                                                // 372\n    };                                                                                                                 // 373\n                                                                                                                       // 374\n    /**                                                                                                                // 375\n     * returns true if all of the values in the array pass the predicate truth test.                                   // 376\n     */                                                                                                                // 377\n    var all = function (array, pred) {                                                                                 // 378\n      for (var idx = 0, len = array.length; idx < len; idx ++) {                                                       // 379\n        if (!pred(array[idx])) {                                                                                       // 380\n          return false;                                                                                                // 381\n        }                                                                                                              // 382\n      }                                                                                                                // 383\n      return true;                                                                                                     // 384\n    };                                                                                                                 // 385\n                                                                                                                       // 386\n    /**                                                                                                                // 387\n     * returns index of item                                                                                           // 388\n     */                                                                                                                // 389\n    var indexOf = function (array, item) {                                                                             // 390\n      return $.inArray(item, array);                                                                                   // 391\n    };                                                                                                                 // 392\n                                                                                                                       // 393\n    /**                                                                                                                // 394\n     * returns true if the value is present in the list.                                                               // 395\n     */                                                                                                                // 396\n    var contains = function (array, item) {                                                                            // 397\n      return indexOf(array, item) !== -1;                                                                              // 398\n    };                                                                                                                 // 399\n                                                                                                                       // 400\n    /**                                                                                                                // 401\n     * get sum from a list                                                                                             // 402\n     *                                                                                                                 // 403\n     * @param {Array} array - array                                                                                    // 404\n     * @param {Function} fn - iterator                                                                                 // 405\n     */                                                                                                                // 406\n    var sum = function (array, fn) {                                                                                   // 407\n      fn = fn || func.self;                                                                                            // 408\n      return array.reduce(function (memo, v) {                                                                         // 409\n        return memo + fn(v);                                                                                           // 410\n      }, 0);                                                                                                           // 411\n    };                                                                                                                 // 412\n                                                                                                                       // 413\n    /**                                                                                                                // 414\n     * returns a copy of the collection with array type.                                                               // 415\n     * @param {Collection} collection - collection eg) node.childNodes, ...                                            // 416\n     */                                                                                                                // 417\n    var from = function (collection) {                                                                                 // 418\n      var result = [], idx = -1, length = collection.length;                                                           // 419\n      while (++idx < length) {                                                                                         // 420\n        result[idx] = collection[idx];                                                                                 // 421\n      }                                                                                                                // 422\n      return result;                                                                                                   // 423\n    };                                                                                                                 // 424\n                                                                                                                       // 425\n    /**                                                                                                                // 426\n     * cluster elements by predicate function.                                                                         // 427\n     *                                                                                                                 // 428\n     * @param {Array} array - array                                                                                    // 429\n     * @param {Function} fn - predicate function for cluster rule                                                      // 430\n     * @param {Array[]}                                                                                                // 431\n     */                                                                                                                // 432\n    var clusterBy = function (array, fn) {                                                                             // 433\n      if (!array.length) { return []; }                                                                                // 434\n      var aTail = tail(array);                                                                                         // 435\n      return aTail.reduce(function (memo, v) {                                                                         // 436\n        var aLast = last(memo);                                                                                        // 437\n        if (fn(last(aLast), v)) {                                                                                      // 438\n          aLast[aLast.length] = v;                                                                                     // 439\n        } else {                                                                                                       // 440\n          memo[memo.length] = [v];                                                                                     // 441\n        }                                                                                                              // 442\n        return memo;                                                                                                   // 443\n      }, [[head(array)]]);                                                                                             // 444\n    };                                                                                                                 // 445\n                                                                                                                       // 446\n    /**                                                                                                                // 447\n     * returns a copy of the array with all falsy values removed                                                       // 448\n     *                                                                                                                 // 449\n     * @param {Array} array - array                                                                                    // 450\n     * @param {Function} fn - predicate function for cluster rule                                                      // 451\n     */                                                                                                                // 452\n    var compact = function (array) {                                                                                   // 453\n      var aResult = [];                                                                                                // 454\n      for (var idx = 0, len = array.length; idx < len; idx ++) {                                                       // 455\n        if (array[idx]) { aResult.push(array[idx]); }                                                                  // 456\n      }                                                                                                                // 457\n      return aResult;                                                                                                  // 458\n    };                                                                                                                 // 459\n                                                                                                                       // 460\n    /**                                                                                                                // 461\n     * produces a duplicate-free version of the array                                                                  // 462\n     *                                                                                                                 // 463\n     * @param {Array} array                                                                                            // 464\n     */                                                                                                                // 465\n    var unique = function (array) {                                                                                    // 466\n      var results = [];                                                                                                // 467\n                                                                                                                       // 468\n      for (var idx = 0, len = array.length; idx < len; idx ++) {                                                       // 469\n        if (!contains(results, array[idx])) {                                                                          // 470\n          results.push(array[idx]);                                                                                    // 471\n        }                                                                                                              // 472\n      }                                                                                                                // 473\n                                                                                                                       // 474\n      return results;                                                                                                  // 475\n    };                                                                                                                 // 476\n                                                                                                                       // 477\n    /**                                                                                                                // 478\n     * returns next item.                                                                                              // 479\n     * @param {Array} array                                                                                            // 480\n     */                                                                                                                // 481\n    var next = function (array, item) {                                                                                // 482\n      var idx = indexOf(array, item);                                                                                  // 483\n      if (idx === -1) { return null; }                                                                                 // 484\n                                                                                                                       // 485\n      return array[idx + 1];                                                                                           // 486\n    };                                                                                                                 // 487\n                                                                                                                       // 488\n    /**                                                                                                                // 489\n     * returns prev item.                                                                                              // 490\n     * @param {Array} array                                                                                            // 491\n     */                                                                                                                // 492\n    var prev = function (array, item) {                                                                                // 493\n      var idx = indexOf(array, item);                                                                                  // 494\n      if (idx === -1) { return null; }                                                                                 // 495\n                                                                                                                       // 496\n      return array[idx - 1];                                                                                           // 497\n    };                                                                                                                 // 498\n                                                                                                                       // 499\n    return { head: head, last: last, initial: initial, tail: tail,                                                     // 500\n             prev: prev, next: next, find: find, contains: contains,                                                   // 501\n             all: all, sum: sum, from: from,                                                                           // 502\n             clusterBy: clusterBy, compact: compact, unique: unique };                                                 // 503\n  })();                                                                                                                // 504\n                                                                                                                       // 505\n                                                                                                                       // 506\n  var NBSP_CHAR = String.fromCharCode(160);                                                                            // 507\n  var ZERO_WIDTH_NBSP_CHAR = '\\ufeff';                                                                                 // 508\n                                                                                                                       // 509\n  /**                                                                                                                  // 510\n   * @class core.dom                                                                                                   // 511\n   *                                                                                                                   // 512\n   * Dom functions                                                                                                     // 513\n   *                                                                                                                   // 514\n   * @singleton                                                                                                        // 515\n   * @alternateClassName dom                                                                                           // 516\n   */                                                                                                                  // 517\n  var dom = (function () {                                                                                             // 518\n    /**                                                                                                                // 519\n     * @method isEditable                                                                                              // 520\n     *                                                                                                                 // 521\n     * returns whether node is `note-editable` or not.                                                                 // 522\n     *                                                                                                                 // 523\n     * @param {Node} node                                                                                              // 524\n     * @return {Boolean}                                                                                               // 525\n     */                                                                                                                // 526\n    var isEditable = function (node) {                                                                                 // 527\n      return node && $(node).hasClass('note-editable');                                                                // 528\n    };                                                                                                                 // 529\n                                                                                                                       // 530\n    /**                                                                                                                // 531\n     * @method isControlSizing                                                                                         // 532\n     *                                                                                                                 // 533\n     * returns whether node is `note-control-sizing` or not.                                                           // 534\n     *                                                                                                                 // 535\n     * @param {Node} node                                                                                              // 536\n     * @return {Boolean}                                                                                               // 537\n     */                                                                                                                // 538\n    var isControlSizing = function (node) {                                                                            // 539\n      return node && $(node).hasClass('note-control-sizing');                                                          // 540\n    };                                                                                                                 // 541\n                                                                                                                       // 542\n    /**                                                                                                                // 543\n     * @method  buildLayoutInfo                                                                                        // 544\n     *                                                                                                                 // 545\n     * build layoutInfo from $editor(.note-editor)                                                                     // 546\n     *                                                                                                                 // 547\n     * @param {jQuery} $editor                                                                                         // 548\n     * @return {Object}                                                                                                // 549\n     * @return {Function} return.editor                                                                                // 550\n     * @return {Node} return.dropzone                                                                                  // 551\n     * @return {Node} return.toolbar                                                                                   // 552\n     * @return {Node} return.editable                                                                                  // 553\n     * @return {Node} return.codable                                                                                   // 554\n     * @return {Node} return.popover                                                                                   // 555\n     * @return {Node} return.handle                                                                                    // 556\n     * @return {Node} return.dialog                                                                                    // 557\n     */                                                                                                                // 558\n    var buildLayoutInfo = function ($editor) {                                                                         // 559\n      var makeFinder;                                                                                                  // 560\n                                                                                                                       // 561\n      // air mode                                                                                                      // 562\n      if ($editor.hasClass('note-air-editor')) {                                                                       // 563\n        var id = list.last($editor.attr('id').split('-'));                                                             // 564\n        makeFinder = function (sIdPrefix) {                                                                            // 565\n          return function () { return $(sIdPrefix + id); };                                                            // 566\n        };                                                                                                             // 567\n                                                                                                                       // 568\n        return {                                                                                                       // 569\n          editor: function () { return $editor; },                                                                     // 570\n          holder : function () { return $editor.data('holder'); },                                                     // 571\n          editable: function () { return $editor; },                                                                   // 572\n          popover: makeFinder('#note-popover-'),                                                                       // 573\n          handle: makeFinder('#note-handle-'),                                                                         // 574\n          dialog: makeFinder('#note-dialog-')                                                                          // 575\n        };                                                                                                             // 576\n                                                                                                                       // 577\n        // frame mode                                                                                                  // 578\n      } else {                                                                                                         // 579\n        makeFinder = function (className, $base) {                                                                     // 580\n          $base = $base || $editor;                                                                                    // 581\n          return function () { return $base.find(className); };                                                        // 582\n        };                                                                                                             // 583\n                                                                                                                       // 584\n        var options = $editor.data('options');                                                                         // 585\n        var $dialogHolder = (options && options.dialogsInBody) ? $(document.body) : null;                              // 586\n                                                                                                                       // 587\n        return {                                                                                                       // 588\n          editor: function () { return $editor; },                                                                     // 589\n          holder : function () { return $editor.data('holder'); },                                                     // 590\n          dropzone: makeFinder('.note-dropzone'),                                                                      // 591\n          toolbar: makeFinder('.note-toolbar'),                                                                        // 592\n          editable: makeFinder('.note-editable'),                                                                      // 593\n          codable: makeFinder('.note-codable'),                                                                        // 594\n          statusbar: makeFinder('.note-statusbar'),                                                                    // 595\n          popover: makeFinder('.note-popover'),                                                                        // 596\n          handle: makeFinder('.note-handle'),                                                                          // 597\n          dialog: makeFinder('.note-dialog', $dialogHolder)                                                            // 598\n        };                                                                                                             // 599\n      }                                                                                                                // 600\n    };                                                                                                                 // 601\n                                                                                                                       // 602\n    /**                                                                                                                // 603\n     * returns makeLayoutInfo from editor's descendant node.                                                           // 604\n     *                                                                                                                 // 605\n     * @private                                                                                                        // 606\n     * @param {Node} descendant                                                                                        // 607\n     * @return {Object}                                                                                                // 608\n     */                                                                                                                // 609\n    var makeLayoutInfo = function (descendant) {                                                                       // 610\n      var $target = $(descendant).closest('.note-editor, .note-air-editor, .note-air-layout');                         // 611\n                                                                                                                       // 612\n      if (!$target.length) {                                                                                           // 613\n        return null;                                                                                                   // 614\n      }                                                                                                                // 615\n                                                                                                                       // 616\n      var $editor;                                                                                                     // 617\n      if ($target.is('.note-editor, .note-air-editor')) {                                                              // 618\n        $editor = $target;                                                                                             // 619\n      } else {                                                                                                         // 620\n        $editor = $('#note-editor-' + list.last($target.attr('id').split('-')));                                       // 621\n      }                                                                                                                // 622\n                                                                                                                       // 623\n      return buildLayoutInfo($editor);                                                                                 // 624\n    };                                                                                                                 // 625\n                                                                                                                       // 626\n    /**                                                                                                                // 627\n     * @method makePredByNodeName                                                                                      // 628\n     *                                                                                                                 // 629\n     * returns predicate which judge whether nodeName is same                                                          // 630\n     *                                                                                                                 // 631\n     * @param {String} nodeName                                                                                        // 632\n     * @return {Function}                                                                                              // 633\n     */                                                                                                                // 634\n    var makePredByNodeName = function (nodeName) {                                                                     // 635\n      nodeName = nodeName.toUpperCase();                                                                               // 636\n      return function (node) {                                                                                         // 637\n        return node && node.nodeName.toUpperCase() === nodeName;                                                       // 638\n      };                                                                                                               // 639\n    };                                                                                                                 // 640\n                                                                                                                       // 641\n    /**                                                                                                                // 642\n     * @method isText                                                                                                  // 643\n     *                                                                                                                 // 644\n     *                                                                                                                 // 645\n     *                                                                                                                 // 646\n     * @param {Node} node                                                                                              // 647\n     * @return {Boolean} true if node's type is text(3)                                                                // 648\n     */                                                                                                                // 649\n    var isText = function (node) {                                                                                     // 650\n      return node && node.nodeType === 3;                                                                              // 651\n    };                                                                                                                 // 652\n                                                                                                                       // 653\n    /**                                                                                                                // 654\n     * ex) br, col, embed, hr, img, input, ...                                                                         // 655\n     * @see http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements                                     // 656\n     */                                                                                                                // 657\n    var isVoid = function (node) {                                                                                     // 658\n      return node && /^BR|^IMG|^HR|^IFRAME|^BUTTON/.test(node.nodeName.toUpperCase());                                 // 659\n    };                                                                                                                 // 660\n                                                                                                                       // 661\n    var isPara = function (node) {                                                                                     // 662\n      if (isEditable(node)) {                                                                                          // 663\n        return false;                                                                                                  // 664\n      }                                                                                                                // 665\n                                                                                                                       // 666\n      // Chrome(v31.0), FF(v25.0.1) use DIV for paragraph                                                              // 667\n      return node && /^DIV|^P|^LI|^H[1-7]/.test(node.nodeName.toUpperCase());                                          // 668\n    };                                                                                                                 // 669\n                                                                                                                       // 670\n    var isLi = makePredByNodeName('LI');                                                                               // 671\n                                                                                                                       // 672\n    var isPurePara = function (node) {                                                                                 // 673\n      return isPara(node) && !isLi(node);                                                                              // 674\n    };                                                                                                                 // 675\n                                                                                                                       // 676\n    var isTable = makePredByNodeName('TABLE');                                                                         // 677\n                                                                                                                       // 678\n    var isInline = function (node) {                                                                                   // 679\n      return !isBodyContainer(node) &&                                                                                 // 680\n             !isList(node) &&                                                                                          // 681\n             !isHr(node) &&                                                                                            // 682\n             !isPara(node) &&                                                                                          // 683\n             !isTable(node) &&                                                                                         // 684\n             !isBlockquote(node);                                                                                      // 685\n    };                                                                                                                 // 686\n                                                                                                                       // 687\n    var isList = function (node) {                                                                                     // 688\n      return node && /^UL|^OL/.test(node.nodeName.toUpperCase());                                                      // 689\n    };                                                                                                                 // 690\n                                                                                                                       // 691\n    var isHr = makePredByNodeName('HR');                                                                               // 692\n                                                                                                                       // 693\n    var isCell = function (node) {                                                                                     // 694\n      return node && /^TD|^TH/.test(node.nodeName.toUpperCase());                                                      // 695\n    };                                                                                                                 // 696\n                                                                                                                       // 697\n    var isBlockquote = makePredByNodeName('BLOCKQUOTE');                                                               // 698\n                                                                                                                       // 699\n    var isBodyContainer = function (node) {                                                                            // 700\n      return isCell(node) || isBlockquote(node) || isEditable(node);                                                   // 701\n    };                                                                                                                 // 702\n                                                                                                                       // 703\n    var isAnchor = makePredByNodeName('A');                                                                            // 704\n                                                                                                                       // 705\n    var isParaInline = function (node) {                                                                               // 706\n      return isInline(node) && !!ancestor(node, isPara);                                                               // 707\n    };                                                                                                                 // 708\n                                                                                                                       // 709\n    var isBodyInline = function (node) {                                                                               // 710\n      return isInline(node) && !ancestor(node, isPara);                                                                // 711\n    };                                                                                                                 // 712\n                                                                                                                       // 713\n    var isBody = makePredByNodeName('BODY');                                                                           // 714\n                                                                                                                       // 715\n    /**                                                                                                                // 716\n     * returns whether nodeB is closest sibling of nodeA                                                               // 717\n     *                                                                                                                 // 718\n     * @param {Node} nodeA                                                                                             // 719\n     * @param {Node} nodeB                                                                                             // 720\n     * @return {Boolean}                                                                                               // 721\n     */                                                                                                                // 722\n    var isClosestSibling = function (nodeA, nodeB) {                                                                   // 723\n      return nodeA.nextSibling === nodeB ||                                                                            // 724\n             nodeA.previousSibling === nodeB;                                                                          // 725\n    };                                                                                                                 // 726\n                                                                                                                       // 727\n    /**                                                                                                                // 728\n     * returns array of closest siblings with node                                                                     // 729\n     *                                                                                                                 // 730\n     * @param {Node} node                                                                                              // 731\n     * @param {function} [pred] - predicate function                                                                   // 732\n     * @return {Node[]}                                                                                                // 733\n     */                                                                                                                // 734\n    var withClosestSiblings = function (node, pred) {                                                                  // 735\n      pred = pred || func.ok;                                                                                          // 736\n                                                                                                                       // 737\n      var siblings = [];                                                                                               // 738\n      if (node.previousSibling && pred(node.previousSibling)) {                                                        // 739\n        siblings.push(node.previousSibling);                                                                           // 740\n      }                                                                                                                // 741\n      siblings.push(node);                                                                                             // 742\n      if (node.nextSibling && pred(node.nextSibling)) {                                                                // 743\n        siblings.push(node.nextSibling);                                                                               // 744\n      }                                                                                                                // 745\n      return siblings;                                                                                                 // 746\n    };                                                                                                                 // 747\n                                                                                                                       // 748\n    /**                                                                                                                // 749\n     * blank HTML for cursor position                                                                                  // 750\n     * - [workaround] old IE only works with &nbsp;                                                                    // 751\n     * - [workaround] IE11 and other browser works with bogus br                                                       // 752\n     */                                                                                                                // 753\n    var blankHTML = agent.isMSIE && agent.browserVersion < 11 ? '&nbsp;' : '<br>';                                     // 754\n                                                                                                                       // 755\n    /**                                                                                                                // 756\n     * @method nodeLength                                                                                              // 757\n     *                                                                                                                 // 758\n     * returns #text's text size or element's childNodes size                                                          // 759\n     *                                                                                                                 // 760\n     * @param {Node} node                                                                                              // 761\n     */                                                                                                                // 762\n    var nodeLength = function (node) {                                                                                 // 763\n      if (isText(node)) {                                                                                              // 764\n        return node.nodeValue.length;                                                                                  // 765\n      }                                                                                                                // 766\n                                                                                                                       // 767\n      return node.childNodes.length;                                                                                   // 768\n    };                                                                                                                 // 769\n                                                                                                                       // 770\n    /**                                                                                                                // 771\n     * returns whether node is empty or not.                                                                           // 772\n     *                                                                                                                 // 773\n     * @param {Node} node                                                                                              // 774\n     * @return {Boolean}                                                                                               // 775\n     */                                                                                                                // 776\n    var isEmpty = function (node) {                                                                                    // 777\n      var len = nodeLength(node);                                                                                      // 778\n                                                                                                                       // 779\n      if (len === 0) {                                                                                                 // 780\n        return true;                                                                                                   // 781\n      } else if (!isText(node) && len === 1 && node.innerHTML === blankHTML) {                                         // 782\n        // ex) <p><br></p>, <span><br></span>                                                                          // 783\n        return true;                                                                                                   // 784\n      } else if (list.all(node.childNodes, isText) && node.innerHTML === '') {                                         // 785\n        // ex) <p></p>, <span></span>                                                                                  // 786\n        return true;                                                                                                   // 787\n      }                                                                                                                // 788\n                                                                                                                       // 789\n      return false;                                                                                                    // 790\n    };                                                                                                                 // 791\n                                                                                                                       // 792\n    /**                                                                                                                // 793\n     * padding blankHTML if node is empty (for cursor position)                                                        // 794\n     */                                                                                                                // 795\n    var paddingBlankHTML = function (node) {                                                                           // 796\n      if (!isVoid(node) && !nodeLength(node)) {                                                                        // 797\n        node.innerHTML = blankHTML;                                                                                    // 798\n      }                                                                                                                // 799\n    };                                                                                                                 // 800\n                                                                                                                       // 801\n    /**                                                                                                                // 802\n     * find nearest ancestor predicate hit                                                                             // 803\n     *                                                                                                                 // 804\n     * @param {Node} node                                                                                              // 805\n     * @param {Function} pred - predicate function                                                                     // 806\n     */                                                                                                                // 807\n    var ancestor = function (node, pred) {                                                                             // 808\n      while (node) {                                                                                                   // 809\n        if (pred(node)) { return node; }                                                                               // 810\n        if (isEditable(node)) { break; }                                                                               // 811\n                                                                                                                       // 812\n        node = node.parentNode;                                                                                        // 813\n      }                                                                                                                // 814\n      return null;                                                                                                     // 815\n    };                                                                                                                 // 816\n                                                                                                                       // 817\n    /**                                                                                                                // 818\n     * find nearest ancestor only single child blood line and predicate hit                                            // 819\n     *                                                                                                                 // 820\n     * @param {Node} node                                                                                              // 821\n     * @param {Function} pred - predicate function                                                                     // 822\n     */                                                                                                                // 823\n    var singleChildAncestor = function (node, pred) {                                                                  // 824\n      node = node.parentNode;                                                                                          // 825\n                                                                                                                       // 826\n      while (node) {                                                                                                   // 827\n        if (nodeLength(node) !== 1) { break; }                                                                         // 828\n        if (pred(node)) { return node; }                                                                               // 829\n        if (isEditable(node)) { break; }                                                                               // 830\n                                                                                                                       // 831\n        node = node.parentNode;                                                                                        // 832\n      }                                                                                                                // 833\n      return null;                                                                                                     // 834\n    };                                                                                                                 // 835\n                                                                                                                       // 836\n    /**                                                                                                                // 837\n     * returns new array of ancestor nodes (until predicate hit).                                                      // 838\n     *                                                                                                                 // 839\n     * @param {Node} node                                                                                              // 840\n     * @param {Function} [optional] pred - predicate function                                                          // 841\n     */                                                                                                                // 842\n    var listAncestor = function (node, pred) {                                                                         // 843\n      pred = pred || func.fail;                                                                                        // 844\n                                                                                                                       // 845\n      var ancestors = [];                                                                                              // 846\n      ancestor(node, function (el) {                                                                                   // 847\n        if (!isEditable(el)) {                                                                                         // 848\n          ancestors.push(el);                                                                                          // 849\n        }                                                                                                              // 850\n                                                                                                                       // 851\n        return pred(el);                                                                                               // 852\n      });                                                                                                              // 853\n      return ancestors;                                                                                                // 854\n    };                                                                                                                 // 855\n                                                                                                                       // 856\n    /**                                                                                                                // 857\n     * find farthest ancestor predicate hit                                                                            // 858\n     */                                                                                                                // 859\n    var lastAncestor = function (node, pred) {                                                                         // 860\n      var ancestors = listAncestor(node);                                                                              // 861\n      return list.last(ancestors.filter(pred));                                                                        // 862\n    };                                                                                                                 // 863\n                                                                                                                       // 864\n    /**                                                                                                                // 865\n     * returns common ancestor node between two nodes.                                                                 // 866\n     *                                                                                                                 // 867\n     * @param {Node} nodeA                                                                                             // 868\n     * @param {Node} nodeB                                                                                             // 869\n     */                                                                                                                // 870\n    var commonAncestor = function (nodeA, nodeB) {                                                                     // 871\n      var ancestors = listAncestor(nodeA);                                                                             // 872\n      for (var n = nodeB; n; n = n.parentNode) {                                                                       // 873\n        if ($.inArray(n, ancestors) > -1) { return n; }                                                                // 874\n      }                                                                                                                // 875\n      return null; // difference document area                                                                         // 876\n    };                                                                                                                 // 877\n                                                                                                                       // 878\n    /**                                                                                                                // 879\n     * listing all previous siblings (until predicate hit).                                                            // 880\n     *                                                                                                                 // 881\n     * @param {Node} node                                                                                              // 882\n     * @param {Function} [optional] pred - predicate function                                                          // 883\n     */                                                                                                                // 884\n    var listPrev = function (node, pred) {                                                                             // 885\n      pred = pred || func.fail;                                                                                        // 886\n                                                                                                                       // 887\n      var nodes = [];                                                                                                  // 888\n      while (node) {                                                                                                   // 889\n        if (pred(node)) { break; }                                                                                     // 890\n        nodes.push(node);                                                                                              // 891\n        node = node.previousSibling;                                                                                   // 892\n      }                                                                                                                // 893\n      return nodes;                                                                                                    // 894\n    };                                                                                                                 // 895\n                                                                                                                       // 896\n    /**                                                                                                                // 897\n     * listing next siblings (until predicate hit).                                                                    // 898\n     *                                                                                                                 // 899\n     * @param {Node} node                                                                                              // 900\n     * @param {Function} [pred] - predicate function                                                                   // 901\n     */                                                                                                                // 902\n    var listNext = function (node, pred) {                                                                             // 903\n      pred = pred || func.fail;                                                                                        // 904\n                                                                                                                       // 905\n      var nodes = [];                                                                                                  // 906\n      while (node) {                                                                                                   // 907\n        if (pred(node)) { break; }                                                                                     // 908\n        nodes.push(node);                                                                                              // 909\n        node = node.nextSibling;                                                                                       // 910\n      }                                                                                                                // 911\n      return nodes;                                                                                                    // 912\n    };                                                                                                                 // 913\n                                                                                                                       // 914\n    /**                                                                                                                // 915\n     * listing descendant nodes                                                                                        // 916\n     *                                                                                                                 // 917\n     * @param {Node} node                                                                                              // 918\n     * @param {Function} [pred] - predicate function                                                                   // 919\n     */                                                                                                                // 920\n    var listDescendant = function (node, pred) {                                                                       // 921\n      var descendents = [];                                                                                            // 922\n      pred = pred || func.ok;                                                                                          // 923\n                                                                                                                       // 924\n      // start DFS(depth first search) with node                                                                       // 925\n      (function fnWalk(current) {                                                                                      // 926\n        if (node !== current && pred(current)) {                                                                       // 927\n          descendents.push(current);                                                                                   // 928\n        }                                                                                                              // 929\n        for (var idx = 0, len = current.childNodes.length; idx < len; idx++) {                                         // 930\n          fnWalk(current.childNodes[idx]);                                                                             // 931\n        }                                                                                                              // 932\n      })(node);                                                                                                        // 933\n                                                                                                                       // 934\n      return descendents;                                                                                              // 935\n    };                                                                                                                 // 936\n                                                                                                                       // 937\n    /**                                                                                                                // 938\n     * wrap node with new tag.                                                                                         // 939\n     *                                                                                                                 // 940\n     * @param {Node} node                                                                                              // 941\n     * @param {Node} tagName of wrapper                                                                                // 942\n     * @return {Node} - wrapper                                                                                        // 943\n     */                                                                                                                // 944\n    var wrap = function (node, wrapperName) {                                                                          // 945\n      var parent = node.parentNode;                                                                                    // 946\n      var wrapper = $('<' + wrapperName + '>')[0];                                                                     // 947\n                                                                                                                       // 948\n      parent.insertBefore(wrapper, node);                                                                              // 949\n      wrapper.appendChild(node);                                                                                       // 950\n                                                                                                                       // 951\n      return wrapper;                                                                                                  // 952\n    };                                                                                                                 // 953\n                                                                                                                       // 954\n    /**                                                                                                                // 955\n     * insert node after preceding                                                                                     // 956\n     *                                                                                                                 // 957\n     * @param {Node} node                                                                                              // 958\n     * @param {Node} preceding - predicate function                                                                    // 959\n     */                                                                                                                // 960\n    var insertAfter = function (node, preceding) {                                                                     // 961\n      var next = preceding.nextSibling, parent = preceding.parentNode;                                                 // 962\n      if (next) {                                                                                                      // 963\n        parent.insertBefore(node, next);                                                                               // 964\n      } else {                                                                                                         // 965\n        parent.appendChild(node);                                                                                      // 966\n      }                                                                                                                // 967\n      return node;                                                                                                     // 968\n    };                                                                                                                 // 969\n                                                                                                                       // 970\n    /**                                                                                                                // 971\n     * append elements.                                                                                                // 972\n     *                                                                                                                 // 973\n     * @param {Node} node                                                                                              // 974\n     * @param {Collection} aChild                                                                                      // 975\n     */                                                                                                                // 976\n    var appendChildNodes = function (node, aChild) {                                                                   // 977\n      $.each(aChild, function (idx, child) {                                                                           // 978\n        node.appendChild(child);                                                                                       // 979\n      });                                                                                                              // 980\n      return node;                                                                                                     // 981\n    };                                                                                                                 // 982\n                                                                                                                       // 983\n    /**                                                                                                                // 984\n     * returns whether boundaryPoint is left edge or not.                                                              // 985\n     *                                                                                                                 // 986\n     * @param {BoundaryPoint} point                                                                                    // 987\n     * @return {Boolean}                                                                                               // 988\n     */                                                                                                                // 989\n    var isLeftEdgePoint = function (point) {                                                                           // 990\n      return point.offset === 0;                                                                                       // 991\n    };                                                                                                                 // 992\n                                                                                                                       // 993\n    /**                                                                                                                // 994\n     * returns whether boundaryPoint is right edge or not.                                                             // 995\n     *                                                                                                                 // 996\n     * @param {BoundaryPoint} point                                                                                    // 997\n     * @return {Boolean}                                                                                               // 998\n     */                                                                                                                // 999\n    var isRightEdgePoint = function (point) {                                                                          // 1000\n      return point.offset === nodeLength(point.node);                                                                  // 1001\n    };                                                                                                                 // 1002\n                                                                                                                       // 1003\n    /**                                                                                                                // 1004\n     * returns whether boundaryPoint is edge or not.                                                                   // 1005\n     *                                                                                                                 // 1006\n     * @param {BoundaryPoint} point                                                                                    // 1007\n     * @return {Boolean}                                                                                               // 1008\n     */                                                                                                                // 1009\n    var isEdgePoint = function (point) {                                                                               // 1010\n      return isLeftEdgePoint(point) || isRightEdgePoint(point);                                                        // 1011\n    };                                                                                                                 // 1012\n                                                                                                                       // 1013\n    /**                                                                                                                // 1014\n     * returns wheter node is left edge of ancestor or not.                                                            // 1015\n     *                                                                                                                 // 1016\n     * @param {Node} node                                                                                              // 1017\n     * @param {Node} ancestor                                                                                          // 1018\n     * @return {Boolean}                                                                                               // 1019\n     */                                                                                                                // 1020\n    var isLeftEdgeOf = function (node, ancestor) {                                                                     // 1021\n      while (node && node !== ancestor) {                                                                              // 1022\n        if (position(node) !== 0) {                                                                                    // 1023\n          return false;                                                                                                // 1024\n        }                                                                                                              // 1025\n        node = node.parentNode;                                                                                        // 1026\n      }                                                                                                                // 1027\n                                                                                                                       // 1028\n      return true;                                                                                                     // 1029\n    };                                                                                                                 // 1030\n                                                                                                                       // 1031\n    /**                                                                                                                // 1032\n     * returns whether node is right edge of ancestor or not.                                                          // 1033\n     *                                                                                                                 // 1034\n     * @param {Node} node                                                                                              // 1035\n     * @param {Node} ancestor                                                                                          // 1036\n     * @return {Boolean}                                                                                               // 1037\n     */                                                                                                                // 1038\n    var isRightEdgeOf = function (node, ancestor) {                                                                    // 1039\n      while (node && node !== ancestor) {                                                                              // 1040\n        if (position(node) !== nodeLength(node.parentNode) - 1) {                                                      // 1041\n          return false;                                                                                                // 1042\n        }                                                                                                              // 1043\n        node = node.parentNode;                                                                                        // 1044\n      }                                                                                                                // 1045\n                                                                                                                       // 1046\n      return true;                                                                                                     // 1047\n    };                                                                                                                 // 1048\n                                                                                                                       // 1049\n    /**                                                                                                                // 1050\n     * returns whether point is left edge of ancestor or not.                                                          // 1051\n     * @param {BoundaryPoint} point                                                                                    // 1052\n     * @param {Node} ancestor                                                                                          // 1053\n     * @return {Boolean}                                                                                               // 1054\n     */                                                                                                                // 1055\n    var isLeftEdgePointOf = function (point, ancestor) {                                                               // 1056\n      return isLeftEdgePoint(point) && isLeftEdgeOf(point.node, ancestor);                                             // 1057\n    };                                                                                                                 // 1058\n                                                                                                                       // 1059\n    /**                                                                                                                // 1060\n     * returns whether point is right edge of ancestor or not.                                                         // 1061\n     * @param {BoundaryPoint} point                                                                                    // 1062\n     * @param {Node} ancestor                                                                                          // 1063\n     * @return {Boolean}                                                                                               // 1064\n     */                                                                                                                // 1065\n    var isRightEdgePointOf = function (point, ancestor) {                                                              // 1066\n      return isRightEdgePoint(point) && isRightEdgeOf(point.node, ancestor);                                           // 1067\n    };                                                                                                                 // 1068\n                                                                                                                       // 1069\n    /**                                                                                                                // 1070\n     * returns offset from parent.                                                                                     // 1071\n     *                                                                                                                 // 1072\n     * @param {Node} node                                                                                              // 1073\n     */                                                                                                                // 1074\n    var position = function (node) {                                                                                   // 1075\n      var offset = 0;                                                                                                  // 1076\n      while ((node = node.previousSibling)) {                                                                          // 1077\n        offset += 1;                                                                                                   // 1078\n      }                                                                                                                // 1079\n      return offset;                                                                                                   // 1080\n    };                                                                                                                 // 1081\n                                                                                                                       // 1082\n    var hasChildren = function (node) {                                                                                // 1083\n      return !!(node && node.childNodes && node.childNodes.length);                                                    // 1084\n    };                                                                                                                 // 1085\n                                                                                                                       // 1086\n    /**                                                                                                                // 1087\n     * returns previous boundaryPoint                                                                                  // 1088\n     *                                                                                                                 // 1089\n     * @param {BoundaryPoint} point                                                                                    // 1090\n     * @param {Boolean} isSkipInnerOffset                                                                              // 1091\n     * @return {BoundaryPoint}                                                                                         // 1092\n     */                                                                                                                // 1093\n    var prevPoint = function (point, isSkipInnerOffset) {                                                              // 1094\n      var node, offset;                                                                                                // 1095\n                                                                                                                       // 1096\n      if (point.offset === 0) {                                                                                        // 1097\n        if (isEditable(point.node)) {                                                                                  // 1098\n          return null;                                                                                                 // 1099\n        }                                                                                                              // 1100\n                                                                                                                       // 1101\n        node = point.node.parentNode;                                                                                  // 1102\n        offset = position(point.node);                                                                                 // 1103\n      } else if (hasChildren(point.node)) {                                                                            // 1104\n        node = point.node.childNodes[point.offset - 1];                                                                // 1105\n        offset = nodeLength(node);                                                                                     // 1106\n      } else {                                                                                                         // 1107\n        node = point.node;                                                                                             // 1108\n        offset = isSkipInnerOffset ? 0 : point.offset - 1;                                                             // 1109\n      }                                                                                                                // 1110\n                                                                                                                       // 1111\n      return {                                                                                                         // 1112\n        node: node,                                                                                                    // 1113\n        offset: offset                                                                                                 // 1114\n      };                                                                                                               // 1115\n    };                                                                                                                 // 1116\n                                                                                                                       // 1117\n    /**                                                                                                                // 1118\n     * returns next boundaryPoint                                                                                      // 1119\n     *                                                                                                                 // 1120\n     * @param {BoundaryPoint} point                                                                                    // 1121\n     * @param {Boolean} isSkipInnerOffset                                                                              // 1122\n     * @return {BoundaryPoint}                                                                                         // 1123\n     */                                                                                                                // 1124\n    var nextPoint = function (point, isSkipInnerOffset) {                                                              // 1125\n      var node, offset;                                                                                                // 1126\n                                                                                                                       // 1127\n      if (nodeLength(point.node) === point.offset) {                                                                   // 1128\n        if (isEditable(point.node)) {                                                                                  // 1129\n          return null;                                                                                                 // 1130\n        }                                                                                                              // 1131\n                                                                                                                       // 1132\n        node = point.node.parentNode;                                                                                  // 1133\n        offset = position(point.node) + 1;                                                                             // 1134\n      } else if (hasChildren(point.node)) {                                                                            // 1135\n        node = point.node.childNodes[point.offset];                                                                    // 1136\n        offset = 0;                                                                                                    // 1137\n      } else {                                                                                                         // 1138\n        node = point.node;                                                                                             // 1139\n        offset = isSkipInnerOffset ? nodeLength(point.node) : point.offset + 1;                                        // 1140\n      }                                                                                                                // 1141\n                                                                                                                       // 1142\n      return {                                                                                                         // 1143\n        node: node,                                                                                                    // 1144\n        offset: offset                                                                                                 // 1145\n      };                                                                                                               // 1146\n    };                                                                                                                 // 1147\n                                                                                                                       // 1148\n    /**                                                                                                                // 1149\n     * returns whether pointA and pointB is same or not.                                                               // 1150\n     *                                                                                                                 // 1151\n     * @param {BoundaryPoint} pointA                                                                                   // 1152\n     * @param {BoundaryPoint} pointB                                                                                   // 1153\n     * @return {Boolean}                                                                                               // 1154\n     */                                                                                                                // 1155\n    var isSamePoint = function (pointA, pointB) {                                                                      // 1156\n      return pointA.node === pointB.node && pointA.offset === pointB.offset;                                           // 1157\n    };                                                                                                                 // 1158\n                                                                                                                       // 1159\n    /**                                                                                                                // 1160\n     * returns whether point is visible (can set cursor) or not.                                                       // 1161\n     *                                                                                                                 // 1162\n     * @param {BoundaryPoint} point                                                                                    // 1163\n     * @return {Boolean}                                                                                               // 1164\n     */                                                                                                                // 1165\n    var isVisiblePoint = function (point) {                                                                            // 1166\n      if (isText(point.node) || !hasChildren(point.node) || isEmpty(point.node)) {                                     // 1167\n        return true;                                                                                                   // 1168\n      }                                                                                                                // 1169\n                                                                                                                       // 1170\n      var leftNode = point.node.childNodes[point.offset - 1];                                                          // 1171\n      var rightNode = point.node.childNodes[point.offset];                                                             // 1172\n      if ((!leftNode || isVoid(leftNode)) && (!rightNode || isVoid(rightNode))) {                                      // 1173\n        return true;                                                                                                   // 1174\n      }                                                                                                                // 1175\n                                                                                                                       // 1176\n      return false;                                                                                                    // 1177\n    };                                                                                                                 // 1178\n                                                                                                                       // 1179\n    /**                                                                                                                // 1180\n     * @method prevPointUtil                                                                                           // 1181\n     *                                                                                                                 // 1182\n     * @param {BoundaryPoint} point                                                                                    // 1183\n     * @param {Function} pred                                                                                          // 1184\n     * @return {BoundaryPoint}                                                                                         // 1185\n     */                                                                                                                // 1186\n    var prevPointUntil = function (point, pred) {                                                                      // 1187\n      while (point) {                                                                                                  // 1188\n        if (pred(point)) {                                                                                             // 1189\n          return point;                                                                                                // 1190\n        }                                                                                                              // 1191\n                                                                                                                       // 1192\n        point = prevPoint(point);                                                                                      // 1193\n      }                                                                                                                // 1194\n                                                                                                                       // 1195\n      return null;                                                                                                     // 1196\n    };                                                                                                                 // 1197\n                                                                                                                       // 1198\n    /**                                                                                                                // 1199\n     * @method nextPointUntil                                                                                          // 1200\n     *                                                                                                                 // 1201\n     * @param {BoundaryPoint} point                                                                                    // 1202\n     * @param {Function} pred                                                                                          // 1203\n     * @return {BoundaryPoint}                                                                                         // 1204\n     */                                                                                                                // 1205\n    var nextPointUntil = function (point, pred) {                                                                      // 1206\n      while (point) {                                                                                                  // 1207\n        if (pred(point)) {                                                                                             // 1208\n          return point;                                                                                                // 1209\n        }                                                                                                              // 1210\n                                                                                                                       // 1211\n        point = nextPoint(point);                                                                                      // 1212\n      }                                                                                                                // 1213\n                                                                                                                       // 1214\n      return null;                                                                                                     // 1215\n    };                                                                                                                 // 1216\n                                                                                                                       // 1217\n    /**                                                                                                                // 1218\n     * returns whether point has character or not.                                                                     // 1219\n     *                                                                                                                 // 1220\n     * @param {Point} point                                                                                            // 1221\n     * @return {Boolean}                                                                                               // 1222\n     */                                                                                                                // 1223\n    var isCharPoint = function (point) {                                                                               // 1224\n      if (!isText(point.node)) {                                                                                       // 1225\n        return false;                                                                                                  // 1226\n      }                                                                                                                // 1227\n                                                                                                                       // 1228\n      var ch = point.node.nodeValue.charAt(point.offset - 1);                                                          // 1229\n      return ch && (ch !== ' ' && ch !== NBSP_CHAR);                                                                   // 1230\n    };                                                                                                                 // 1231\n                                                                                                                       // 1232\n    /**                                                                                                                // 1233\n     * @method walkPoint                                                                                               // 1234\n     *                                                                                                                 // 1235\n     * @param {BoundaryPoint} startPoint                                                                               // 1236\n     * @param {BoundaryPoint} endPoint                                                                                 // 1237\n     * @param {Function} handler                                                                                       // 1238\n     * @param {Boolean} isSkipInnerOffset                                                                              // 1239\n     */                                                                                                                // 1240\n    var walkPoint = function (startPoint, endPoint, handler, isSkipInnerOffset) {                                      // 1241\n      var point = startPoint;                                                                                          // 1242\n                                                                                                                       // 1243\n      while (point) {                                                                                                  // 1244\n        handler(point);                                                                                                // 1245\n                                                                                                                       // 1246\n        if (isSamePoint(point, endPoint)) {                                                                            // 1247\n          break;                                                                                                       // 1248\n        }                                                                                                              // 1249\n                                                                                                                       // 1250\n        var isSkipOffset = isSkipInnerOffset &&                                                                        // 1251\n                           startPoint.node !== point.node &&                                                           // 1252\n                           endPoint.node !== point.node;                                                               // 1253\n        point = nextPoint(point, isSkipOffset);                                                                        // 1254\n      }                                                                                                                // 1255\n    };                                                                                                                 // 1256\n                                                                                                                       // 1257\n    /**                                                                                                                // 1258\n     * @method makeOffsetPath                                                                                          // 1259\n     *                                                                                                                 // 1260\n     * return offsetPath(array of offset) from ancestor                                                                // 1261\n     *                                                                                                                 // 1262\n     * @param {Node} ancestor - ancestor node                                                                          // 1263\n     * @param {Node} node                                                                                              // 1264\n     */                                                                                                                // 1265\n    var makeOffsetPath = function (ancestor, node) {                                                                   // 1266\n      var ancestors = listAncestor(node, func.eq(ancestor));                                                           // 1267\n      return ancestors.map(position).reverse();                                                                        // 1268\n    };                                                                                                                 // 1269\n                                                                                                                       // 1270\n    /**                                                                                                                // 1271\n     * @method fromOffsetPath                                                                                          // 1272\n     *                                                                                                                 // 1273\n     * return element from offsetPath(array of offset)                                                                 // 1274\n     *                                                                                                                 // 1275\n     * @param {Node} ancestor - ancestor node                                                                          // 1276\n     * @param {array} offsets - offsetPath                                                                             // 1277\n     */                                                                                                                // 1278\n    var fromOffsetPath = function (ancestor, offsets) {                                                                // 1279\n      var current = ancestor;                                                                                          // 1280\n      for (var i = 0, len = offsets.length; i < len; i++) {                                                            // 1281\n        if (current.childNodes.length <= offsets[i]) {                                                                 // 1282\n          current = current.childNodes[current.childNodes.length - 1];                                                 // 1283\n        } else {                                                                                                       // 1284\n          current = current.childNodes[offsets[i]];                                                                    // 1285\n        }                                                                                                              // 1286\n      }                                                                                                                // 1287\n      return current;                                                                                                  // 1288\n    };                                                                                                                 // 1289\n                                                                                                                       // 1290\n    /**                                                                                                                // 1291\n     * @method splitNode                                                                                               // 1292\n     *                                                                                                                 // 1293\n     * split element or #text                                                                                          // 1294\n     *                                                                                                                 // 1295\n     * @param {BoundaryPoint} point                                                                                    // 1296\n     * @param {Object} [options]                                                                                       // 1297\n     * @param {Boolean} [options.isSkipPaddingBlankHTML] - default: false                                              // 1298\n     * @param {Boolean} [options.isNotSplitEdgePoint] - default: false                                                 // 1299\n     * @return {Node} right node of boundaryPoint                                                                      // 1300\n     */                                                                                                                // 1301\n    var splitNode = function (point, options) {                                                                        // 1302\n      var isSkipPaddingBlankHTML = options && options.isSkipPaddingBlankHTML;                                          // 1303\n      var isNotSplitEdgePoint = options && options.isNotSplitEdgePoint;                                                // 1304\n                                                                                                                       // 1305\n      // edge case                                                                                                     // 1306\n      if (isEdgePoint(point) && (isText(point.node) || isNotSplitEdgePoint)) {                                         // 1307\n        if (isLeftEdgePoint(point)) {                                                                                  // 1308\n          return point.node;                                                                                           // 1309\n        } else if (isRightEdgePoint(point)) {                                                                          // 1310\n          return point.node.nextSibling;                                                                               // 1311\n        }                                                                                                              // 1312\n      }                                                                                                                // 1313\n                                                                                                                       // 1314\n      // split #text                                                                                                   // 1315\n      if (isText(point.node)) {                                                                                        // 1316\n        return point.node.splitText(point.offset);                                                                     // 1317\n      } else {                                                                                                         // 1318\n        var childNode = point.node.childNodes[point.offset];                                                           // 1319\n        var clone = insertAfter(point.node.cloneNode(false), point.node);                                              // 1320\n        appendChildNodes(clone, listNext(childNode));                                                                  // 1321\n                                                                                                                       // 1322\n        if (!isSkipPaddingBlankHTML) {                                                                                 // 1323\n          paddingBlankHTML(point.node);                                                                                // 1324\n          paddingBlankHTML(clone);                                                                                     // 1325\n        }                                                                                                              // 1326\n                                                                                                                       // 1327\n        return clone;                                                                                                  // 1328\n      }                                                                                                                // 1329\n    };                                                                                                                 // 1330\n                                                                                                                       // 1331\n    /**                                                                                                                // 1332\n     * @method splitTree                                                                                               // 1333\n     *                                                                                                                 // 1334\n     * split tree by point                                                                                             // 1335\n     *                                                                                                                 // 1336\n     * @param {Node} root - split root                                                                                 // 1337\n     * @param {BoundaryPoint} point                                                                                    // 1338\n     * @param {Object} [options]                                                                                       // 1339\n     * @param {Boolean} [options.isSkipPaddingBlankHTML] - default: false                                              // 1340\n     * @param {Boolean} [options.isNotSplitEdgePoint] - default: false                                                 // 1341\n     * @return {Node} right node of boundaryPoint                                                                      // 1342\n     */                                                                                                                // 1343\n    var splitTree = function (root, point, options) {                                                                  // 1344\n      // ex) [#text, <span>, <p>]                                                                                      // 1345\n      var ancestors = listAncestor(point.node, func.eq(root));                                                         // 1346\n                                                                                                                       // 1347\n      if (!ancestors.length) {                                                                                         // 1348\n        return null;                                                                                                   // 1349\n      } else if (ancestors.length === 1) {                                                                             // 1350\n        return splitNode(point, options);                                                                              // 1351\n      }                                                                                                                // 1352\n                                                                                                                       // 1353\n      return ancestors.reduce(function (node, parent) {                                                                // 1354\n        if (node === point.node) {                                                                                     // 1355\n          node = splitNode(point, options);                                                                            // 1356\n        }                                                                                                              // 1357\n                                                                                                                       // 1358\n        return splitNode({                                                                                             // 1359\n          node: parent,                                                                                                // 1360\n          offset: node ? dom.position(node) : nodeLength(parent)                                                       // 1361\n        }, options);                                                                                                   // 1362\n      });                                                                                                              // 1363\n    };                                                                                                                 // 1364\n                                                                                                                       // 1365\n    /**                                                                                                                // 1366\n     * split point                                                                                                     // 1367\n     *                                                                                                                 // 1368\n     * @param {Point} point                                                                                            // 1369\n     * @param {Boolean} isInline                                                                                       // 1370\n     * @return {Object}                                                                                                // 1371\n     */                                                                                                                // 1372\n    var splitPoint = function (point, isInline) {                                                                      // 1373\n      // find splitRoot, container                                                                                     // 1374\n      //  - inline: splitRoot is a child of paragraph                                                                  // 1375\n      //  - block: splitRoot is a child of bodyContainer                                                               // 1376\n      var pred = isInline ? isPara : isBodyContainer;                                                                  // 1377\n      var ancestors = listAncestor(point.node, pred);                                                                  // 1378\n      var topAncestor = list.last(ancestors) || point.node;                                                            // 1379\n                                                                                                                       // 1380\n      var splitRoot, container;                                                                                        // 1381\n      if (pred(topAncestor)) {                                                                                         // 1382\n        splitRoot = ancestors[ancestors.length - 2];                                                                   // 1383\n        container = topAncestor;                                                                                       // 1384\n      } else {                                                                                                         // 1385\n        splitRoot = topAncestor;                                                                                       // 1386\n        container = splitRoot.parentNode;                                                                              // 1387\n      }                                                                                                                // 1388\n                                                                                                                       // 1389\n      // if splitRoot is exists, split with splitTree                                                                  // 1390\n      var pivot = splitRoot && splitTree(splitRoot, point, {                                                           // 1391\n        isSkipPaddingBlankHTML: isInline,                                                                              // 1392\n        isNotSplitEdgePoint: isInline                                                                                  // 1393\n      });                                                                                                              // 1394\n                                                                                                                       // 1395\n      // if container is point.node, find pivot with point.offset                                                      // 1396\n      if (!pivot && container === point.node) {                                                                        // 1397\n        pivot = point.node.childNodes[point.offset];                                                                   // 1398\n      }                                                                                                                // 1399\n                                                                                                                       // 1400\n      return {                                                                                                         // 1401\n        rightNode: pivot,                                                                                              // 1402\n        container: container                                                                                           // 1403\n      };                                                                                                               // 1404\n    };                                                                                                                 // 1405\n                                                                                                                       // 1406\n    var create = function (nodeName) {                                                                                 // 1407\n      return document.createElement(nodeName);                                                                         // 1408\n    };                                                                                                                 // 1409\n                                                                                                                       // 1410\n    var createText = function (text) {                                                                                 // 1411\n      return document.createTextNode(text);                                                                            // 1412\n    };                                                                                                                 // 1413\n                                                                                                                       // 1414\n    /**                                                                                                                // 1415\n     * @method remove                                                                                                  // 1416\n     *                                                                                                                 // 1417\n     * remove node, (isRemoveChild: remove child or not)                                                               // 1418\n     *                                                                                                                 // 1419\n     * @param {Node} node                                                                                              // 1420\n     * @param {Boolean} isRemoveChild                                                                                  // 1421\n     */                                                                                                                // 1422\n    var remove = function (node, isRemoveChild) {                                                                      // 1423\n      if (!node || !node.parentNode) { return; }                                                                       // 1424\n      if (node.removeNode) { return node.removeNode(isRemoveChild); }                                                  // 1425\n                                                                                                                       // 1426\n      var parent = node.parentNode;                                                                                    // 1427\n      if (!isRemoveChild) {                                                                                            // 1428\n        var nodes = [];                                                                                                // 1429\n        var i, len;                                                                                                    // 1430\n        for (i = 0, len = node.childNodes.length; i < len; i++) {                                                      // 1431\n          nodes.push(node.childNodes[i]);                                                                              // 1432\n        }                                                                                                              // 1433\n                                                                                                                       // 1434\n        for (i = 0, len = nodes.length; i < len; i++) {                                                                // 1435\n          parent.insertBefore(nodes[i], node);                                                                         // 1436\n        }                                                                                                              // 1437\n      }                                                                                                                // 1438\n                                                                                                                       // 1439\n      parent.removeChild(node);                                                                                        // 1440\n    };                                                                                                                 // 1441\n                                                                                                                       // 1442\n    /**                                                                                                                // 1443\n     * @method removeWhile                                                                                             // 1444\n     *                                                                                                                 // 1445\n     * @param {Node} node                                                                                              // 1446\n     * @param {Function} pred                                                                                          // 1447\n     */                                                                                                                // 1448\n    var removeWhile = function (node, pred) {                                                                          // 1449\n      while (node) {                                                                                                   // 1450\n        if (isEditable(node) || !pred(node)) {                                                                         // 1451\n          break;                                                                                                       // 1452\n        }                                                                                                              // 1453\n                                                                                                                       // 1454\n        var parent = node.parentNode;                                                                                  // 1455\n        remove(node);                                                                                                  // 1456\n        node = parent;                                                                                                 // 1457\n      }                                                                                                                // 1458\n    };                                                                                                                 // 1459\n                                                                                                                       // 1460\n    /**                                                                                                                // 1461\n     * @method replace                                                                                                 // 1462\n     *                                                                                                                 // 1463\n     * replace node with provided nodeName                                                                             // 1464\n     *                                                                                                                 // 1465\n     * @param {Node} node                                                                                              // 1466\n     * @param {String} nodeName                                                                                        // 1467\n     * @return {Node} - new node                                                                                       // 1468\n     */                                                                                                                // 1469\n    var replace = function (node, nodeName) {                                                                          // 1470\n      if (node.nodeName.toUpperCase() === nodeName.toUpperCase()) {                                                    // 1471\n        return node;                                                                                                   // 1472\n      }                                                                                                                // 1473\n                                                                                                                       // 1474\n      var newNode = create(nodeName);                                                                                  // 1475\n                                                                                                                       // 1476\n      if (node.style.cssText) {                                                                                        // 1477\n        newNode.style.cssText = node.style.cssText;                                                                    // 1478\n      }                                                                                                                // 1479\n                                                                                                                       // 1480\n      appendChildNodes(newNode, list.from(node.childNodes));                                                           // 1481\n      insertAfter(newNode, node);                                                                                      // 1482\n      remove(node);                                                                                                    // 1483\n                                                                                                                       // 1484\n      return newNode;                                                                                                  // 1485\n    };                                                                                                                 // 1486\n                                                                                                                       // 1487\n    var isTextarea = makePredByNodeName('TEXTAREA');                                                                   // 1488\n                                                                                                                       // 1489\n    /**                                                                                                                // 1490\n     * @param {jQuery} $node                                                                                           // 1491\n     * @param {Boolean} [stripLinebreaks] - default: false                                                             // 1492\n     */                                                                                                                // 1493\n    var value = function ($node, stripLinebreaks) {                                                                    // 1494\n      var val = isTextarea($node[0]) ? $node.val() : $node.html();                                                     // 1495\n      if (stripLinebreaks) {                                                                                           // 1496\n        return val.replace(/[\\n\\r]/g, '');                                                                             // 1497\n      }                                                                                                                // 1498\n      return val;                                                                                                      // 1499\n    };                                                                                                                 // 1500\n                                                                                                                       // 1501\n    /**                                                                                                                // 1502\n     * @method html                                                                                                    // 1503\n     *                                                                                                                 // 1504\n     * get the HTML contents of node                                                                                   // 1505\n     *                                                                                                                 // 1506\n     * @param {jQuery} $node                                                                                           // 1507\n     * @param {Boolean} [isNewlineOnBlock]                                                                             // 1508\n     */                                                                                                                // 1509\n    var html = function ($node, isNewlineOnBlock) {                                                                    // 1510\n      var markup = value($node);                                                                                       // 1511\n                                                                                                                       // 1512\n      if (isNewlineOnBlock) {                                                                                          // 1513\n        var regexTag = /<(\\/?)(\\b(?!!)[^>\\s]*)(.*?)(\\s*\\/?>)/g;                                                        // 1514\n        markup = markup.replace(regexTag, function (match, endSlash, name) {                                           // 1515\n          name = name.toUpperCase();                                                                                   // 1516\n          var isEndOfInlineContainer = /^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(name) &&                                     // 1517\n                                       !!endSlash;                                                                     // 1518\n          var isBlockNode = /^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(name);                                    // 1519\n                                                                                                                       // 1520\n          return match + ((isEndOfInlineContainer || isBlockNode) ? '\\n' : '');                                        // 1521\n        });                                                                                                            // 1522\n        markup = $.trim(markup);                                                                                       // 1523\n      }                                                                                                                // 1524\n                                                                                                                       // 1525\n      return markup;                                                                                                   // 1526\n    };                                                                                                                 // 1527\n                                                                                                                       // 1528\n    return {                                                                                                           // 1529\n      /** @property {String} NBSP_CHAR */                                                                              // 1530\n      NBSP_CHAR: NBSP_CHAR,                                                                                            // 1531\n      /** @property {String} ZERO_WIDTH_NBSP_CHAR */                                                                   // 1532\n      ZERO_WIDTH_NBSP_CHAR: ZERO_WIDTH_NBSP_CHAR,                                                                      // 1533\n      /** @property {String} blank */                                                                                  // 1534\n      blank: blankHTML,                                                                                                // 1535\n      /** @property {String} emptyPara */                                                                              // 1536\n      emptyPara: '<p>' + blankHTML + '</p>',                                                                           // 1537\n      makePredByNodeName: makePredByNodeName,                                                                          // 1538\n      isEditable: isEditable,                                                                                          // 1539\n      isControlSizing: isControlSizing,                                                                                // 1540\n      buildLayoutInfo: buildLayoutInfo,                                                                                // 1541\n      makeLayoutInfo: makeLayoutInfo,                                                                                  // 1542\n      isText: isText,                                                                                                  // 1543\n      isVoid: isVoid,                                                                                                  // 1544\n      isPara: isPara,                                                                                                  // 1545\n      isPurePara: isPurePara,                                                                                          // 1546\n      isInline: isInline,                                                                                              // 1547\n      isBlock: func.not(isInline),                                                                                     // 1548\n      isBodyInline: isBodyInline,                                                                                      // 1549\n      isBody: isBody,                                                                                                  // 1550\n      isParaInline: isParaInline,                                                                                      // 1551\n      isList: isList,                                                                                                  // 1552\n      isTable: isTable,                                                                                                // 1553\n      isCell: isCell,                                                                                                  // 1554\n      isBlockquote: isBlockquote,                                                                                      // 1555\n      isBodyContainer: isBodyContainer,                                                                                // 1556\n      isAnchor: isAnchor,                                                                                              // 1557\n      isDiv: makePredByNodeName('DIV'),                                                                                // 1558\n      isLi: isLi,                                                                                                      // 1559\n      isBR: makePredByNodeName('BR'),                                                                                  // 1560\n      isSpan: makePredByNodeName('SPAN'),                                                                              // 1561\n      isB: makePredByNodeName('B'),                                                                                    // 1562\n      isU: makePredByNodeName('U'),                                                                                    // 1563\n      isS: makePredByNodeName('S'),                                                                                    // 1564\n      isI: makePredByNodeName('I'),                                                                                    // 1565\n      isImg: makePredByNodeName('IMG'),                                                                                // 1566\n      isTextarea: isTextarea,                                                                                          // 1567\n      isEmpty: isEmpty,                                                                                                // 1568\n      isEmptyAnchor: func.and(isAnchor, isEmpty),                                                                      // 1569\n      isClosestSibling: isClosestSibling,                                                                              // 1570\n      withClosestSiblings: withClosestSiblings,                                                                        // 1571\n      nodeLength: nodeLength,                                                                                          // 1572\n      isLeftEdgePoint: isLeftEdgePoint,                                                                                // 1573\n      isRightEdgePoint: isRightEdgePoint,                                                                              // 1574\n      isEdgePoint: isEdgePoint,                                                                                        // 1575\n      isLeftEdgeOf: isLeftEdgeOf,                                                                                      // 1576\n      isRightEdgeOf: isRightEdgeOf,                                                                                    // 1577\n      isLeftEdgePointOf: isLeftEdgePointOf,                                                                            // 1578\n      isRightEdgePointOf: isRightEdgePointOf,                                                                          // 1579\n      prevPoint: prevPoint,                                                                                            // 1580\n      nextPoint: nextPoint,                                                                                            // 1581\n      isSamePoint: isSamePoint,                                                                                        // 1582\n      isVisiblePoint: isVisiblePoint,                                                                                  // 1583\n      prevPointUntil: prevPointUntil,                                                                                  // 1584\n      nextPointUntil: nextPointUntil,                                                                                  // 1585\n      isCharPoint: isCharPoint,                                                                                        // 1586\n      walkPoint: walkPoint,                                                                                            // 1587\n      ancestor: ancestor,                                                                                              // 1588\n      singleChildAncestor: singleChildAncestor,                                                                        // 1589\n      listAncestor: listAncestor,                                                                                      // 1590\n      lastAncestor: lastAncestor,                                                                                      // 1591\n      listNext: listNext,                                                                                              // 1592\n      listPrev: listPrev,                                                                                              // 1593\n      listDescendant: listDescendant,                                                                                  // 1594\n      commonAncestor: commonAncestor,                                                                                  // 1595\n      wrap: wrap,                                                                                                      // 1596\n      insertAfter: insertAfter,                                                                                        // 1597\n      appendChildNodes: appendChildNodes,                                                                              // 1598\n      position: position,                                                                                              // 1599\n      hasChildren: hasChildren,                                                                                        // 1600\n      makeOffsetPath: makeOffsetPath,                                                                                  // 1601\n      fromOffsetPath: fromOffsetPath,                                                                                  // 1602\n      splitTree: splitTree,                                                                                            // 1603\n      splitPoint: splitPoint,                                                                                          // 1604\n      create: create,                                                                                                  // 1605\n      createText: createText,                                                                                          // 1606\n      remove: remove,                                                                                                  // 1607\n      removeWhile: removeWhile,                                                                                        // 1608\n      replace: replace,                                                                                                // 1609\n      html: html,                                                                                                      // 1610\n      value: value                                                                                                     // 1611\n    };                                                                                                                 // 1612\n  })();                                                                                                                // 1613\n                                                                                                                       // 1614\n                                                                                                                       // 1615\n  var range = (function () {                                                                                           // 1616\n                                                                                                                       // 1617\n    /**                                                                                                                // 1618\n     * return boundaryPoint from TextRange, inspired by Andy Na's HuskyRange.js                                        // 1619\n     *                                                                                                                 // 1620\n     * @param {TextRange} textRange                                                                                    // 1621\n     * @param {Boolean} isStart                                                                                        // 1622\n     * @return {BoundaryPoint}                                                                                         // 1623\n     *                                                                                                                 // 1624\n     * @see http://msdn.microsoft.com/en-us/library/ie/ms535872(v=vs.85).aspx                                          // 1625\n     */                                                                                                                // 1626\n    var textRangeToPoint = function (textRange, isStart) {                                                             // 1627\n      var container = textRange.parentElement(), offset;                                                               // 1628\n                                                                                                                       // 1629\n      var tester = document.body.createTextRange(), prevContainer;                                                     // 1630\n      var childNodes = list.from(container.childNodes);                                                                // 1631\n      for (offset = 0; offset < childNodes.length; offset++) {                                                         // 1632\n        if (dom.isText(childNodes[offset])) {                                                                          // 1633\n          continue;                                                                                                    // 1634\n        }                                                                                                              // 1635\n        tester.moveToElementText(childNodes[offset]);                                                                  // 1636\n        if (tester.compareEndPoints('StartToStart', textRange) >= 0) {                                                 // 1637\n          break;                                                                                                       // 1638\n        }                                                                                                              // 1639\n        prevContainer = childNodes[offset];                                                                            // 1640\n      }                                                                                                                // 1641\n                                                                                                                       // 1642\n      if (offset !== 0 && dom.isText(childNodes[offset - 1])) {                                                        // 1643\n        var textRangeStart = document.body.createTextRange(), curTextNode = null;                                      // 1644\n        textRangeStart.moveToElementText(prevContainer || container);                                                  // 1645\n        textRangeStart.collapse(!prevContainer);                                                                       // 1646\n        curTextNode = prevContainer ? prevContainer.nextSibling : container.firstChild;                                // 1647\n                                                                                                                       // 1648\n        var pointTester = textRange.duplicate();                                                                       // 1649\n        pointTester.setEndPoint('StartToStart', textRangeStart);                                                       // 1650\n        var textCount = pointTester.text.replace(/[\\r\\n]/g, '').length;                                                // 1651\n                                                                                                                       // 1652\n        while (textCount > curTextNode.nodeValue.length && curTextNode.nextSibling) {                                  // 1653\n          textCount -= curTextNode.nodeValue.length;                                                                   // 1654\n          curTextNode = curTextNode.nextSibling;                                                                       // 1655\n        }                                                                                                              // 1656\n                                                                                                                       // 1657\n        /* jshint ignore:start */                                                                                      // 1658\n        var dummy = curTextNode.nodeValue; // enforce IE to re-reference curTextNode, hack                             // 1659\n        /* jshint ignore:end */                                                                                        // 1660\n                                                                                                                       // 1661\n        if (isStart && curTextNode.nextSibling && dom.isText(curTextNode.nextSibling) &&                               // 1662\n            textCount === curTextNode.nodeValue.length) {                                                              // 1663\n          textCount -= curTextNode.nodeValue.length;                                                                   // 1664\n          curTextNode = curTextNode.nextSibling;                                                                       // 1665\n        }                                                                                                              // 1666\n                                                                                                                       // 1667\n        container = curTextNode;                                                                                       // 1668\n        offset = textCount;                                                                                            // 1669\n      }                                                                                                                // 1670\n                                                                                                                       // 1671\n      return {                                                                                                         // 1672\n        cont: container,                                                                                               // 1673\n        offset: offset                                                                                                 // 1674\n      };                                                                                                               // 1675\n    };                                                                                                                 // 1676\n                                                                                                                       // 1677\n    /**                                                                                                                // 1678\n     * return TextRange from boundary point (inspired by google closure-library)                                       // 1679\n     * @param {BoundaryPoint} point                                                                                    // 1680\n     * @return {TextRange}                                                                                             // 1681\n     */                                                                                                                // 1682\n    var pointToTextRange = function (point) {                                                                          // 1683\n      var textRangeInfo = function (container, offset) {                                                               // 1684\n        var node, isCollapseToStart;                                                                                   // 1685\n                                                                                                                       // 1686\n        if (dom.isText(container)) {                                                                                   // 1687\n          var prevTextNodes = dom.listPrev(container, func.not(dom.isText));                                           // 1688\n          var prevContainer = list.last(prevTextNodes).previousSibling;                                                // 1689\n          node =  prevContainer || container.parentNode;                                                               // 1690\n          offset += list.sum(list.tail(prevTextNodes), dom.nodeLength);                                                // 1691\n          isCollapseToStart = !prevContainer;                                                                          // 1692\n        } else {                                                                                                       // 1693\n          node = container.childNodes[offset] || container;                                                            // 1694\n          if (dom.isText(node)) {                                                                                      // 1695\n            return textRangeInfo(node, 0);                                                                             // 1696\n          }                                                                                                            // 1697\n                                                                                                                       // 1698\n          offset = 0;                                                                                                  // 1699\n          isCollapseToStart = false;                                                                                   // 1700\n        }                                                                                                              // 1701\n                                                                                                                       // 1702\n        return {                                                                                                       // 1703\n          node: node,                                                                                                  // 1704\n          collapseToStart: isCollapseToStart,                                                                          // 1705\n          offset: offset                                                                                               // 1706\n        };                                                                                                             // 1707\n      };                                                                                                               // 1708\n                                                                                                                       // 1709\n      var textRange = document.body.createTextRange();                                                                 // 1710\n      var info = textRangeInfo(point.node, point.offset);                                                              // 1711\n                                                                                                                       // 1712\n      textRange.moveToElementText(info.node);                                                                          // 1713\n      textRange.collapse(info.collapseToStart);                                                                        // 1714\n      textRange.moveStart('character', info.offset);                                                                   // 1715\n      return textRange;                                                                                                // 1716\n    };                                                                                                                 // 1717\n                                                                                                                       // 1718\n    /**                                                                                                                // 1719\n     * Wrapped Range                                                                                                   // 1720\n     *                                                                                                                 // 1721\n     * @constructor                                                                                                    // 1722\n     * @param {Node} sc - start container                                                                              // 1723\n     * @param {Number} so - start offset                                                                               // 1724\n     * @param {Node} ec - end container                                                                                // 1725\n     * @param {Number} eo - end offset                                                                                 // 1726\n     */                                                                                                                // 1727\n    var WrappedRange = function (sc, so, ec, eo) {                                                                     // 1728\n      this.sc = sc;                                                                                                    // 1729\n      this.so = so;                                                                                                    // 1730\n      this.ec = ec;                                                                                                    // 1731\n      this.eo = eo;                                                                                                    // 1732\n                                                                                                                       // 1733\n      // nativeRange: get nativeRange from sc, so, ec, eo                                                              // 1734\n      var nativeRange = function () {                                                                                  // 1735\n        if (agent.isW3CRangeSupport) {                                                                                 // 1736\n          var w3cRange = document.createRange();                                                                       // 1737\n          w3cRange.setStart(sc, so);                                                                                   // 1738\n          w3cRange.setEnd(ec, eo);                                                                                     // 1739\n                                                                                                                       // 1740\n          return w3cRange;                                                                                             // 1741\n        } else {                                                                                                       // 1742\n          var textRange = pointToTextRange({                                                                           // 1743\n            node: sc,                                                                                                  // 1744\n            offset: so                                                                                                 // 1745\n          });                                                                                                          // 1746\n                                                                                                                       // 1747\n          textRange.setEndPoint('EndToEnd', pointToTextRange({                                                         // 1748\n            node: ec,                                                                                                  // 1749\n            offset: eo                                                                                                 // 1750\n          }));                                                                                                         // 1751\n                                                                                                                       // 1752\n          return textRange;                                                                                            // 1753\n        }                                                                                                              // 1754\n      };                                                                                                               // 1755\n                                                                                                                       // 1756\n      this.getPoints = function () {                                                                                   // 1757\n        return {                                                                                                       // 1758\n          sc: sc,                                                                                                      // 1759\n          so: so,                                                                                                      // 1760\n          ec: ec,                                                                                                      // 1761\n          eo: eo                                                                                                       // 1762\n        };                                                                                                             // 1763\n      };                                                                                                               // 1764\n                                                                                                                       // 1765\n      this.getStartPoint = function () {                                                                               // 1766\n        return {                                                                                                       // 1767\n          node: sc,                                                                                                    // 1768\n          offset: so                                                                                                   // 1769\n        };                                                                                                             // 1770\n      };                                                                                                               // 1771\n                                                                                                                       // 1772\n      this.getEndPoint = function () {                                                                                 // 1773\n        return {                                                                                                       // 1774\n          node: ec,                                                                                                    // 1775\n          offset: eo                                                                                                   // 1776\n        };                                                                                                             // 1777\n      };                                                                                                               // 1778\n                                                                                                                       // 1779\n      /**                                                                                                              // 1780\n       * select update visible range                                                                                   // 1781\n       */                                                                                                              // 1782\n      this.select = function () {                                                                                      // 1783\n        var nativeRng = nativeRange();                                                                                 // 1784\n        if (agent.isW3CRangeSupport) {                                                                                 // 1785\n          var selection = document.getSelection();                                                                     // 1786\n          if (selection.rangeCount > 0) {                                                                              // 1787\n            selection.removeAllRanges();                                                                               // 1788\n          }                                                                                                            // 1789\n          selection.addRange(nativeRng);                                                                               // 1790\n        } else {                                                                                                       // 1791\n          nativeRng.select();                                                                                          // 1792\n        }                                                                                                              // 1793\n                                                                                                                       // 1794\n        return this;                                                                                                   // 1795\n      };                                                                                                               // 1796\n                                                                                                                       // 1797\n      /**                                                                                                              // 1798\n       * @return {WrappedRange}                                                                                        // 1799\n       */                                                                                                              // 1800\n      this.normalize = function () {                                                                                   // 1801\n                                                                                                                       // 1802\n        /**                                                                                                            // 1803\n         * @param {BoundaryPoint} point                                                                                // 1804\n         * @param {Boolean} isLeftToRight                                                                              // 1805\n         * @return {BoundaryPoint}                                                                                     // 1806\n         */                                                                                                            // 1807\n        var getVisiblePoint = function (point, isLeftToRight) {                                                        // 1808\n          if ((dom.isVisiblePoint(point) && !dom.isEdgePoint(point)) ||                                                // 1809\n              (dom.isVisiblePoint(point) && dom.isRightEdgePoint(point) && !isLeftToRight) ||                          // 1810\n              (dom.isVisiblePoint(point) && dom.isLeftEdgePoint(point) && isLeftToRight) ||                            // 1811\n              (dom.isVisiblePoint(point) && dom.isBlock(point.node) && dom.isEmpty(point.node))) {                     // 1812\n            return point;                                                                                              // 1813\n          }                                                                                                            // 1814\n                                                                                                                       // 1815\n          // point on block's edge                                                                                     // 1816\n          var block = dom.ancestor(point.node, dom.isBlock);                                                           // 1817\n          if (((dom.isLeftEdgePointOf(point, block) || dom.isVoid(dom.prevPoint(point).node)) && !isLeftToRight) ||    // 1818\n              ((dom.isRightEdgePointOf(point, block) || dom.isVoid(dom.nextPoint(point).node)) && isLeftToRight)) {    // 1819\n                                                                                                                       // 1820\n            // returns point already on visible point                                                                  // 1821\n            if (dom.isVisiblePoint(point)) {                                                                           // 1822\n              return point;                                                                                            // 1823\n            }                                                                                                          // 1824\n            // reverse direction                                                                                       // 1825\n            isLeftToRight = !isLeftToRight;                                                                            // 1826\n          }                                                                                                            // 1827\n                                                                                                                       // 1828\n          var nextPoint = isLeftToRight ? dom.nextPointUntil(dom.nextPoint(point), dom.isVisiblePoint) :               // 1829\n                                          dom.prevPointUntil(dom.prevPoint(point), dom.isVisiblePoint);                // 1830\n          return nextPoint || point;                                                                                   // 1831\n        };                                                                                                             // 1832\n                                                                                                                       // 1833\n        var endPoint = getVisiblePoint(this.getEndPoint(), false);                                                     // 1834\n        var startPoint = this.isCollapsed() ? endPoint : getVisiblePoint(this.getStartPoint(), true);                  // 1835\n                                                                                                                       // 1836\n        return new WrappedRange(                                                                                       // 1837\n          startPoint.node,                                                                                             // 1838\n          startPoint.offset,                                                                                           // 1839\n          endPoint.node,                                                                                               // 1840\n          endPoint.offset                                                                                              // 1841\n        );                                                                                                             // 1842\n      };                                                                                                               // 1843\n                                                                                                                       // 1844\n      /**                                                                                                              // 1845\n       * returns matched nodes on range                                                                                // 1846\n       *                                                                                                               // 1847\n       * @param {Function} [pred] - predicate function                                                                 // 1848\n       * @param {Object} [options]                                                                                     // 1849\n       * @param {Boolean} [options.includeAncestor]                                                                    // 1850\n       * @param {Boolean} [options.fullyContains]                                                                      // 1851\n       * @return {Node[]}                                                                                              // 1852\n       */                                                                                                              // 1853\n      this.nodes = function (pred, options) {                                                                          // 1854\n        pred = pred || func.ok;                                                                                        // 1855\n                                                                                                                       // 1856\n        var includeAncestor = options && options.includeAncestor;                                                      // 1857\n        var fullyContains = options && options.fullyContains;                                                          // 1858\n                                                                                                                       // 1859\n        // TODO compare points and sort                                                                                // 1860\n        var startPoint = this.getStartPoint();                                                                         // 1861\n        var endPoint = this.getEndPoint();                                                                             // 1862\n                                                                                                                       // 1863\n        var nodes = [];                                                                                                // 1864\n        var leftEdgeNodes = [];                                                                                        // 1865\n                                                                                                                       // 1866\n        dom.walkPoint(startPoint, endPoint, function (point) {                                                         // 1867\n          if (dom.isEditable(point.node)) {                                                                            // 1868\n            return;                                                                                                    // 1869\n          }                                                                                                            // 1870\n                                                                                                                       // 1871\n          var node;                                                                                                    // 1872\n          if (fullyContains) {                                                                                         // 1873\n            if (dom.isLeftEdgePoint(point)) {                                                                          // 1874\n              leftEdgeNodes.push(point.node);                                                                          // 1875\n            }                                                                                                          // 1876\n            if (dom.isRightEdgePoint(point) && list.contains(leftEdgeNodes, point.node)) {                             // 1877\n              node = point.node;                                                                                       // 1878\n            }                                                                                                          // 1879\n          } else if (includeAncestor) {                                                                                // 1880\n            node = dom.ancestor(point.node, pred);                                                                     // 1881\n          } else {                                                                                                     // 1882\n            node = point.node;                                                                                         // 1883\n          }                                                                                                            // 1884\n                                                                                                                       // 1885\n          if (node && pred(node)) {                                                                                    // 1886\n            nodes.push(node);                                                                                          // 1887\n          }                                                                                                            // 1888\n        }, true);                                                                                                      // 1889\n                                                                                                                       // 1890\n        return list.unique(nodes);                                                                                     // 1891\n      };                                                                                                               // 1892\n                                                                                                                       // 1893\n      /**                                                                                                              // 1894\n       * returns commonAncestor of range                                                                               // 1895\n       * @return {Element} - commonAncestor                                                                            // 1896\n       */                                                                                                              // 1897\n      this.commonAncestor = function () {                                                                              // 1898\n        return dom.commonAncestor(sc, ec);                                                                             // 1899\n      };                                                                                                               // 1900\n                                                                                                                       // 1901\n      /**                                                                                                              // 1902\n       * returns expanded range by pred                                                                                // 1903\n       *                                                                                                               // 1904\n       * @param {Function} pred - predicate function                                                                   // 1905\n       * @return {WrappedRange}                                                                                        // 1906\n       */                                                                                                              // 1907\n      this.expand = function (pred) {                                                                                  // 1908\n        var startAncestor = dom.ancestor(sc, pred);                                                                    // 1909\n        var endAncestor = dom.ancestor(ec, pred);                                                                      // 1910\n                                                                                                                       // 1911\n        if (!startAncestor && !endAncestor) {                                                                          // 1912\n          return new WrappedRange(sc, so, ec, eo);                                                                     // 1913\n        }                                                                                                              // 1914\n                                                                                                                       // 1915\n        var boundaryPoints = this.getPoints();                                                                         // 1916\n                                                                                                                       // 1917\n        if (startAncestor) {                                                                                           // 1918\n          boundaryPoints.sc = startAncestor;                                                                           // 1919\n          boundaryPoints.so = 0;                                                                                       // 1920\n        }                                                                                                              // 1921\n                                                                                                                       // 1922\n        if (endAncestor) {                                                                                             // 1923\n          boundaryPoints.ec = endAncestor;                                                                             // 1924\n          boundaryPoints.eo = dom.nodeLength(endAncestor);                                                             // 1925\n        }                                                                                                              // 1926\n                                                                                                                       // 1927\n        return new WrappedRange(                                                                                       // 1928\n          boundaryPoints.sc,                                                                                           // 1929\n          boundaryPoints.so,                                                                                           // 1930\n          boundaryPoints.ec,                                                                                           // 1931\n          boundaryPoints.eo                                                                                            // 1932\n        );                                                                                                             // 1933\n      };                                                                                                               // 1934\n                                                                                                                       // 1935\n      /**                                                                                                              // 1936\n       * @param {Boolean} isCollapseToStart                                                                            // 1937\n       * @return {WrappedRange}                                                                                        // 1938\n       */                                                                                                              // 1939\n      this.collapse = function (isCollapseToStart) {                                                                   // 1940\n        if (isCollapseToStart) {                                                                                       // 1941\n          return new WrappedRange(sc, so, sc, so);                                                                     // 1942\n        } else {                                                                                                       // 1943\n          return new WrappedRange(ec, eo, ec, eo);                                                                     // 1944\n        }                                                                                                              // 1945\n      };                                                                                                               // 1946\n                                                                                                                       // 1947\n      /**                                                                                                              // 1948\n       * splitText on range                                                                                            // 1949\n       */                                                                                                              // 1950\n      this.splitText = function () {                                                                                   // 1951\n        var isSameContainer = sc === ec;                                                                               // 1952\n        var boundaryPoints = this.getPoints();                                                                         // 1953\n                                                                                                                       // 1954\n        if (dom.isText(ec) && !dom.isEdgePoint(this.getEndPoint())) {                                                  // 1955\n          ec.splitText(eo);                                                                                            // 1956\n        }                                                                                                              // 1957\n                                                                                                                       // 1958\n        if (dom.isText(sc) && !dom.isEdgePoint(this.getStartPoint())) {                                                // 1959\n          boundaryPoints.sc = sc.splitText(so);                                                                        // 1960\n          boundaryPoints.so = 0;                                                                                       // 1961\n                                                                                                                       // 1962\n          if (isSameContainer) {                                                                                       // 1963\n            boundaryPoints.ec = boundaryPoints.sc;                                                                     // 1964\n            boundaryPoints.eo = eo - so;                                                                               // 1965\n          }                                                                                                            // 1966\n        }                                                                                                              // 1967\n                                                                                                                       // 1968\n        return new WrappedRange(                                                                                       // 1969\n          boundaryPoints.sc,                                                                                           // 1970\n          boundaryPoints.so,                                                                                           // 1971\n          boundaryPoints.ec,                                                                                           // 1972\n          boundaryPoints.eo                                                                                            // 1973\n        );                                                                                                             // 1974\n      };                                                                                                               // 1975\n                                                                                                                       // 1976\n      /**                                                                                                              // 1977\n       * delete contents on range                                                                                      // 1978\n       * @return {WrappedRange}                                                                                        // 1979\n       */                                                                                                              // 1980\n      this.deleteContents = function () {                                                                              // 1981\n        if (this.isCollapsed()) {                                                                                      // 1982\n          return this;                                                                                                 // 1983\n        }                                                                                                              // 1984\n                                                                                                                       // 1985\n        var rng = this.splitText();                                                                                    // 1986\n        var nodes = rng.nodes(null, {                                                                                  // 1987\n          fullyContains: true                                                                                          // 1988\n        });                                                                                                            // 1989\n                                                                                                                       // 1990\n        // find new cursor point                                                                                       // 1991\n        var point = dom.prevPointUntil(rng.getStartPoint(), function (point) {                                         // 1992\n          return !list.contains(nodes, point.node);                                                                    // 1993\n        });                                                                                                            // 1994\n                                                                                                                       // 1995\n        var emptyParents = [];                                                                                         // 1996\n        $.each(nodes, function (idx, node) {                                                                           // 1997\n          // find empty parents                                                                                        // 1998\n          var parent = node.parentNode;                                                                                // 1999\n          if (point.node !== parent && dom.nodeLength(parent) === 1) {                                                 // 2000\n            emptyParents.push(parent);                                                                                 // 2001\n          }                                                                                                            // 2002\n          dom.remove(node, false);                                                                                     // 2003\n        });                                                                                                            // 2004\n                                                                                                                       // 2005\n        // remove empty parents                                                                                        // 2006\n        $.each(emptyParents, function (idx, node) {                                                                    // 2007\n          dom.remove(node, false);                                                                                     // 2008\n        });                                                                                                            // 2009\n                                                                                                                       // 2010\n        return new WrappedRange(                                                                                       // 2011\n          point.node,                                                                                                  // 2012\n          point.offset,                                                                                                // 2013\n          point.node,                                                                                                  // 2014\n          point.offset                                                                                                 // 2015\n        ).normalize();                                                                                                 // 2016\n      };                                                                                                               // 2017\n                                                                                                                       // 2018\n      /**                                                                                                              // 2019\n       * makeIsOn: return isOn(pred) function                                                                          // 2020\n       */                                                                                                              // 2021\n      var makeIsOn = function (pred) {                                                                                 // 2022\n        return function () {                                                                                           // 2023\n          var ancestor = dom.ancestor(sc, pred);                                                                       // 2024\n          return !!ancestor && (ancestor === dom.ancestor(ec, pred));                                                  // 2025\n        };                                                                                                             // 2026\n      };                                                                                                               // 2027\n                                                                                                                       // 2028\n      // isOnEditable: judge whether range is on editable or not                                                       // 2029\n      this.isOnEditable = makeIsOn(dom.isEditable);                                                                    // 2030\n      // isOnList: judge whether range is on list node or not                                                          // 2031\n      this.isOnList = makeIsOn(dom.isList);                                                                            // 2032\n      // isOnAnchor: judge whether range is on anchor node or not                                                      // 2033\n      this.isOnAnchor = makeIsOn(dom.isAnchor);                                                                        // 2034\n      // isOnAnchor: judge whether range is on cell node or not                                                        // 2035\n      this.isOnCell = makeIsOn(dom.isCell);                                                                            // 2036\n                                                                                                                       // 2037\n      /**                                                                                                              // 2038\n       * @param {Function} pred                                                                                        // 2039\n       * @return {Boolean}                                                                                             // 2040\n       */                                                                                                              // 2041\n      this.isLeftEdgeOf = function (pred) {                                                                            // 2042\n        if (!dom.isLeftEdgePoint(this.getStartPoint())) {                                                              // 2043\n          return false;                                                                                                // 2044\n        }                                                                                                              // 2045\n                                                                                                                       // 2046\n        var node = dom.ancestor(this.sc, pred);                                                                        // 2047\n        return node && dom.isLeftEdgeOf(this.sc, node);                                                                // 2048\n      };                                                                                                               // 2049\n                                                                                                                       // 2050\n      /**                                                                                                              // 2051\n       * returns whether range was collapsed or not                                                                    // 2052\n       */                                                                                                              // 2053\n      this.isCollapsed = function () {                                                                                 // 2054\n        return sc === ec && so === eo;                                                                                 // 2055\n      };                                                                                                               // 2056\n                                                                                                                       // 2057\n      /**                                                                                                              // 2058\n       * wrap inline nodes which children of body with paragraph                                                       // 2059\n       *                                                                                                               // 2060\n       * @return {WrappedRange}                                                                                        // 2061\n       */                                                                                                              // 2062\n      this.wrapBodyInlineWithPara = function () {                                                                      // 2063\n        if (dom.isBodyContainer(sc) && dom.isEmpty(sc)) {                                                              // 2064\n          sc.innerHTML = dom.emptyPara;                                                                                // 2065\n          return new WrappedRange(sc.firstChild, 0, sc.firstChild, 0);                                                 // 2066\n        }                                                                                                              // 2067\n                                                                                                                       // 2068\n        /**                                                                                                            // 2069\n         * [workaround] firefox often create range on not visible point. so normalize here.                            // 2070\n         *  - firefox: |<p>text</p>|                                                                                   // 2071\n         *  - chrome: <p>|text|</p>                                                                                    // 2072\n         */                                                                                                            // 2073\n        var rng = this.normalize();                                                                                    // 2074\n        if (dom.isParaInline(sc) || dom.isPara(sc)) {                                                                  // 2075\n          return rng;                                                                                                  // 2076\n        }                                                                                                              // 2077\n                                                                                                                       // 2078\n        // find inline top ancestor                                                                                    // 2079\n        var topAncestor;                                                                                               // 2080\n        if (dom.isInline(rng.sc)) {                                                                                    // 2081\n          var ancestors = dom.listAncestor(rng.sc, func.not(dom.isInline));                                            // 2082\n          topAncestor = list.last(ancestors);                                                                          // 2083\n          if (!dom.isInline(topAncestor)) {                                                                            // 2084\n            topAncestor = ancestors[ancestors.length - 2] || rng.sc.childNodes[rng.so];                                // 2085\n          }                                                                                                            // 2086\n        } else {                                                                                                       // 2087\n          topAncestor = rng.sc.childNodes[rng.so > 0 ? rng.so - 1 : 0];                                                // 2088\n        }                                                                                                              // 2089\n                                                                                                                       // 2090\n        // siblings not in paragraph                                                                                   // 2091\n        var inlineSiblings = dom.listPrev(topAncestor, dom.isParaInline).reverse();                                    // 2092\n        inlineSiblings = inlineSiblings.concat(dom.listNext(topAncestor.nextSibling, dom.isParaInline));               // 2093\n                                                                                                                       // 2094\n        // wrap with paragraph                                                                                         // 2095\n        if (inlineSiblings.length) {                                                                                   // 2096\n          var para = dom.wrap(list.head(inlineSiblings), 'p');                                                         // 2097\n          dom.appendChildNodes(para, list.tail(inlineSiblings));                                                       // 2098\n        }                                                                                                              // 2099\n                                                                                                                       // 2100\n        return this.normalize();                                                                                       // 2101\n      };                                                                                                               // 2102\n                                                                                                                       // 2103\n      /**                                                                                                              // 2104\n       * insert node at current cursor                                                                                 // 2105\n       *                                                                                                               // 2106\n       * @param {Node} node                                                                                            // 2107\n       * @return {Node}                                                                                                // 2108\n       */                                                                                                              // 2109\n      this.insertNode = function (node) {                                                                              // 2110\n        var rng = this.wrapBodyInlineWithPara().deleteContents();                                                      // 2111\n        var info = dom.splitPoint(rng.getStartPoint(), dom.isInline(node));                                            // 2112\n                                                                                                                       // 2113\n        if (info.rightNode) {                                                                                          // 2114\n          info.rightNode.parentNode.insertBefore(node, info.rightNode);                                                // 2115\n        } else {                                                                                                       // 2116\n          info.container.appendChild(node);                                                                            // 2117\n        }                                                                                                              // 2118\n                                                                                                                       // 2119\n        return node;                                                                                                   // 2120\n      };                                                                                                               // 2121\n                                                                                                                       // 2122\n      /**                                                                                                              // 2123\n       * insert html at current cursor                                                                                 // 2124\n       */                                                                                                              // 2125\n      this.pasteHTML = function (markup) {                                                                             // 2126\n        var contentsContainer = $('<div></div>').html(markup)[0];                                                      // 2127\n        var childNodes = list.from(contentsContainer.childNodes);                                                      // 2128\n                                                                                                                       // 2129\n        var rng = this.wrapBodyInlineWithPara().deleteContents();                                                      // 2130\n                                                                                                                       // 2131\n        return childNodes.reverse().map(function (childNode) {                                                         // 2132\n          return rng.insertNode(childNode);                                                                            // 2133\n        }).reverse();                                                                                                  // 2134\n      };                                                                                                               // 2135\n                                                                                                                       // 2136\n      /**                                                                                                              // 2137\n       * returns text in range                                                                                         // 2138\n       *                                                                                                               // 2139\n       * @return {String}                                                                                              // 2140\n       */                                                                                                              // 2141\n      this.toString = function () {                                                                                    // 2142\n        var nativeRng = nativeRange();                                                                                 // 2143\n        return agent.isW3CRangeSupport ? nativeRng.toString() : nativeRng.text;                                        // 2144\n      };                                                                                                               // 2145\n                                                                                                                       // 2146\n      /**                                                                                                              // 2147\n       * returns range for word before cursor                                                                          // 2148\n       *                                                                                                               // 2149\n       * @param {Boolean} [findAfter] - find after cursor, default: false                                              // 2150\n       * @return {WrappedRange}                                                                                        // 2151\n       */                                                                                                              // 2152\n      this.getWordRange = function (findAfter) {                                                                       // 2153\n        var endPoint = this.getEndPoint();                                                                             // 2154\n                                                                                                                       // 2155\n        if (!dom.isCharPoint(endPoint)) {                                                                              // 2156\n          return this;                                                                                                 // 2157\n        }                                                                                                              // 2158\n                                                                                                                       // 2159\n        var startPoint = dom.prevPointUntil(endPoint, function (point) {                                               // 2160\n          return !dom.isCharPoint(point);                                                                              // 2161\n        });                                                                                                            // 2162\n                                                                                                                       // 2163\n        if (findAfter) {                                                                                               // 2164\n          endPoint = dom.nextPointUntil(endPoint, function (point) {                                                   // 2165\n            return !dom.isCharPoint(point);                                                                            // 2166\n          });                                                                                                          // 2167\n        }                                                                                                              // 2168\n                                                                                                                       // 2169\n        return new WrappedRange(                                                                                       // 2170\n          startPoint.node,                                                                                             // 2171\n          startPoint.offset,                                                                                           // 2172\n          endPoint.node,                                                                                               // 2173\n          endPoint.offset                                                                                              // 2174\n        );                                                                                                             // 2175\n      };                                                                                                               // 2176\n                                                                                                                       // 2177\n      /**                                                                                                              // 2178\n       * create offsetPath bookmark                                                                                    // 2179\n       *                                                                                                               // 2180\n       * @param {Node} editable                                                                                        // 2181\n       */                                                                                                              // 2182\n      this.bookmark = function (editable) {                                                                            // 2183\n        return {                                                                                                       // 2184\n          s: {                                                                                                         // 2185\n            path: dom.makeOffsetPath(editable, sc),                                                                    // 2186\n            offset: so                                                                                                 // 2187\n          },                                                                                                           // 2188\n          e: {                                                                                                         // 2189\n            path: dom.makeOffsetPath(editable, ec),                                                                    // 2190\n            offset: eo                                                                                                 // 2191\n          }                                                                                                            // 2192\n        };                                                                                                             // 2193\n      };                                                                                                               // 2194\n                                                                                                                       // 2195\n      /**                                                                                                              // 2196\n       * create offsetPath bookmark base on paragraph                                                                  // 2197\n       *                                                                                                               // 2198\n       * @param {Node[]} paras                                                                                         // 2199\n       */                                                                                                              // 2200\n      this.paraBookmark = function (paras) {                                                                           // 2201\n        return {                                                                                                       // 2202\n          s: {                                                                                                         // 2203\n            path: list.tail(dom.makeOffsetPath(list.head(paras), sc)),                                                 // 2204\n            offset: so                                                                                                 // 2205\n          },                                                                                                           // 2206\n          e: {                                                                                                         // 2207\n            path: list.tail(dom.makeOffsetPath(list.last(paras), ec)),                                                 // 2208\n            offset: eo                                                                                                 // 2209\n          }                                                                                                            // 2210\n        };                                                                                                             // 2211\n      };                                                                                                               // 2212\n                                                                                                                       // 2213\n      /**                                                                                                              // 2214\n       * getClientRects                                                                                                // 2215\n       * @return {Rect[]}                                                                                              // 2216\n       */                                                                                                              // 2217\n      this.getClientRects = function () {                                                                              // 2218\n        var nativeRng = nativeRange();                                                                                 // 2219\n        return nativeRng.getClientRects();                                                                             // 2220\n      };                                                                                                               // 2221\n    };                                                                                                                 // 2222\n                                                                                                                       // 2223\n  /**                                                                                                                  // 2224\n   * @class core.range                                                                                                 // 2225\n   *                                                                                                                   // 2226\n   * Data structure                                                                                                    // 2227\n   *  * BoundaryPoint: a point of dom tree                                                                             // 2228\n   *  * BoundaryPoints: two boundaryPoints corresponding to the start and the end of the Range                         // 2229\n   *                                                                                                                   // 2230\n   * See to http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Position                        // 2231\n   *                                                                                                                   // 2232\n   * @singleton                                                                                                        // 2233\n   * @alternateClassName range                                                                                         // 2234\n   */                                                                                                                  // 2235\n    return {                                                                                                           // 2236\n      /**                                                                                                              // 2237\n       * @method                                                                                                       // 2238\n       *                                                                                                               // 2239\n       * create Range Object From arguments or Browser Selection                                                       // 2240\n       *                                                                                                               // 2241\n       * @param {Node} sc - start container                                                                            // 2242\n       * @param {Number} so - start offset                                                                             // 2243\n       * @param {Node} ec - end container                                                                              // 2244\n       * @param {Number} eo - end offset                                                                               // 2245\n       * @return {WrappedRange}                                                                                        // 2246\n       */                                                                                                              // 2247\n      create : function (sc, so, ec, eo) {                                                                             // 2248\n        if (!arguments.length) { // from Browser Selection                                                             // 2249\n          if (agent.isW3CRangeSupport) {                                                                               // 2250\n            var selection = document.getSelection();                                                                   // 2251\n            if (!selection || selection.rangeCount === 0) {                                                            // 2252\n              return null;                                                                                             // 2253\n            } else if (dom.isBody(selection.anchorNode)) {                                                             // 2254\n              // Firefox: returns entire body as range on initialization. We won't never need it.                      // 2255\n              return null;                                                                                             // 2256\n            }                                                                                                          // 2257\n                                                                                                                       // 2258\n            var nativeRng = selection.getRangeAt(0);                                                                   // 2259\n            sc = nativeRng.startContainer;                                                                             // 2260\n            so = nativeRng.startOffset;                                                                                // 2261\n            ec = nativeRng.endContainer;                                                                               // 2262\n            eo = nativeRng.endOffset;                                                                                  // 2263\n          } else { // IE8: TextRange                                                                                   // 2264\n            var textRange = document.selection.createRange();                                                          // 2265\n            var textRangeEnd = textRange.duplicate();                                                                  // 2266\n            textRangeEnd.collapse(false);                                                                              // 2267\n            var textRangeStart = textRange;                                                                            // 2268\n            textRangeStart.collapse(true);                                                                             // 2269\n                                                                                                                       // 2270\n            var startPoint = textRangeToPoint(textRangeStart, true),                                                   // 2271\n            endPoint = textRangeToPoint(textRangeEnd, false);                                                          // 2272\n                                                                                                                       // 2273\n            // same visible point case: range was collapsed.                                                           // 2274\n            if (dom.isText(startPoint.node) && dom.isLeftEdgePoint(startPoint) &&                                      // 2275\n                dom.isTextNode(endPoint.node) && dom.isRightEdgePoint(endPoint) &&                                     // 2276\n                endPoint.node.nextSibling === startPoint.node) {                                                       // 2277\n              startPoint = endPoint;                                                                                   // 2278\n            }                                                                                                          // 2279\n                                                                                                                       // 2280\n            sc = startPoint.cont;                                                                                      // 2281\n            so = startPoint.offset;                                                                                    // 2282\n            ec = endPoint.cont;                                                                                        // 2283\n            eo = endPoint.offset;                                                                                      // 2284\n          }                                                                                                            // 2285\n        } else if (arguments.length === 2) { //collapsed                                                               // 2286\n          ec = sc;                                                                                                     // 2287\n          eo = so;                                                                                                     // 2288\n        }                                                                                                              // 2289\n        return new WrappedRange(sc, so, ec, eo);                                                                       // 2290\n      },                                                                                                               // 2291\n                                                                                                                       // 2292\n      /**                                                                                                              // 2293\n       * @method                                                                                                       // 2294\n       *                                                                                                               // 2295\n       * create WrappedRange from node                                                                                 // 2296\n       *                                                                                                               // 2297\n       * @param {Node} node                                                                                            // 2298\n       * @return {WrappedRange}                                                                                        // 2299\n       */                                                                                                              // 2300\n      createFromNode: function (node) {                                                                                // 2301\n        var sc = node;                                                                                                 // 2302\n        var so = 0;                                                                                                    // 2303\n        var ec = node;                                                                                                 // 2304\n        var eo = dom.nodeLength(ec);                                                                                   // 2305\n                                                                                                                       // 2306\n        // browsers can't target a picture or void node                                                                // 2307\n        if (dom.isVoid(sc)) {                                                                                          // 2308\n          so = dom.listPrev(sc).length - 1;                                                                            // 2309\n          sc = sc.parentNode;                                                                                          // 2310\n        }                                                                                                              // 2311\n        if (dom.isBR(ec)) {                                                                                            // 2312\n          eo = dom.listPrev(ec).length - 1;                                                                            // 2313\n          ec = ec.parentNode;                                                                                          // 2314\n        } else if (dom.isVoid(ec)) {                                                                                   // 2315\n          eo = dom.listPrev(ec).length;                                                                                // 2316\n          ec = ec.parentNode;                                                                                          // 2317\n        }                                                                                                              // 2318\n                                                                                                                       // 2319\n        return this.create(sc, so, ec, eo);                                                                            // 2320\n      },                                                                                                               // 2321\n                                                                                                                       // 2322\n      /**                                                                                                              // 2323\n       * create WrappedRange from node after position                                                                  // 2324\n       *                                                                                                               // 2325\n       * @param {Node} node                                                                                            // 2326\n       * @return {WrappedRange}                                                                                        // 2327\n       */                                                                                                              // 2328\n      createFromNodeBefore: function (node) {                                                                          // 2329\n        return this.createFromNode(node).collapse(true);                                                               // 2330\n      },                                                                                                               // 2331\n                                                                                                                       // 2332\n      /**                                                                                                              // 2333\n       * create WrappedRange from node after position                                                                  // 2334\n       *                                                                                                               // 2335\n       * @param {Node} node                                                                                            // 2336\n       * @return {WrappedRange}                                                                                        // 2337\n       */                                                                                                              // 2338\n      createFromNodeAfter: function (node) {                                                                           // 2339\n        return this.createFromNode(node).collapse();                                                                   // 2340\n      },                                                                                                               // 2341\n                                                                                                                       // 2342\n      /**                                                                                                              // 2343\n       * @method                                                                                                       // 2344\n       *                                                                                                               // 2345\n       * create WrappedRange from bookmark                                                                             // 2346\n       *                                                                                                               // 2347\n       * @param {Node} editable                                                                                        // 2348\n       * @param {Object} bookmark                                                                                      // 2349\n       * @return {WrappedRange}                                                                                        // 2350\n       */                                                                                                              // 2351\n      createFromBookmark : function (editable, bookmark) {                                                             // 2352\n        var sc = dom.fromOffsetPath(editable, bookmark.s.path);                                                        // 2353\n        var so = bookmark.s.offset;                                                                                    // 2354\n        var ec = dom.fromOffsetPath(editable, bookmark.e.path);                                                        // 2355\n        var eo = bookmark.e.offset;                                                                                    // 2356\n        return new WrappedRange(sc, so, ec, eo);                                                                       // 2357\n      },                                                                                                               // 2358\n                                                                                                                       // 2359\n      /**                                                                                                              // 2360\n       * @method                                                                                                       // 2361\n       *                                                                                                               // 2362\n       * create WrappedRange from paraBookmark                                                                         // 2363\n       *                                                                                                               // 2364\n       * @param {Object} bookmark                                                                                      // 2365\n       * @param {Node[]} paras                                                                                         // 2366\n       * @return {WrappedRange}                                                                                        // 2367\n       */                                                                                                              // 2368\n      createFromParaBookmark: function (bookmark, paras) {                                                             // 2369\n        var so = bookmark.s.offset;                                                                                    // 2370\n        var eo = bookmark.e.offset;                                                                                    // 2371\n        var sc = dom.fromOffsetPath(list.head(paras), bookmark.s.path);                                                // 2372\n        var ec = dom.fromOffsetPath(list.last(paras), bookmark.e.path);                                                // 2373\n                                                                                                                       // 2374\n        return new WrappedRange(sc, so, ec, eo);                                                                       // 2375\n      }                                                                                                                // 2376\n    };                                                                                                                 // 2377\n  })();                                                                                                                // 2378\n                                                                                                                       // 2379\n  /**                                                                                                                  // 2380\n   * @class defaults                                                                                                   // 2381\n   *                                                                                                                   // 2382\n   * @singleton                                                                                                        // 2383\n   */                                                                                                                  // 2384\n  var defaults = {                                                                                                     // 2385\n    /** @property */                                                                                                   // 2386\n    version: '0.6.16',                                                                                                 // 2387\n                                                                                                                       // 2388\n    /**                                                                                                                // 2389\n     *                                                                                                                 // 2390\n     * for event options, reference to EventHandler.attach                                                             // 2391\n     *                                                                                                                 // 2392\n     * @property {Object} options                                                                                      // 2393\n     * @property {String/Number} [options.width=null] set editor width                                                 // 2394\n     * @property {String/Number} [options.height=null] set editor height, ex) 300                                      // 2395\n     * @property {String/Number} options.minHeight set minimum height of editor                                        // 2396\n     * @property {String/Number} options.maxHeight                                                                     // 2397\n     * @property {String/Number} options.focus                                                                         // 2398\n     * @property {Number} options.tabsize                                                                              // 2399\n     * @property {Boolean} options.styleWithSpan                                                                       // 2400\n     * @property {Object} options.codemirror                                                                           // 2401\n     * @property {Object} [options.codemirror.mode='text/html']                                                        // 2402\n     * @property {Object} [options.codemirror.htmlMode=true]                                                           // 2403\n     * @property {Object} [options.codemirror.lineNumbers=true]                                                        // 2404\n     * @property {String} [options.lang=en-US] language 'en-US', 'ko-KR', ...                                          // 2405\n     * @property {String} [options.direction=null] text direction, ex) 'rtl'                                           // 2406\n     * @property {Array} [options.toolbar]                                                                             // 2407\n     * @property {Boolean} [options.airMode=false]                                                                     // 2408\n     * @property {Array} [options.airPopover]                                                                          // 2409\n     * @property {Fucntion} [options.onInit] initialize                                                                // 2410\n     * @property {Fucntion} [options.onsubmit]                                                                         // 2411\n     */                                                                                                                // 2412\n    options: {                                                                                                         // 2413\n      width: null,                  // set editor width                                                                // 2414\n      height: null,                 // set editor height, ex) 300                                                      // 2415\n                                                                                                                       // 2416\n      minHeight: null,              // set minimum height of editor                                                    // 2417\n      maxHeight: null,              // set maximum height of editor                                                    // 2418\n                                                                                                                       // 2419\n      focus: false,                 // set focus to editable area after initializing summernote                        // 2420\n                                                                                                                       // 2421\n      tabsize: 4,                   // size of tab ex) 2 or 4                                                          // 2422\n      styleWithSpan: true,          // style with span (Chrome and FF only)                                            // 2423\n                                                                                                                       // 2424\n      disableLinkTarget: false,     // hide link Target Checkbox                                                       // 2425\n      disableDragAndDrop: false,    // disable drag and drop event                                                     // 2426\n      disableResizeEditor: false,   // disable resizing editor                                                         // 2427\n      disableResizeImage: false,    // disable resizing image                                                          // 2428\n                                                                                                                       // 2429\n      shortcuts: true,              // enable keyboard shortcuts                                                       // 2430\n                                                                                                                       // 2431\n      textareaAutoSync: true,       // enable textarea auto sync                                                       // 2432\n                                                                                                                       // 2433\n      placeholder: false,           // enable placeholder text                                                         // 2434\n      prettifyHtml: true,           // enable prettifying html while toggling codeview                                 // 2435\n                                                                                                                       // 2436\n      iconPrefix: 'fa fa-',         // prefix for css icon classes                                                     // 2437\n                                                                                                                       // 2438\n      icons: {                                                                                                         // 2439\n        font: {                                                                                                        // 2440\n          bold: 'bold',                                                                                                // 2441\n          italic: 'italic',                                                                                            // 2442\n          underline: 'underline',                                                                                      // 2443\n          clear: 'eraser',                                                                                             // 2444\n          height: 'text-height',                                                                                       // 2445\n          strikethrough: 'strikethrough',                                                                              // 2446\n          superscript: 'superscript',                                                                                  // 2447\n          subscript: 'subscript'                                                                                       // 2448\n        },                                                                                                             // 2449\n        image: {                                                                                                       // 2450\n          image: 'picture-o',                                                                                          // 2451\n          floatLeft: 'align-left',                                                                                     // 2452\n          floatRight: 'align-right',                                                                                   // 2453\n          floatNone: 'align-justify',                                                                                  // 2454\n          shapeRounded: 'square',                                                                                      // 2455\n          shapeCircle: 'circle-o',                                                                                     // 2456\n          shapeThumbnail: 'picture-o',                                                                                 // 2457\n          shapeNone: 'times',                                                                                          // 2458\n          remove: 'trash-o'                                                                                            // 2459\n        },                                                                                                             // 2460\n        link: {                                                                                                        // 2461\n          link: 'link',                                                                                                // 2462\n          unlink: 'unlink',                                                                                            // 2463\n          edit: 'edit'                                                                                                 // 2464\n        },                                                                                                             // 2465\n        table: {                                                                                                       // 2466\n          table: 'table'                                                                                               // 2467\n        },                                                                                                             // 2468\n        hr: {                                                                                                          // 2469\n          insert: 'minus'                                                                                              // 2470\n        },                                                                                                             // 2471\n        style: {                                                                                                       // 2472\n          style: 'magic'                                                                                               // 2473\n        },                                                                                                             // 2474\n        lists: {                                                                                                       // 2475\n          unordered: 'list-ul',                                                                                        // 2476\n          ordered: 'list-ol'                                                                                           // 2477\n        },                                                                                                             // 2478\n        options: {                                                                                                     // 2479\n          help: 'question',                                                                                            // 2480\n          fullscreen: 'arrows-alt',                                                                                    // 2481\n          codeview: 'code'                                                                                             // 2482\n        },                                                                                                             // 2483\n        paragraph: {                                                                                                   // 2484\n          paragraph: 'align-left',                                                                                     // 2485\n          outdent: 'outdent',                                                                                          // 2486\n          indent: 'indent',                                                                                            // 2487\n          left: 'align-left',                                                                                          // 2488\n          center: 'align-center',                                                                                      // 2489\n          right: 'align-right',                                                                                        // 2490\n          justify: 'align-justify'                                                                                     // 2491\n        },                                                                                                             // 2492\n        color: {                                                                                                       // 2493\n          recent: 'font'                                                                                               // 2494\n        },                                                                                                             // 2495\n        history: {                                                                                                     // 2496\n          undo: 'undo',                                                                                                // 2497\n          redo: 'repeat'                                                                                               // 2498\n        },                                                                                                             // 2499\n        misc: {                                                                                                        // 2500\n          check: 'check'                                                                                               // 2501\n        }                                                                                                              // 2502\n      },                                                                                                               // 2503\n                                                                                                                       // 2504\n      dialogsInBody: false,          // false will add dialogs into editor                                             // 2505\n                                                                                                                       // 2506\n      codemirror: {                 // codemirror options                                                              // 2507\n        mode: 'text/html',                                                                                             // 2508\n        htmlMode: true,                                                                                                // 2509\n        lineNumbers: true                                                                                              // 2510\n      },                                                                                                               // 2511\n                                                                                                                       // 2512\n      // language                                                                                                      // 2513\n      lang: 'en-US',                // language 'en-US', 'ko-KR', ...                                                  // 2514\n      direction: null,              // text direction, ex) 'rtl'                                                       // 2515\n                                                                                                                       // 2516\n      // toolbar                                                                                                       // 2517\n      toolbar: [                                                                                                       // 2518\n        ['style', ['style']],                                                                                          // 2519\n        ['font', ['bold', 'italic', 'underline', 'clear']],                                                            // 2520\n        // ['font', ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'clear']],            // 2521\n        ['fontname', ['fontname']],                                                                                    // 2522\n        ['fontsize', ['fontsize']],                                                                                    // 2523\n        ['color', ['color']],                                                                                          // 2524\n        ['para', ['ul', 'ol', 'paragraph']],                                                                           // 2525\n        ['height', ['height']],                                                                                        // 2526\n        ['table', ['table']],                                                                                          // 2527\n        ['insert', ['link', 'picture', 'hr']],                                                                         // 2528\n        ['view', ['fullscreen', 'codeview']],                                                                          // 2529\n        ['help', ['help']]                                                                                             // 2530\n      ],                                                                                                               // 2531\n                                                                                                                       // 2532\n      plugin : { },                                                                                                    // 2533\n                                                                                                                       // 2534\n      // air mode: inline editor                                                                                       // 2535\n      airMode: false,                                                                                                  // 2536\n      // airPopover: [                                                                                                 // 2537\n      //   ['style', ['style']],                                                                                       // 2538\n      //   ['font', ['bold', 'italic', 'underline', 'clear']],                                                         // 2539\n      //   ['fontname', ['fontname']],                                                                                 // 2540\n      //   ['color', ['color']],                                                                                       // 2541\n      //   ['para', ['ul', 'ol', 'paragraph']],                                                                        // 2542\n      //   ['height', ['height']],                                                                                     // 2543\n      //   ['table', ['table']],                                                                                       // 2544\n      //   ['insert', ['link', 'picture']],                                                                            // 2545\n      //   ['help', ['help']]                                                                                          // 2546\n      // ],                                                                                                            // 2547\n      airPopover: [                                                                                                    // 2548\n        ['color', ['color']],                                                                                          // 2549\n        ['font', ['bold', 'underline', 'clear']],                                                                      // 2550\n        ['para', ['ul', 'paragraph']],                                                                                 // 2551\n        ['table', ['table']],                                                                                          // 2552\n        ['insert', ['link', 'picture']]                                                                                // 2553\n      ],                                                                                                               // 2554\n                                                                                                                       // 2555\n      // style tag                                                                                                     // 2556\n      styleTags: ['p', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],                                       // 2557\n                                                                                                                       // 2558\n      // default fontName                                                                                              // 2559\n      defaultFontName: 'Helvetica Neue',                                                                               // 2560\n                                                                                                                       // 2561\n      // fontName                                                                                                      // 2562\n      fontNames: [                                                                                                     // 2563\n        'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New',                                                        // 2564\n        'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande',                                                      // 2565\n        'Tahoma', 'Times New Roman', 'Verdana'                                                                         // 2566\n      ],                                                                                                               // 2567\n      fontNamesIgnoreCheck: [],                                                                                        // 2568\n                                                                                                                       // 2569\n      fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36'],                                                 // 2570\n                                                                                                                       // 2571\n      // pallete colors(n x n)                                                                                         // 2572\n      colors: [                                                                                                        // 2573\n        ['#000000', '#424242', '#636363', '#9C9C94', '#CEC6CE', '#EFEFEF', '#F7F7F7', '#FFFFFF'],                      // 2574\n        ['#FF0000', '#FF9C00', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#9C00FF', '#FF00FF'],                      // 2575\n        ['#F7C6CE', '#FFE7CE', '#FFEFC6', '#D6EFD6', '#CEDEE7', '#CEE7F7', '#D6D6E7', '#E7D6DE'],                      // 2576\n        ['#E79C9C', '#FFC69C', '#FFE79C', '#B5D6A5', '#A5C6CE', '#9CC6EF', '#B5A5D6', '#D6A5BD'],                      // 2577\n        ['#E76363', '#F7AD6B', '#FFD663', '#94BD7B', '#73A5AD', '#6BADDE', '#8C7BC6', '#C67BA5'],                      // 2578\n        ['#CE0000', '#E79439', '#EFC631', '#6BA54A', '#4A7B8C', '#3984C6', '#634AA5', '#A54A7B'],                      // 2579\n        ['#9C0000', '#B56308', '#BD9400', '#397B21', '#104A5A', '#085294', '#311873', '#731842'],                      // 2580\n        ['#630000', '#7B3900', '#846300', '#295218', '#083139', '#003163', '#21104A', '#4A1031']                       // 2581\n      ],                                                                                                               // 2582\n                                                                                                                       // 2583\n      // lineHeight                                                                                                    // 2584\n      lineHeights: ['1.0', '1.2', '1.4', '1.5', '1.6', '1.8', '2.0', '3.0'],                                           // 2585\n                                                                                                                       // 2586\n      // insertTable max size                                                                                          // 2587\n      insertTableMaxSize: {                                                                                            // 2588\n        col: 10,                                                                                                       // 2589\n        row: 10                                                                                                        // 2590\n      },                                                                                                               // 2591\n                                                                                                                       // 2592\n      // image                                                                                                         // 2593\n      maximumImageFileSize: null, // size in bytes, null = no limit                                                    // 2594\n                                                                                                                       // 2595\n      // callbacks                                                                                                     // 2596\n      oninit: null,             // initialize                                                                          // 2597\n      onfocus: null,            // editable has focus                                                                  // 2598\n      onblur: null,             // editable out of focus                                                               // 2599\n      onenter: null,            // enter key pressed                                                                   // 2600\n      onkeyup: null,            // keyup                                                                               // 2601\n      onkeydown: null,          // keydown                                                                             // 2602\n      onImageUpload: null,      // imageUpload                                                                         // 2603\n      onImageUploadError: null, // imageUploadError                                                                    // 2604\n      onMediaDelete: null,      // media delete                                                                        // 2605\n      onToolbarClick: null,                                                                                            // 2606\n      onsubmit: null,                                                                                                  // 2607\n                                                                                                                       // 2608\n      /**                                                                                                              // 2609\n       * manipulate link address when user create link                                                                 // 2610\n       * @param {String} sLinkUrl                                                                                      // 2611\n       * @return {String}                                                                                              // 2612\n       */                                                                                                              // 2613\n      onCreateLink: function (sLinkUrl) {                                                                              // 2614\n        if (sLinkUrl.indexOf('@') !== -1 && sLinkUrl.indexOf(':') === -1) {                                            // 2615\n          sLinkUrl =  'mailto:' + sLinkUrl;                                                                            // 2616\n        }                                                                                                              // 2617\n                                                                                                                       // 2618\n        return sLinkUrl;                                                                                               // 2619\n      },                                                                                                               // 2620\n                                                                                                                       // 2621\n      keyMap: {                                                                                                        // 2622\n        pc: {                                                                                                          // 2623\n          'ENTER': 'insertParagraph',                                                                                  // 2624\n          'CTRL+Z': 'undo',                                                                                            // 2625\n          'CTRL+Y': 'redo',                                                                                            // 2626\n          'TAB': 'tab',                                                                                                // 2627\n          'SHIFT+TAB': 'untab',                                                                                        // 2628\n          'CTRL+B': 'bold',                                                                                            // 2629\n          'CTRL+I': 'italic',                                                                                          // 2630\n          'CTRL+U': 'underline',                                                                                       // 2631\n          'CTRL+SHIFT+S': 'strikethrough',                                                                             // 2632\n          'CTRL+BACKSLASH': 'removeFormat',                                                                            // 2633\n          'CTRL+SHIFT+L': 'justifyLeft',                                                                               // 2634\n          'CTRL+SHIFT+E': 'justifyCenter',                                                                             // 2635\n          'CTRL+SHIFT+R': 'justifyRight',                                                                              // 2636\n          'CTRL+SHIFT+J': 'justifyFull',                                                                               // 2637\n          'CTRL+SHIFT+NUM7': 'insertUnorderedList',                                                                    // 2638\n          'CTRL+SHIFT+NUM8': 'insertOrderedList',                                                                      // 2639\n          'CTRL+LEFTBRACKET': 'outdent',                                                                               // 2640\n          'CTRL+RIGHTBRACKET': 'indent',                                                                               // 2641\n          'CTRL+NUM0': 'formatPara',                                                                                   // 2642\n          'CTRL+NUM1': 'formatH1',                                                                                     // 2643\n          'CTRL+NUM2': 'formatH2',                                                                                     // 2644\n          'CTRL+NUM3': 'formatH3',                                                                                     // 2645\n          'CTRL+NUM4': 'formatH4',                                                                                     // 2646\n          'CTRL+NUM5': 'formatH5',                                                                                     // 2647\n          'CTRL+NUM6': 'formatH6',                                                                                     // 2648\n          'CTRL+ENTER': 'insertHorizontalRule',                                                                        // 2649\n          'CTRL+K': 'showLinkDialog'                                                                                   // 2650\n        },                                                                                                             // 2651\n                                                                                                                       // 2652\n        mac: {                                                                                                         // 2653\n          'ENTER': 'insertParagraph',                                                                                  // 2654\n          'CMD+Z': 'undo',                                                                                             // 2655\n          'CMD+SHIFT+Z': 'redo',                                                                                       // 2656\n          'TAB': 'tab',                                                                                                // 2657\n          'SHIFT+TAB': 'untab',                                                                                        // 2658\n          'CMD+B': 'bold',                                                                                             // 2659\n          'CMD+I': 'italic',                                                                                           // 2660\n          'CMD+U': 'underline',                                                                                        // 2661\n          'CMD+SHIFT+S': 'strikethrough',                                                                              // 2662\n          'CMD+BACKSLASH': 'removeFormat',                                                                             // 2663\n          'CMD+SHIFT+L': 'justifyLeft',                                                                                // 2664\n          'CMD+SHIFT+E': 'justifyCenter',                                                                              // 2665\n          'CMD+SHIFT+R': 'justifyRight',                                                                               // 2666\n          'CMD+SHIFT+J': 'justifyFull',                                                                                // 2667\n          'CMD+SHIFT+NUM7': 'insertUnorderedList',                                                                     // 2668\n          'CMD+SHIFT+NUM8': 'insertOrderedList',                                                                       // 2669\n          'CMD+LEFTBRACKET': 'outdent',                                                                                // 2670\n          'CMD+RIGHTBRACKET': 'indent',                                                                                // 2671\n          'CMD+NUM0': 'formatPara',                                                                                    // 2672\n          'CMD+NUM1': 'formatH1',                                                                                      // 2673\n          'CMD+NUM2': 'formatH2',                                                                                      // 2674\n          'CMD+NUM3': 'formatH3',                                                                                      // 2675\n          'CMD+NUM4': 'formatH4',                                                                                      // 2676\n          'CMD+NUM5': 'formatH5',                                                                                      // 2677\n          'CMD+NUM6': 'formatH6',                                                                                      // 2678\n          'CMD+ENTER': 'insertHorizontalRule',                                                                         // 2679\n          'CMD+K': 'showLinkDialog'                                                                                    // 2680\n        }                                                                                                              // 2681\n      }                                                                                                                // 2682\n    },                                                                                                                 // 2683\n                                                                                                                       // 2684\n    // default language: en-US                                                                                         // 2685\n    lang: {                                                                                                            // 2686\n      'en-US': {                                                                                                       // 2687\n        font: {                                                                                                        // 2688\n          bold: 'Bold',                                                                                                // 2689\n          italic: 'Italic',                                                                                            // 2690\n          underline: 'Underline',                                                                                      // 2691\n          clear: 'Remove Font Style',                                                                                  // 2692\n          height: 'Line Height',                                                                                       // 2693\n          name: 'Font Family',                                                                                         // 2694\n          strikethrough: 'Strikethrough',                                                                              // 2695\n          subscript: 'Subscript',                                                                                      // 2696\n          superscript: 'Superscript',                                                                                  // 2697\n          size: 'Font Size'                                                                                            // 2698\n        },                                                                                                             // 2699\n        image: {                                                                                                       // 2700\n          image: 'Picture',                                                                                            // 2701\n          insert: 'Insert Image',                                                                                      // 2702\n          resizeFull: 'Resize Full',                                                                                   // 2703\n          resizeHalf: 'Resize Half',                                                                                   // 2704\n          resizeQuarter: 'Resize Quarter',                                                                             // 2705\n          floatLeft: 'Float Left',                                                                                     // 2706\n          floatRight: 'Float Right',                                                                                   // 2707\n          floatNone: 'Float None',                                                                                     // 2708\n          shapeRounded: 'Shape: Rounded',                                                                              // 2709\n          shapeCircle: 'Shape: Circle',                                                                                // 2710\n          shapeThumbnail: 'Shape: Thumbnail',                                                                          // 2711\n          shapeNone: 'Shape: None',                                                                                    // 2712\n          dragImageHere: 'Drag image or text here',                                                                    // 2713\n          dropImage: 'Drop image or Text',                                                                             // 2714\n          selectFromFiles: 'Select from files',                                                                        // 2715\n          maximumFileSize: 'Maximum file size',                                                                        // 2716\n          maximumFileSizeError: 'Maximum file size exceeded.',                                                         // 2717\n          url: 'Image URL',                                                                                            // 2718\n          remove: 'Remove Image'                                                                                       // 2719\n        },                                                                                                             // 2720\n        link: {                                                                                                        // 2721\n          link: 'Link',                                                                                                // 2722\n          insert: 'Insert Link',                                                                                       // 2723\n          unlink: 'Unlink',                                                                                            // 2724\n          edit: 'Edit',                                                                                                // 2725\n          textToDisplay: 'Text to display',                                                                            // 2726\n          url: 'To what URL should this link go?',                                                                     // 2727\n          openInNewWindow: 'Open in new window'                                                                        // 2728\n        },                                                                                                             // 2729\n        table: {                                                                                                       // 2730\n          table: 'Table'                                                                                               // 2731\n        },                                                                                                             // 2732\n        hr: {                                                                                                          // 2733\n          insert: 'Insert Horizontal Rule'                                                                             // 2734\n        },                                                                                                             // 2735\n        style: {                                                                                                       // 2736\n          style: 'Style',                                                                                              // 2737\n          normal: 'Normal',                                                                                            // 2738\n          blockquote: 'Quote',                                                                                         // 2739\n          pre: 'Code',                                                                                                 // 2740\n          h1: 'Header 1',                                                                                              // 2741\n          h2: 'Header 2',                                                                                              // 2742\n          h3: 'Header 3',                                                                                              // 2743\n          h4: 'Header 4',                                                                                              // 2744\n          h5: 'Header 5',                                                                                              // 2745\n          h6: 'Header 6'                                                                                               // 2746\n        },                                                                                                             // 2747\n        lists: {                                                                                                       // 2748\n          unordered: 'Unordered list',                                                                                 // 2749\n          ordered: 'Ordered list'                                                                                      // 2750\n        },                                                                                                             // 2751\n        options: {                                                                                                     // 2752\n          help: 'Help',                                                                                                // 2753\n          fullscreen: 'Full Screen',                                                                                   // 2754\n          codeview: 'Code View'                                                                                        // 2755\n        },                                                                                                             // 2756\n        paragraph: {                                                                                                   // 2757\n          paragraph: 'Paragraph',                                                                                      // 2758\n          outdent: 'Outdent',                                                                                          // 2759\n          indent: 'Indent',                                                                                            // 2760\n          left: 'Align left',                                                                                          // 2761\n          center: 'Align center',                                                                                      // 2762\n          right: 'Align right',                                                                                        // 2763\n          justify: 'Justify full'                                                                                      // 2764\n        },                                                                                                             // 2765\n        color: {                                                                                                       // 2766\n          recent: 'Recent Color',                                                                                      // 2767\n          more: 'More Color',                                                                                          // 2768\n          background: 'Background Color',                                                                              // 2769\n          foreground: 'Foreground Color',                                                                              // 2770\n          transparent: 'Transparent',                                                                                  // 2771\n          setTransparent: 'Set transparent',                                                                           // 2772\n          reset: 'Reset',                                                                                              // 2773\n          resetToDefault: 'Reset to default'                                                                           // 2774\n        },                                                                                                             // 2775\n        shortcut: {                                                                                                    // 2776\n          shortcuts: 'Keyboard shortcuts',                                                                             // 2777\n          close: 'Close',                                                                                              // 2778\n          textFormatting: 'Text formatting',                                                                           // 2779\n          action: 'Action',                                                                                            // 2780\n          paragraphFormatting: 'Paragraph formatting',                                                                 // 2781\n          documentStyle: 'Document Style',                                                                             // 2782\n          extraKeys: 'Extra keys'                                                                                      // 2783\n        },                                                                                                             // 2784\n        history: {                                                                                                     // 2785\n          undo: 'Undo',                                                                                                // 2786\n          redo: 'Redo'                                                                                                 // 2787\n        }                                                                                                              // 2788\n      }                                                                                                                // 2789\n    }                                                                                                                  // 2790\n  };                                                                                                                   // 2791\n                                                                                                                       // 2792\n  /**                                                                                                                  // 2793\n   * @class core.async                                                                                                 // 2794\n   *                                                                                                                   // 2795\n   * Async functions which returns `Promise`                                                                           // 2796\n   *                                                                                                                   // 2797\n   * @singleton                                                                                                        // 2798\n   * @alternateClassName async                                                                                         // 2799\n   */                                                                                                                  // 2800\n  var async = (function () {                                                                                           // 2801\n    /**                                                                                                                // 2802\n     * @method readFileAsDataURL                                                                                       // 2803\n     *                                                                                                                 // 2804\n     * read contents of file as representing URL                                                                       // 2805\n     *                                                                                                                 // 2806\n     * @param {File} file                                                                                              // 2807\n     * @return {Promise} - then: sDataUrl                                                                              // 2808\n     */                                                                                                                // 2809\n    var readFileAsDataURL = function (file) {                                                                          // 2810\n      return $.Deferred(function (deferred) {                                                                          // 2811\n        $.extend(new FileReader(), {                                                                                   // 2812\n          onload: function (e) {                                                                                       // 2813\n            var sDataURL = e.target.result;                                                                            // 2814\n            deferred.resolve(sDataURL);                                                                                // 2815\n          },                                                                                                           // 2816\n          onerror: function () {                                                                                       // 2817\n            deferred.reject(this);                                                                                     // 2818\n          }                                                                                                            // 2819\n        }).readAsDataURL(file);                                                                                        // 2820\n      }).promise();                                                                                                    // 2821\n    };                                                                                                                 // 2822\n                                                                                                                       // 2823\n    /**                                                                                                                // 2824\n     * @method createImage                                                                                             // 2825\n     *                                                                                                                 // 2826\n     * create `<image>` from url string                                                                                // 2827\n     *                                                                                                                 // 2828\n     * @param {String} sUrl                                                                                            // 2829\n     * @param {String} filename                                                                                        // 2830\n     * @return {Promise} - then: $image                                                                                // 2831\n     */                                                                                                                // 2832\n    var createImage = function (sUrl, filename) {                                                                      // 2833\n      return $.Deferred(function (deferred) {                                                                          // 2834\n        var $img = $('<img>');                                                                                         // 2835\n                                                                                                                       // 2836\n        $img.one('load', function () {                                                                                 // 2837\n          $img.off('error abort');                                                                                     // 2838\n          deferred.resolve($img);                                                                                      // 2839\n        }).one('error abort', function () {                                                                            // 2840\n          $img.off('load').detach();                                                                                   // 2841\n          deferred.reject($img);                                                                                       // 2842\n        }).css({                                                                                                       // 2843\n          display: 'none'                                                                                              // 2844\n        }).appendTo(document.body).attr({                                                                              // 2845\n          'src': sUrl,                                                                                                 // 2846\n          'data-filename': filename                                                                                    // 2847\n        });                                                                                                            // 2848\n      }).promise();                                                                                                    // 2849\n    };                                                                                                                 // 2850\n                                                                                                                       // 2851\n    return {                                                                                                           // 2852\n      readFileAsDataURL: readFileAsDataURL,                                                                            // 2853\n      createImage: createImage                                                                                         // 2854\n    };                                                                                                                 // 2855\n  })();                                                                                                                // 2856\n                                                                                                                       // 2857\n  /**                                                                                                                  // 2858\n   * @class core.key                                                                                                   // 2859\n   *                                                                                                                   // 2860\n   * Object for keycodes.                                                                                              // 2861\n   *                                                                                                                   // 2862\n   * @singleton                                                                                                        // 2863\n   * @alternateClassName key                                                                                           // 2864\n   */                                                                                                                  // 2865\n  var key = (function () {                                                                                             // 2866\n    var keyMap = {                                                                                                     // 2867\n      'BACKSPACE': 8,                                                                                                  // 2868\n      'TAB': 9,                                                                                                        // 2869\n      'ENTER': 13,                                                                                                     // 2870\n      'SPACE': 32,                                                                                                     // 2871\n                                                                                                                       // 2872\n      // Number: 0-9                                                                                                   // 2873\n      'NUM0': 48,                                                                                                      // 2874\n      'NUM1': 49,                                                                                                      // 2875\n      'NUM2': 50,                                                                                                      // 2876\n      'NUM3': 51,                                                                                                      // 2877\n      'NUM4': 52,                                                                                                      // 2878\n      'NUM5': 53,                                                                                                      // 2879\n      'NUM6': 54,                                                                                                      // 2880\n      'NUM7': 55,                                                                                                      // 2881\n      'NUM8': 56,                                                                                                      // 2882\n                                                                                                                       // 2883\n      // Alphabet: a-z                                                                                                 // 2884\n      'B': 66,                                                                                                         // 2885\n      'E': 69,                                                                                                         // 2886\n      'I': 73,                                                                                                         // 2887\n      'J': 74,                                                                                                         // 2888\n      'K': 75,                                                                                                         // 2889\n      'L': 76,                                                                                                         // 2890\n      'R': 82,                                                                                                         // 2891\n      'S': 83,                                                                                                         // 2892\n      'U': 85,                                                                                                         // 2893\n      'V': 86,                                                                                                         // 2894\n      'Y': 89,                                                                                                         // 2895\n      'Z': 90,                                                                                                         // 2896\n                                                                                                                       // 2897\n      'SLASH': 191,                                                                                                    // 2898\n      'LEFTBRACKET': 219,                                                                                              // 2899\n      'BACKSLASH': 220,                                                                                                // 2900\n      'RIGHTBRACKET': 221                                                                                              // 2901\n    };                                                                                                                 // 2902\n                                                                                                                       // 2903\n    return {                                                                                                           // 2904\n      /**                                                                                                              // 2905\n       * @method isEdit                                                                                                // 2906\n       *                                                                                                               // 2907\n       * @param {Number} keyCode                                                                                       // 2908\n       * @return {Boolean}                                                                                             // 2909\n       */                                                                                                              // 2910\n      isEdit: function (keyCode) {                                                                                     // 2911\n        return list.contains([8, 9, 13, 32], keyCode);                                                                 // 2912\n      },                                                                                                               // 2913\n      /**                                                                                                              // 2914\n       * @method isMove                                                                                                // 2915\n       *                                                                                                               // 2916\n       * @param {Number} keyCode                                                                                       // 2917\n       * @return {Boolean}                                                                                             // 2918\n       */                                                                                                              // 2919\n      isMove: function (keyCode) {                                                                                     // 2920\n        return list.contains([37, 38, 39, 40], keyCode);                                                               // 2921\n      },                                                                                                               // 2922\n      /**                                                                                                              // 2923\n       * @property {Object} nameFromCode                                                                               // 2924\n       * @property {String} nameFromCode.8 \"BACKSPACE\"                                                                 // 2925\n       */                                                                                                              // 2926\n      nameFromCode: func.invertObject(keyMap),                                                                         // 2927\n      code: keyMap                                                                                                     // 2928\n    };                                                                                                                 // 2929\n  })();                                                                                                                // 2930\n                                                                                                                       // 2931\n  /**                                                                                                                  // 2932\n   * @class editing.History                                                                                            // 2933\n   *                                                                                                                   // 2934\n   * Editor History                                                                                                    // 2935\n   *                                                                                                                   // 2936\n   */                                                                                                                  // 2937\n  var History = function ($editable) {                                                                                 // 2938\n    var stack = [], stackOffset = -1;                                                                                  // 2939\n    var editable = $editable[0];                                                                                       // 2940\n                                                                                                                       // 2941\n    var makeSnapshot = function () {                                                                                   // 2942\n      var rng = range.create();                                                                                        // 2943\n      var emptyBookmark = {s: {path: [], offset: 0}, e: {path: [], offset: 0}};                                        // 2944\n                                                                                                                       // 2945\n      return {                                                                                                         // 2946\n        contents: $editable.html(),                                                                                    // 2947\n        bookmark: (rng ? rng.bookmark(editable) : emptyBookmark)                                                       // 2948\n      };                                                                                                               // 2949\n    };                                                                                                                 // 2950\n                                                                                                                       // 2951\n    var applySnapshot = function (snapshot) {                                                                          // 2952\n      if (snapshot.contents !== null) {                                                                                // 2953\n        $editable.html(snapshot.contents);                                                                             // 2954\n      }                                                                                                                // 2955\n      if (snapshot.bookmark !== null) {                                                                                // 2956\n        range.createFromBookmark(editable, snapshot.bookmark).select();                                                // 2957\n      }                                                                                                                // 2958\n    };                                                                                                                 // 2959\n                                                                                                                       // 2960\n    /**                                                                                                                // 2961\n     * undo                                                                                                            // 2962\n     */                                                                                                                // 2963\n    this.undo = function () {                                                                                          // 2964\n      // Create snap shot if not yet recorded                                                                          // 2965\n      if ($editable.html() !== stack[stackOffset].contents) {                                                          // 2966\n        this.recordUndo();                                                                                             // 2967\n      }                                                                                                                // 2968\n                                                                                                                       // 2969\n      if (0 < stackOffset) {                                                                                           // 2970\n        stackOffset--;                                                                                                 // 2971\n        applySnapshot(stack[stackOffset]);                                                                             // 2972\n      }                                                                                                                // 2973\n    };                                                                                                                 // 2974\n                                                                                                                       // 2975\n    /**                                                                                                                // 2976\n     * redo                                                                                                            // 2977\n     */                                                                                                                // 2978\n    this.redo = function () {                                                                                          // 2979\n      if (stack.length - 1 > stackOffset) {                                                                            // 2980\n        stackOffset++;                                                                                                 // 2981\n        applySnapshot(stack[stackOffset]);                                                                             // 2982\n      }                                                                                                                // 2983\n    };                                                                                                                 // 2984\n                                                                                                                       // 2985\n    /**                                                                                                                // 2986\n     * recorded undo                                                                                                   // 2987\n     */                                                                                                                // 2988\n    this.recordUndo = function () {                                                                                    // 2989\n      stackOffset++;                                                                                                   // 2990\n                                                                                                                       // 2991\n      // Wash out stack after stackOffset                                                                              // 2992\n      if (stack.length > stackOffset) {                                                                                // 2993\n        stack = stack.slice(0, stackOffset);                                                                           // 2994\n      }                                                                                                                // 2995\n                                                                                                                       // 2996\n      // Create new snapshot and push it to the end                                                                    // 2997\n      stack.push(makeSnapshot());                                                                                      // 2998\n    };                                                                                                                 // 2999\n                                                                                                                       // 3000\n    // Create first undo stack                                                                                         // 3001\n    this.recordUndo();                                                                                                 // 3002\n  };                                                                                                                   // 3003\n                                                                                                                       // 3004\n  /**                                                                                                                  // 3005\n   * @class editing.Style                                                                                              // 3006\n   *                                                                                                                   // 3007\n   * Style                                                                                                             // 3008\n   *                                                                                                                   // 3009\n   */                                                                                                                  // 3010\n  var Style = function () {                                                                                            // 3011\n    /**                                                                                                                // 3012\n     * @method jQueryCSS                                                                                               // 3013\n     *                                                                                                                 // 3014\n     * [workaround] for old jQuery                                                                                     // 3015\n     * passing an array of style properties to .css()                                                                  // 3016\n     * will result in an object of property-value pairs.                                                               // 3017\n     * (compability with version < 1.9)                                                                                // 3018\n     *                                                                                                                 // 3019\n     * @private                                                                                                        // 3020\n     * @param  {jQuery} $obj                                                                                           // 3021\n     * @param  {Array} propertyNames - An array of one or more CSS properties.                                         // 3022\n     * @return {Object}                                                                                                // 3023\n     */                                                                                                                // 3024\n    var jQueryCSS = function ($obj, propertyNames) {                                                                   // 3025\n      if (agent.jqueryVersion < 1.9) {                                                                                 // 3026\n        var result = {};                                                                                               // 3027\n        $.each(propertyNames, function (idx, propertyName) {                                                           // 3028\n          result[propertyName] = $obj.css(propertyName);                                                               // 3029\n        });                                                                                                            // 3030\n        return result;                                                                                                 // 3031\n      }                                                                                                                // 3032\n      return $obj.css.call($obj, propertyNames);                                                                       // 3033\n    };                                                                                                                 // 3034\n                                                                                                                       // 3035\n    /**                                                                                                                // 3036\n     * returns style object from node                                                                                  // 3037\n     *                                                                                                                 // 3038\n     * @param {jQuery} $node                                                                                           // 3039\n     * @return {Object}                                                                                                // 3040\n     */                                                                                                                // 3041\n    this.fromNode = function ($node) {                                                                                 // 3042\n      var properties = ['font-family', 'font-size', 'text-align', 'list-style-type', 'line-height'];                   // 3043\n      var styleInfo = jQueryCSS($node, properties) || {};                                                              // 3044\n      styleInfo['font-size'] = parseInt(styleInfo['font-size'], 10);                                                   // 3045\n      return styleInfo;                                                                                                // 3046\n    };                                                                                                                 // 3047\n                                                                                                                       // 3048\n    /**                                                                                                                // 3049\n     * paragraph level style                                                                                           // 3050\n     *                                                                                                                 // 3051\n     * @param {WrappedRange} rng                                                                                       // 3052\n     * @param {Object} styleInfo                                                                                       // 3053\n     */                                                                                                                // 3054\n    this.stylePara = function (rng, styleInfo) {                                                                       // 3055\n      $.each(rng.nodes(dom.isPara, {                                                                                   // 3056\n        includeAncestor: true                                                                                          // 3057\n      }), function (idx, para) {                                                                                       // 3058\n        $(para).css(styleInfo);                                                                                        // 3059\n      });                                                                                                              // 3060\n    };                                                                                                                 // 3061\n                                                                                                                       // 3062\n    /**                                                                                                                // 3063\n     * insert and returns styleNodes on range.                                                                         // 3064\n     *                                                                                                                 // 3065\n     * @param {WrappedRange} rng                                                                                       // 3066\n     * @param {Object} [options] - options for styleNodes                                                              // 3067\n     * @param {String} [options.nodeName] - default: `SPAN`                                                            // 3068\n     * @param {Boolean} [options.expandClosestSibling] - default: `false`                                              // 3069\n     * @param {Boolean} [options.onlyPartialContains] - default: `false`                                               // 3070\n     * @return {Node[]}                                                                                                // 3071\n     */                                                                                                                // 3072\n    this.styleNodes = function (rng, options) {                                                                        // 3073\n      rng = rng.splitText();                                                                                           // 3074\n                                                                                                                       // 3075\n      var nodeName = options && options.nodeName || 'SPAN';                                                            // 3076\n      var expandClosestSibling = !!(options && options.expandClosestSibling);                                          // 3077\n      var onlyPartialContains = !!(options && options.onlyPartialContains);                                            // 3078\n                                                                                                                       // 3079\n      if (rng.isCollapsed()) {                                                                                         // 3080\n        return [rng.insertNode(dom.create(nodeName))];                                                                 // 3081\n      }                                                                                                                // 3082\n                                                                                                                       // 3083\n      var pred = dom.makePredByNodeName(nodeName);                                                                     // 3084\n      var nodes = rng.nodes(dom.isText, {                                                                              // 3085\n        fullyContains: true                                                                                            // 3086\n      }).map(function (text) {                                                                                         // 3087\n        return dom.singleChildAncestor(text, pred) || dom.wrap(text, nodeName);                                        // 3088\n      });                                                                                                              // 3089\n                                                                                                                       // 3090\n      if (expandClosestSibling) {                                                                                      // 3091\n        if (onlyPartialContains) {                                                                                     // 3092\n          var nodesInRange = rng.nodes();                                                                              // 3093\n          // compose with partial contains predication                                                                 // 3094\n          pred = func.and(pred, function (node) {                                                                      // 3095\n            return list.contains(nodesInRange, node);                                                                  // 3096\n          });                                                                                                          // 3097\n        }                                                                                                              // 3098\n                                                                                                                       // 3099\n        return nodes.map(function (node) {                                                                             // 3100\n          var siblings = dom.withClosestSiblings(node, pred);                                                          // 3101\n          var head = list.head(siblings);                                                                              // 3102\n          var tails = list.tail(siblings);                                                                             // 3103\n          $.each(tails, function (idx, elem) {                                                                         // 3104\n            dom.appendChildNodes(head, elem.childNodes);                                                               // 3105\n            dom.remove(elem);                                                                                          // 3106\n          });                                                                                                          // 3107\n          return list.head(siblings);                                                                                  // 3108\n        });                                                                                                            // 3109\n      } else {                                                                                                         // 3110\n        return nodes;                                                                                                  // 3111\n      }                                                                                                                // 3112\n    };                                                                                                                 // 3113\n                                                                                                                       // 3114\n    /**                                                                                                                // 3115\n     * get current style on cursor                                                                                     // 3116\n     *                                                                                                                 // 3117\n     * @param {WrappedRange} rng                                                                                       // 3118\n     * @return {Object} - object contains style properties.                                                            // 3119\n     */                                                                                                                // 3120\n    this.current = function (rng) {                                                                                    // 3121\n      var $cont = $(dom.isText(rng.sc) ? rng.sc.parentNode : rng.sc);                                                  // 3122\n      var styleInfo = this.fromNode($cont);                                                                            // 3123\n                                                                                                                       // 3124\n      // document.queryCommandState for toggle state                                                                   // 3125\n      styleInfo['font-bold'] = document.queryCommandState('bold') ? 'bold' : 'normal';                                 // 3126\n      styleInfo['font-italic'] = document.queryCommandState('italic') ? 'italic' : 'normal';                           // 3127\n      styleInfo['font-underline'] = document.queryCommandState('underline') ? 'underline' : 'normal';                  // 3128\n      styleInfo['font-strikethrough'] = document.queryCommandState('strikeThrough') ? 'strikethrough' : 'normal';      // 3129\n      styleInfo['font-superscript'] = document.queryCommandState('superscript') ? 'superscript' : 'normal';            // 3130\n      styleInfo['font-subscript'] = document.queryCommandState('subscript') ? 'subscript' : 'normal';                  // 3131\n                                                                                                                       // 3132\n      // list-style-type to list-style(unordered, ordered)                                                             // 3133\n      if (!rng.isOnList()) {                                                                                           // 3134\n        styleInfo['list-style'] = 'none';                                                                              // 3135\n      } else {                                                                                                         // 3136\n        var aOrderedType = ['circle', 'disc', 'disc-leading-zero', 'square'];                                          // 3137\n        var isUnordered = $.inArray(styleInfo['list-style-type'], aOrderedType) > -1;                                  // 3138\n        styleInfo['list-style'] = isUnordered ? 'unordered' : 'ordered';                                               // 3139\n      }                                                                                                                // 3140\n                                                                                                                       // 3141\n      var para = dom.ancestor(rng.sc, dom.isPara);                                                                     // 3142\n      if (para && para.style['line-height']) {                                                                         // 3143\n        styleInfo['line-height'] = para.style.lineHeight;                                                              // 3144\n      } else {                                                                                                         // 3145\n        var lineHeight = parseInt(styleInfo['line-height'], 10) / parseInt(styleInfo['font-size'], 10);                // 3146\n        styleInfo['line-height'] = lineHeight.toFixed(1);                                                              // 3147\n      }                                                                                                                // 3148\n                                                                                                                       // 3149\n      styleInfo.anchor = rng.isOnAnchor() && dom.ancestor(rng.sc, dom.isAnchor);                                       // 3150\n      styleInfo.ancestors = dom.listAncestor(rng.sc, dom.isEditable);                                                  // 3151\n      styleInfo.range = rng;                                                                                           // 3152\n                                                                                                                       // 3153\n      return styleInfo;                                                                                                // 3154\n    };                                                                                                                 // 3155\n  };                                                                                                                   // 3156\n                                                                                                                       // 3157\n                                                                                                                       // 3158\n  /**                                                                                                                  // 3159\n   * @class editing.Bullet                                                                                             // 3160\n   *                                                                                                                   // 3161\n   * @alternateClassName Bullet                                                                                        // 3162\n   */                                                                                                                  // 3163\n  var Bullet = function () {                                                                                           // 3164\n    /**                                                                                                                // 3165\n     * @method insertOrderedList                                                                                       // 3166\n     *                                                                                                                 // 3167\n     * toggle ordered list                                                                                             // 3168\n     *                                                                                                                 // 3169\n     * @type command                                                                                                   // 3170\n     */                                                                                                                // 3171\n    this.insertOrderedList = function () {                                                                             // 3172\n      this.toggleList('OL');                                                                                           // 3173\n    };                                                                                                                 // 3174\n                                                                                                                       // 3175\n    /**                                                                                                                // 3176\n     * @method insertUnorderedList                                                                                     // 3177\n     *                                                                                                                 // 3178\n     * toggle unordered list                                                                                           // 3179\n     *                                                                                                                 // 3180\n     * @type command                                                                                                   // 3181\n     */                                                                                                                // 3182\n    this.insertUnorderedList = function () {                                                                           // 3183\n      this.toggleList('UL');                                                                                           // 3184\n    };                                                                                                                 // 3185\n                                                                                                                       // 3186\n    /**                                                                                                                // 3187\n     * @method indent                                                                                                  // 3188\n     *                                                                                                                 // 3189\n     * indent                                                                                                          // 3190\n     *                                                                                                                 // 3191\n     * @type command                                                                                                   // 3192\n     */                                                                                                                // 3193\n    this.indent = function () {                                                                                        // 3194\n      var self = this;                                                                                                 // 3195\n      var rng = range.create().wrapBodyInlineWithPara();                                                               // 3196\n                                                                                                                       // 3197\n      var paras = rng.nodes(dom.isPara, { includeAncestor: true });                                                    // 3198\n      var clustereds = list.clusterBy(paras, func.peq2('parentNode'));                                                 // 3199\n                                                                                                                       // 3200\n      $.each(clustereds, function (idx, paras) {                                                                       // 3201\n        var head = list.head(paras);                                                                                   // 3202\n        if (dom.isLi(head)) {                                                                                          // 3203\n          self.wrapList(paras, head.parentNode.nodeName);                                                              // 3204\n        } else {                                                                                                       // 3205\n          $.each(paras, function (idx, para) {                                                                         // 3206\n            $(para).css('marginLeft', function (idx, val) {                                                            // 3207\n              return (parseInt(val, 10) || 0) + 25;                                                                    // 3208\n            });                                                                                                        // 3209\n          });                                                                                                          // 3210\n        }                                                                                                              // 3211\n      });                                                                                                              // 3212\n                                                                                                                       // 3213\n      rng.select();                                                                                                    // 3214\n    };                                                                                                                 // 3215\n                                                                                                                       // 3216\n    /**                                                                                                                // 3217\n     * @method outdent                                                                                                 // 3218\n     *                                                                                                                 // 3219\n     * outdent                                                                                                         // 3220\n     *                                                                                                                 // 3221\n     * @type command                                                                                                   // 3222\n     */                                                                                                                // 3223\n    this.outdent = function () {                                                                                       // 3224\n      var self = this;                                                                                                 // 3225\n      var rng = range.create().wrapBodyInlineWithPara();                                                               // 3226\n                                                                                                                       // 3227\n      var paras = rng.nodes(dom.isPara, { includeAncestor: true });                                                    // 3228\n      var clustereds = list.clusterBy(paras, func.peq2('parentNode'));                                                 // 3229\n                                                                                                                       // 3230\n      $.each(clustereds, function (idx, paras) {                                                                       // 3231\n        var head = list.head(paras);                                                                                   // 3232\n        if (dom.isLi(head)) {                                                                                          // 3233\n          self.releaseList([paras]);                                                                                   // 3234\n        } else {                                                                                                       // 3235\n          $.each(paras, function (idx, para) {                                                                         // 3236\n            $(para).css('marginLeft', function (idx, val) {                                                            // 3237\n              val = (parseInt(val, 10) || 0);                                                                          // 3238\n              return val > 25 ? val - 25 : '';                                                                         // 3239\n            });                                                                                                        // 3240\n          });                                                                                                          // 3241\n        }                                                                                                              // 3242\n      });                                                                                                              // 3243\n                                                                                                                       // 3244\n      rng.select();                                                                                                    // 3245\n    };                                                                                                                 // 3246\n                                                                                                                       // 3247\n    /**                                                                                                                // 3248\n     * @method toggleList                                                                                              // 3249\n     *                                                                                                                 // 3250\n     * toggle list                                                                                                     // 3251\n     *                                                                                                                 // 3252\n     * @param {String} listName - OL or UL                                                                             // 3253\n     */                                                                                                                // 3254\n    this.toggleList = function (listName) {                                                                            // 3255\n      var self = this;                                                                                                 // 3256\n      var rng = range.create().wrapBodyInlineWithPara();                                                               // 3257\n                                                                                                                       // 3258\n      var paras = rng.nodes(dom.isPara, { includeAncestor: true });                                                    // 3259\n      var bookmark = rng.paraBookmark(paras);                                                                          // 3260\n      var clustereds = list.clusterBy(paras, func.peq2('parentNode'));                                                 // 3261\n                                                                                                                       // 3262\n      // paragraph to list                                                                                             // 3263\n      if (list.find(paras, dom.isPurePara)) {                                                                          // 3264\n        var wrappedParas = [];                                                                                         // 3265\n        $.each(clustereds, function (idx, paras) {                                                                     // 3266\n          wrappedParas = wrappedParas.concat(self.wrapList(paras, listName));                                          // 3267\n        });                                                                                                            // 3268\n        paras = wrappedParas;                                                                                          // 3269\n      // list to paragraph or change list style                                                                        // 3270\n      } else {                                                                                                         // 3271\n        var diffLists = rng.nodes(dom.isList, {                                                                        // 3272\n          includeAncestor: true                                                                                        // 3273\n        }).filter(function (listNode) {                                                                                // 3274\n          return !$.nodeName(listNode, listName);                                                                      // 3275\n        });                                                                                                            // 3276\n                                                                                                                       // 3277\n        if (diffLists.length) {                                                                                        // 3278\n          $.each(diffLists, function (idx, listNode) {                                                                 // 3279\n            dom.replace(listNode, listName);                                                                           // 3280\n          });                                                                                                          // 3281\n        } else {                                                                                                       // 3282\n          paras = this.releaseList(clustereds, true);                                                                  // 3283\n        }                                                                                                              // 3284\n      }                                                                                                                // 3285\n                                                                                                                       // 3286\n      range.createFromParaBookmark(bookmark, paras).select();                                                          // 3287\n    };                                                                                                                 // 3288\n                                                                                                                       // 3289\n    /**                                                                                                                // 3290\n     * @method wrapList                                                                                                // 3291\n     *                                                                                                                 // 3292\n     * @param {Node[]} paras                                                                                           // 3293\n     * @param {String} listName                                                                                        // 3294\n     * @return {Node[]}                                                                                                // 3295\n     */                                                                                                                // 3296\n    this.wrapList = function (paras, listName) {                                                                       // 3297\n      var head = list.head(paras);                                                                                     // 3298\n      var last = list.last(paras);                                                                                     // 3299\n                                                                                                                       // 3300\n      var prevList = dom.isList(head.previousSibling) && head.previousSibling;                                         // 3301\n      var nextList = dom.isList(last.nextSibling) && last.nextSibling;                                                 // 3302\n                                                                                                                       // 3303\n      var listNode = prevList || dom.insertAfter(dom.create(listName || 'UL'), last);                                  // 3304\n                                                                                                                       // 3305\n      // P to LI                                                                                                       // 3306\n      paras = paras.map(function (para) {                                                                              // 3307\n        return dom.isPurePara(para) ? dom.replace(para, 'LI') : para;                                                  // 3308\n      });                                                                                                              // 3309\n                                                                                                                       // 3310\n      // append to list(<ul>, <ol>)                                                                                    // 3311\n      dom.appendChildNodes(listNode, paras);                                                                           // 3312\n                                                                                                                       // 3313\n      if (nextList) {                                                                                                  // 3314\n        dom.appendChildNodes(listNode, list.from(nextList.childNodes));                                                // 3315\n        dom.remove(nextList);                                                                                          // 3316\n      }                                                                                                                // 3317\n                                                                                                                       // 3318\n      return paras;                                                                                                    // 3319\n    };                                                                                                                 // 3320\n                                                                                                                       // 3321\n    /**                                                                                                                // 3322\n     * @method releaseList                                                                                             // 3323\n     *                                                                                                                 // 3324\n     * @param {Array[]} clustereds                                                                                     // 3325\n     * @param {Boolean} isEscapseToBody                                                                                // 3326\n     * @return {Node[]}                                                                                                // 3327\n     */                                                                                                                // 3328\n    this.releaseList = function (clustereds, isEscapseToBody) {                                                        // 3329\n      var releasedParas = [];                                                                                          // 3330\n                                                                                                                       // 3331\n      $.each(clustereds, function (idx, paras) {                                                                       // 3332\n        var head = list.head(paras);                                                                                   // 3333\n        var last = list.last(paras);                                                                                   // 3334\n                                                                                                                       // 3335\n        var headList = isEscapseToBody ? dom.lastAncestor(head, dom.isList) :                                          // 3336\n                                         head.parentNode;                                                              // 3337\n        var lastList = headList.childNodes.length > 1 ? dom.splitTree(headList, {                                      // 3338\n          node: last.parentNode,                                                                                       // 3339\n          offset: dom.position(last) + 1                                                                               // 3340\n        }, {                                                                                                           // 3341\n          isSkipPaddingBlankHTML: true                                                                                 // 3342\n        }) : null;                                                                                                     // 3343\n                                                                                                                       // 3344\n        var middleList = dom.splitTree(headList, {                                                                     // 3345\n          node: head.parentNode,                                                                                       // 3346\n          offset: dom.position(head)                                                                                   // 3347\n        }, {                                                                                                           // 3348\n          isSkipPaddingBlankHTML: true                                                                                 // 3349\n        });                                                                                                            // 3350\n                                                                                                                       // 3351\n        paras = isEscapseToBody ? dom.listDescendant(middleList, dom.isLi) :                                           // 3352\n                                  list.from(middleList.childNodes).filter(dom.isLi);                                   // 3353\n                                                                                                                       // 3354\n        // LI to P                                                                                                     // 3355\n        if (isEscapseToBody || !dom.isList(headList.parentNode)) {                                                     // 3356\n          paras = paras.map(function (para) {                                                                          // 3357\n            return dom.replace(para, 'P');                                                                             // 3358\n          });                                                                                                          // 3359\n        }                                                                                                              // 3360\n                                                                                                                       // 3361\n        $.each(list.from(paras).reverse(), function (idx, para) {                                                      // 3362\n          dom.insertAfter(para, headList);                                                                             // 3363\n        });                                                                                                            // 3364\n                                                                                                                       // 3365\n        // remove empty lists                                                                                          // 3366\n        var rootLists = list.compact([headList, middleList, lastList]);                                                // 3367\n        $.each(rootLists, function (idx, rootList) {                                                                   // 3368\n          var listNodes = [rootList].concat(dom.listDescendant(rootList, dom.isList));                                 // 3369\n          $.each(listNodes.reverse(), function (idx, listNode) {                                                       // 3370\n            if (!dom.nodeLength(listNode)) {                                                                           // 3371\n              dom.remove(listNode, true);                                                                              // 3372\n            }                                                                                                          // 3373\n          });                                                                                                          // 3374\n        });                                                                                                            // 3375\n                                                                                                                       // 3376\n        releasedParas = releasedParas.concat(paras);                                                                   // 3377\n      });                                                                                                              // 3378\n                                                                                                                       // 3379\n      return releasedParas;                                                                                            // 3380\n    };                                                                                                                 // 3381\n  };                                                                                                                   // 3382\n                                                                                                                       // 3383\n                                                                                                                       // 3384\n  /**                                                                                                                  // 3385\n   * @class editing.Typing                                                                                             // 3386\n   *                                                                                                                   // 3387\n   * Typing                                                                                                            // 3388\n   *                                                                                                                   // 3389\n   */                                                                                                                  // 3390\n  var Typing = function () {                                                                                           // 3391\n                                                                                                                       // 3392\n    // a Bullet instance to toggle lists off                                                                           // 3393\n    var bullet = new Bullet();                                                                                         // 3394\n                                                                                                                       // 3395\n    /**                                                                                                                // 3396\n     * insert tab                                                                                                      // 3397\n     *                                                                                                                 // 3398\n     * @param {jQuery} $editable                                                                                       // 3399\n     * @param {WrappedRange} rng                                                                                       // 3400\n     * @param {Number} tabsize                                                                                         // 3401\n     */                                                                                                                // 3402\n    this.insertTab = function ($editable, rng, tabsize) {                                                              // 3403\n      var tab = dom.createText(new Array(tabsize + 1).join(dom.NBSP_CHAR));                                            // 3404\n      rng = rng.deleteContents();                                                                                      // 3405\n      rng.insertNode(tab, true);                                                                                       // 3406\n                                                                                                                       // 3407\n      rng = range.create(tab, tabsize);                                                                                // 3408\n      rng.select();                                                                                                    // 3409\n    };                                                                                                                 // 3410\n                                                                                                                       // 3411\n    /**                                                                                                                // 3412\n     * insert paragraph                                                                                                // 3413\n     */                                                                                                                // 3414\n    this.insertParagraph = function () {                                                                               // 3415\n      var rng = range.create();                                                                                        // 3416\n                                                                                                                       // 3417\n      // deleteContents on range.                                                                                      // 3418\n      rng = rng.deleteContents();                                                                                      // 3419\n                                                                                                                       // 3420\n      // Wrap range if it needs to be wrapped by paragraph                                                             // 3421\n      rng = rng.wrapBodyInlineWithPara();                                                                              // 3422\n                                                                                                                       // 3423\n      // finding paragraph                                                                                             // 3424\n      var splitRoot = dom.ancestor(rng.sc, dom.isPara);                                                                // 3425\n                                                                                                                       // 3426\n      var nextPara;                                                                                                    // 3427\n      // on paragraph: split paragraph                                                                                 // 3428\n      if (splitRoot) {                                                                                                 // 3429\n        // if it is an empty line with li                                                                              // 3430\n        if (dom.isEmpty(splitRoot) && dom.isLi(splitRoot)) {                                                           // 3431\n          // disable UL/OL and escape!                                                                                 // 3432\n          bullet.toggleList(splitRoot.parentNode.nodeName);                                                            // 3433\n          return;                                                                                                      // 3434\n        // if new line has content (not a line break)                                                                  // 3435\n        } else {                                                                                                       // 3436\n          nextPara = dom.splitTree(splitRoot, rng.getStartPoint());                                                    // 3437\n                                                                                                                       // 3438\n          var emptyAnchors = dom.listDescendant(splitRoot, dom.isEmptyAnchor);                                         // 3439\n          emptyAnchors = emptyAnchors.concat(dom.listDescendant(nextPara, dom.isEmptyAnchor));                         // 3440\n                                                                                                                       // 3441\n          $.each(emptyAnchors, function (idx, anchor) {                                                                // 3442\n            dom.remove(anchor);                                                                                        // 3443\n          });                                                                                                          // 3444\n        }                                                                                                              // 3445\n      // no paragraph: insert empty paragraph                                                                          // 3446\n      } else {                                                                                                         // 3447\n        var next = rng.sc.childNodes[rng.so];                                                                          // 3448\n        nextPara = $(dom.emptyPara)[0];                                                                                // 3449\n        if (next) {                                                                                                    // 3450\n          rng.sc.insertBefore(nextPara, next);                                                                         // 3451\n        } else {                                                                                                       // 3452\n          rng.sc.appendChild(nextPara);                                                                                // 3453\n        }                                                                                                              // 3454\n      }                                                                                                                // 3455\n                                                                                                                       // 3456\n      range.create(nextPara, 0).normalize().select();                                                                  // 3457\n                                                                                                                       // 3458\n    };                                                                                                                 // 3459\n                                                                                                                       // 3460\n  };                                                                                                                   // 3461\n                                                                                                                       // 3462\n  /**                                                                                                                  // 3463\n   * @class editing.Table                                                                                              // 3464\n   *                                                                                                                   // 3465\n   * Table                                                                                                             // 3466\n   *                                                                                                                   // 3467\n   */                                                                                                                  // 3468\n  var Table = function () {                                                                                            // 3469\n    /**                                                                                                                // 3470\n     * handle tab key                                                                                                  // 3471\n     *                                                                                                                 // 3472\n     * @param {WrappedRange} rng                                                                                       // 3473\n     * @param {Boolean} isShift                                                                                        // 3474\n     */                                                                                                                // 3475\n    this.tab = function (rng, isShift) {                                                                               // 3476\n      var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);                                                       // 3477\n      var table = dom.ancestor(cell, dom.isTable);                                                                     // 3478\n      var cells = dom.listDescendant(table, dom.isCell);                                                               // 3479\n                                                                                                                       // 3480\n      var nextCell = list[isShift ? 'prev' : 'next'](cells, cell);                                                     // 3481\n      if (nextCell) {                                                                                                  // 3482\n        range.create(nextCell, 0).select();                                                                            // 3483\n      }                                                                                                                // 3484\n    };                                                                                                                 // 3485\n                                                                                                                       // 3486\n    /**                                                                                                                // 3487\n     * create empty table element                                                                                      // 3488\n     *                                                                                                                 // 3489\n     * @param {Number} rowCount                                                                                        // 3490\n     * @param {Number} colCount                                                                                        // 3491\n     * @return {Node}                                                                                                  // 3492\n     */                                                                                                                // 3493\n    this.createTable = function (colCount, rowCount) {                                                                 // 3494\n      var tds = [], tdHTML;                                                                                            // 3495\n      for (var idxCol = 0; idxCol < colCount; idxCol++) {                                                              // 3496\n        tds.push('<td>' + dom.blank + '</td>');                                                                        // 3497\n      }                                                                                                                // 3498\n      tdHTML = tds.join('');                                                                                           // 3499\n                                                                                                                       // 3500\n      var trs = [], trHTML;                                                                                            // 3501\n      for (var idxRow = 0; idxRow < rowCount; idxRow++) {                                                              // 3502\n        trs.push('<tr>' + tdHTML + '</tr>');                                                                           // 3503\n      }                                                                                                                // 3504\n      trHTML = trs.join('');                                                                                           // 3505\n      return $('<table class=\"table table-bordered\">' + trHTML + '</table>')[0];                                       // 3506\n    };                                                                                                                 // 3507\n  };                                                                                                                   // 3508\n                                                                                                                       // 3509\n                                                                                                                       // 3510\n  var KEY_BOGUS = 'bogus';                                                                                             // 3511\n                                                                                                                       // 3512\n  /**                                                                                                                  // 3513\n   * @class editing.Editor                                                                                             // 3514\n   *                                                                                                                   // 3515\n   * Editor                                                                                                            // 3516\n   *                                                                                                                   // 3517\n   */                                                                                                                  // 3518\n  var Editor = function (handler) {                                                                                    // 3519\n                                                                                                                       // 3520\n    var self = this;                                                                                                   // 3521\n    var style = new Style();                                                                                           // 3522\n    var table = new Table();                                                                                           // 3523\n    var typing = new Typing();                                                                                         // 3524\n    var bullet = new Bullet();                                                                                         // 3525\n                                                                                                                       // 3526\n    /**                                                                                                                // 3527\n     * @method createRange                                                                                             // 3528\n     *                                                                                                                 // 3529\n     * create range                                                                                                    // 3530\n     *                                                                                                                 // 3531\n     * @param {jQuery} $editable                                                                                       // 3532\n     * @return {WrappedRange}                                                                                          // 3533\n     */                                                                                                                // 3534\n    this.createRange = function ($editable) {                                                                          // 3535\n      this.focus($editable);                                                                                           // 3536\n      return range.create();                                                                                           // 3537\n    };                                                                                                                 // 3538\n                                                                                                                       // 3539\n    /**                                                                                                                // 3540\n     * @method saveRange                                                                                               // 3541\n     *                                                                                                                 // 3542\n     * save current range                                                                                              // 3543\n     *                                                                                                                 // 3544\n     * @param {jQuery} $editable                                                                                       // 3545\n     * @param {Boolean} [thenCollapse=false]                                                                           // 3546\n     */                                                                                                                // 3547\n    this.saveRange = function ($editable, thenCollapse) {                                                              // 3548\n      this.focus($editable);                                                                                           // 3549\n      $editable.data('range', range.create());                                                                         // 3550\n      if (thenCollapse) {                                                                                              // 3551\n        range.create().collapse().select();                                                                            // 3552\n      }                                                                                                                // 3553\n    };                                                                                                                 // 3554\n                                                                                                                       // 3555\n    /**                                                                                                                // 3556\n     * @method saveRange                                                                                               // 3557\n     *                                                                                                                 // 3558\n     * save current node list to $editable.data('childNodes')                                                          // 3559\n     *                                                                                                                 // 3560\n     * @param {jQuery} $editable                                                                                       // 3561\n     */                                                                                                                // 3562\n    this.saveNode = function ($editable) {                                                                             // 3563\n      // copy child node reference                                                                                     // 3564\n      var copy = [];                                                                                                   // 3565\n      for (var key  = 0, len = $editable[0].childNodes.length; key < len; key++) {                                     // 3566\n        copy.push($editable[0].childNodes[key]);                                                                       // 3567\n      }                                                                                                                // 3568\n      $editable.data('childNodes', copy);                                                                              // 3569\n    };                                                                                                                 // 3570\n                                                                                                                       // 3571\n    /**                                                                                                                // 3572\n     * @method restoreRange                                                                                            // 3573\n     *                                                                                                                 // 3574\n     * restore lately range                                                                                            // 3575\n     *                                                                                                                 // 3576\n     * @param {jQuery} $editable                                                                                       // 3577\n     */                                                                                                                // 3578\n    this.restoreRange = function ($editable) {                                                                         // 3579\n      var rng = $editable.data('range');                                                                               // 3580\n      if (rng) {                                                                                                       // 3581\n        rng.select();                                                                                                  // 3582\n        this.focus($editable);                                                                                         // 3583\n      }                                                                                                                // 3584\n    };                                                                                                                 // 3585\n                                                                                                                       // 3586\n    /**                                                                                                                // 3587\n     * @method restoreNode                                                                                             // 3588\n     *                                                                                                                 // 3589\n     * restore lately node list                                                                                        // 3590\n     *                                                                                                                 // 3591\n     * @param {jQuery} $editable                                                                                       // 3592\n     */                                                                                                                // 3593\n    this.restoreNode = function ($editable) {                                                                          // 3594\n      $editable.html('');                                                                                              // 3595\n      var child = $editable.data('childNodes');                                                                        // 3596\n      for (var index = 0, len = child.length; index < len; index++) {                                                  // 3597\n        $editable[0].appendChild(child[index]);                                                                        // 3598\n      }                                                                                                                // 3599\n    };                                                                                                                 // 3600\n                                                                                                                       // 3601\n    /**                                                                                                                // 3602\n     * @method currentStyle                                                                                            // 3603\n     *                                                                                                                 // 3604\n     * current style                                                                                                   // 3605\n     *                                                                                                                 // 3606\n     * @param {Node} target                                                                                            // 3607\n     * @return {Object|Boolean} unfocus                                                                                // 3608\n     */                                                                                                                // 3609\n    this.currentStyle = function (target) {                                                                            // 3610\n      var rng = range.create();                                                                                        // 3611\n      var styleInfo =  rng && rng.isOnEditable() ? style.current(rng.normalize()) : {};                                // 3612\n      if (dom.isImg(target)) {                                                                                         // 3613\n        styleInfo.image = target;                                                                                      // 3614\n      }                                                                                                                // 3615\n      return styleInfo;                                                                                                // 3616\n    };                                                                                                                 // 3617\n                                                                                                                       // 3618\n    /**                                                                                                                // 3619\n     * style from node                                                                                                 // 3620\n     *                                                                                                                 // 3621\n     * @param {jQuery} $node                                                                                           // 3622\n     * @return {Object}                                                                                                // 3623\n     */                                                                                                                // 3624\n    this.styleFromNode = function ($node) {                                                                            // 3625\n      return style.fromNode($node);                                                                                    // 3626\n    };                                                                                                                 // 3627\n                                                                                                                       // 3628\n    var triggerOnBeforeChange = function ($editable) {                                                                 // 3629\n      var $holder = dom.makeLayoutInfo($editable).holder();                                                            // 3630\n      handler.bindCustomEvent(                                                                                         // 3631\n        $holder, $editable.data('callbacks'), 'before.command'                                                         // 3632\n      )($editable.html(), $editable);                                                                                  // 3633\n    };                                                                                                                 // 3634\n                                                                                                                       // 3635\n    var triggerOnChange = function ($editable) {                                                                       // 3636\n      var $holder = dom.makeLayoutInfo($editable).holder();                                                            // 3637\n      handler.bindCustomEvent(                                                                                         // 3638\n        $holder, $editable.data('callbacks'), 'change'                                                                 // 3639\n      )($editable.html(), $editable);                                                                                  // 3640\n    };                                                                                                                 // 3641\n                                                                                                                       // 3642\n    /**                                                                                                                // 3643\n     * @method undo                                                                                                    // 3644\n     * undo                                                                                                            // 3645\n     * @param {jQuery} $editable                                                                                       // 3646\n     */                                                                                                                // 3647\n    this.undo = function ($editable) {                                                                                 // 3648\n      triggerOnBeforeChange($editable);                                                                                // 3649\n      $editable.data('NoteHistory').undo();                                                                            // 3650\n      triggerOnChange($editable);                                                                                      // 3651\n    };                                                                                                                 // 3652\n                                                                                                                       // 3653\n    /**                                                                                                                // 3654\n     * @method redo                                                                                                    // 3655\n     * redo                                                                                                            // 3656\n     * @param {jQuery} $editable                                                                                       // 3657\n     */                                                                                                                // 3658\n    this.redo = function ($editable) {                                                                                 // 3659\n      triggerOnBeforeChange($editable);                                                                                // 3660\n      $editable.data('NoteHistory').redo();                                                                            // 3661\n      triggerOnChange($editable);                                                                                      // 3662\n    };                                                                                                                 // 3663\n                                                                                                                       // 3664\n    /**                                                                                                                // 3665\n     * @method beforeCommand                                                                                           // 3666\n     * before command                                                                                                  // 3667\n     * @param {jQuery} $editable                                                                                       // 3668\n     */                                                                                                                // 3669\n    var beforeCommand = this.beforeCommand = function ($editable) {                                                    // 3670\n      triggerOnBeforeChange($editable);                                                                                // 3671\n      // keep focus on editable before command execution                                                               // 3672\n      self.focus($editable);                                                                                           // 3673\n    };                                                                                                                 // 3674\n                                                                                                                       // 3675\n    /**                                                                                                                // 3676\n     * @method afterCommand                                                                                            // 3677\n     * after command                                                                                                   // 3678\n     * @param {jQuery} $editable                                                                                       // 3679\n     * @param {Boolean} isPreventTrigger                                                                               // 3680\n     */                                                                                                                // 3681\n    var afterCommand = this.afterCommand = function ($editable, isPreventTrigger) {                                    // 3682\n      $editable.data('NoteHistory').recordUndo();                                                                      // 3683\n      if (!isPreventTrigger) {                                                                                         // 3684\n        triggerOnChange($editable);                                                                                    // 3685\n      }                                                                                                                // 3686\n    };                                                                                                                 // 3687\n                                                                                                                       // 3688\n    /**                                                                                                                // 3689\n     * @method bold                                                                                                    // 3690\n     * @param {jQuery} $editable                                                                                       // 3691\n     * @param {Mixed} value                                                                                            // 3692\n     */                                                                                                                // 3693\n                                                                                                                       // 3694\n    /**                                                                                                                // 3695\n     * @method italic                                                                                                  // 3696\n     * @param {jQuery} $editable                                                                                       // 3697\n     * @param {Mixed} value                                                                                            // 3698\n     */                                                                                                                // 3699\n                                                                                                                       // 3700\n    /**                                                                                                                // 3701\n     * @method underline                                                                                               // 3702\n     * @param {jQuery} $editable                                                                                       // 3703\n     * @param {Mixed} value                                                                                            // 3704\n     */                                                                                                                // 3705\n                                                                                                                       // 3706\n    /**                                                                                                                // 3707\n     * @method strikethrough                                                                                           // 3708\n     * @param {jQuery} $editable                                                                                       // 3709\n     * @param {Mixed} value                                                                                            // 3710\n     */                                                                                                                // 3711\n                                                                                                                       // 3712\n    /**                                                                                                                // 3713\n     * @method formatBlock                                                                                             // 3714\n     * @param {jQuery} $editable                                                                                       // 3715\n     * @param {Mixed} value                                                                                            // 3716\n     */                                                                                                                // 3717\n                                                                                                                       // 3718\n    /**                                                                                                                // 3719\n     * @method superscript                                                                                             // 3720\n     * @param {jQuery} $editable                                                                                       // 3721\n     * @param {Mixed} value                                                                                            // 3722\n     */                                                                                                                // 3723\n                                                                                                                       // 3724\n    /**                                                                                                                // 3725\n     * @method subscript                                                                                               // 3726\n     * @param {jQuery} $editable                                                                                       // 3727\n     * @param {Mixed} value                                                                                            // 3728\n     */                                                                                                                // 3729\n                                                                                                                       // 3730\n    /**                                                                                                                // 3731\n     * @method justifyLeft                                                                                             // 3732\n     * @param {jQuery} $editable                                                                                       // 3733\n     * @param {Mixed} value                                                                                            // 3734\n     */                                                                                                                // 3735\n                                                                                                                       // 3736\n    /**                                                                                                                // 3737\n     * @method justifyCenter                                                                                           // 3738\n     * @param {jQuery} $editable                                                                                       // 3739\n     * @param {Mixed} value                                                                                            // 3740\n     */                                                                                                                // 3741\n                                                                                                                       // 3742\n    /**                                                                                                                // 3743\n     * @method justifyRight                                                                                            // 3744\n     * @param {jQuery} $editable                                                                                       // 3745\n     * @param {Mixed} value                                                                                            // 3746\n     */                                                                                                                // 3747\n                                                                                                                       // 3748\n    /**                                                                                                                // 3749\n     * @method justifyFull                                                                                             // 3750\n     * @param {jQuery} $editable                                                                                       // 3751\n     * @param {Mixed} value                                                                                            // 3752\n     */                                                                                                                // 3753\n                                                                                                                       // 3754\n    /**                                                                                                                // 3755\n     * @method formatBlock                                                                                             // 3756\n     * @param {jQuery} $editable                                                                                       // 3757\n     * @param {Mixed} value                                                                                            // 3758\n     */                                                                                                                // 3759\n                                                                                                                       // 3760\n    /**                                                                                                                // 3761\n     * @method removeFormat                                                                                            // 3762\n     * @param {jQuery} $editable                                                                                       // 3763\n     * @param {Mixed} value                                                                                            // 3764\n     */                                                                                                                // 3765\n                                                                                                                       // 3766\n    /**                                                                                                                // 3767\n     * @method backColor                                                                                               // 3768\n     * @param {jQuery} $editable                                                                                       // 3769\n     * @param {Mixed} value                                                                                            // 3770\n     */                                                                                                                // 3771\n                                                                                                                       // 3772\n    /**                                                                                                                // 3773\n     * @method foreColor                                                                                               // 3774\n     * @param {jQuery} $editable                                                                                       // 3775\n     * @param {Mixed} value                                                                                            // 3776\n     */                                                                                                                // 3777\n                                                                                                                       // 3778\n    /**                                                                                                                // 3779\n     * @method insertHorizontalRule                                                                                    // 3780\n     * @param {jQuery} $editable                                                                                       // 3781\n     * @param {Mixed} value                                                                                            // 3782\n     */                                                                                                                // 3783\n                                                                                                                       // 3784\n    /**                                                                                                                // 3785\n     * @method fontName                                                                                                // 3786\n     *                                                                                                                 // 3787\n     * change font name                                                                                                // 3788\n     *                                                                                                                 // 3789\n     * @param {jQuery} $editable                                                                                       // 3790\n     * @param {Mixed} value                                                                                            // 3791\n     */                                                                                                                // 3792\n                                                                                                                       // 3793\n    /* jshint ignore:start */                                                                                          // 3794\n    // native commands(with execCommand), generate function for execCommand                                            // 3795\n    var commands = ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript',                        // 3796\n                    'justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull',                                     // 3797\n                    'formatBlock', 'removeFormat',                                                                     // 3798\n                    'backColor', 'foreColor', 'fontName'];                                                             // 3799\n                                                                                                                       // 3800\n    for (var idx = 0, len = commands.length; idx < len; idx ++) {                                                      // 3801\n      this[commands[idx]] = (function (sCmd) {                                                                         // 3802\n        return function ($editable, value) {                                                                           // 3803\n          beforeCommand($editable);                                                                                    // 3804\n                                                                                                                       // 3805\n          document.execCommand(sCmd, false, value);                                                                    // 3806\n                                                                                                                       // 3807\n          afterCommand($editable, true);                                                                               // 3808\n        };                                                                                                             // 3809\n      })(commands[idx]);                                                                                               // 3810\n    }                                                                                                                  // 3811\n    /* jshint ignore:end */                                                                                            // 3812\n                                                                                                                       // 3813\n    /**                                                                                                                // 3814\n     * @method tab                                                                                                     // 3815\n     *                                                                                                                 // 3816\n     * handle tab key                                                                                                  // 3817\n     *                                                                                                                 // 3818\n     * @param {jQuery} $editable                                                                                       // 3819\n     * @param {Object} options                                                                                         // 3820\n     */                                                                                                                // 3821\n    this.tab = function ($editable, options) {                                                                         // 3822\n      var rng = this.createRange($editable);                                                                           // 3823\n      if (rng.isCollapsed() && rng.isOnCell()) {                                                                       // 3824\n        table.tab(rng);                                                                                                // 3825\n      } else {                                                                                                         // 3826\n        beforeCommand($editable);                                                                                      // 3827\n        typing.insertTab($editable, rng, options.tabsize);                                                             // 3828\n        afterCommand($editable);                                                                                       // 3829\n      }                                                                                                                // 3830\n    };                                                                                                                 // 3831\n                                                                                                                       // 3832\n    /**                                                                                                                // 3833\n     * @method untab                                                                                                   // 3834\n     *                                                                                                                 // 3835\n     * handle shift+tab key                                                                                            // 3836\n     *                                                                                                                 // 3837\n     */                                                                                                                // 3838\n    this.untab = function ($editable) {                                                                                // 3839\n      var rng = this.createRange($editable);                                                                           // 3840\n      if (rng.isCollapsed() && rng.isOnCell()) {                                                                       // 3841\n        table.tab(rng, true);                                                                                          // 3842\n      }                                                                                                                // 3843\n    };                                                                                                                 // 3844\n                                                                                                                       // 3845\n    /**                                                                                                                // 3846\n     * @method insertParagraph                                                                                         // 3847\n     *                                                                                                                 // 3848\n     * insert paragraph                                                                                                // 3849\n     *                                                                                                                 // 3850\n     * @param {Node} $editable                                                                                         // 3851\n     */                                                                                                                // 3852\n    this.insertParagraph = function ($editable) {                                                                      // 3853\n      beforeCommand($editable);                                                                                        // 3854\n      typing.insertParagraph($editable);                                                                               // 3855\n      afterCommand($editable);                                                                                         // 3856\n    };                                                                                                                 // 3857\n                                                                                                                       // 3858\n    /**                                                                                                                // 3859\n     * @method insertOrderedList                                                                                       // 3860\n     *                                                                                                                 // 3861\n     * @param {jQuery} $editable                                                                                       // 3862\n     */                                                                                                                // 3863\n    this.insertOrderedList = function ($editable) {                                                                    // 3864\n      beforeCommand($editable);                                                                                        // 3865\n      bullet.insertOrderedList($editable);                                                                             // 3866\n      afterCommand($editable);                                                                                         // 3867\n    };                                                                                                                 // 3868\n                                                                                                                       // 3869\n    /**                                                                                                                // 3870\n     * @param {jQuery} $editable                                                                                       // 3871\n     */                                                                                                                // 3872\n    this.insertUnorderedList = function ($editable) {                                                                  // 3873\n      beforeCommand($editable);                                                                                        // 3874\n      bullet.insertUnorderedList($editable);                                                                           // 3875\n      afterCommand($editable);                                                                                         // 3876\n    };                                                                                                                 // 3877\n                                                                                                                       // 3878\n    /**                                                                                                                // 3879\n     * @param {jQuery} $editable                                                                                       // 3880\n     */                                                                                                                // 3881\n    this.indent = function ($editable) {                                                                               // 3882\n      beforeCommand($editable);                                                                                        // 3883\n      bullet.indent($editable);                                                                                        // 3884\n      afterCommand($editable);                                                                                         // 3885\n    };                                                                                                                 // 3886\n                                                                                                                       // 3887\n    /**                                                                                                                // 3888\n     * @param {jQuery} $editable                                                                                       // 3889\n     */                                                                                                                // 3890\n    this.outdent = function ($editable) {                                                                              // 3891\n      beforeCommand($editable);                                                                                        // 3892\n      bullet.outdent($editable);                                                                                       // 3893\n      afterCommand($editable);                                                                                         // 3894\n    };                                                                                                                 // 3895\n                                                                                                                       // 3896\n    /**                                                                                                                // 3897\n     * insert image                                                                                                    // 3898\n     *                                                                                                                 // 3899\n     * @param {jQuery} $editable                                                                                       // 3900\n     * @param {String} sUrl                                                                                            // 3901\n     */                                                                                                                // 3902\n    this.insertImage = function ($editable, sUrl, filename) {                                                          // 3903\n      async.createImage(sUrl, filename).then(function ($image) {                                                       // 3904\n        beforeCommand($editable);                                                                                      // 3905\n        $image.css({                                                                                                   // 3906\n          display: '',                                                                                                 // 3907\n          width: Math.min($editable.width(), $image.width())                                                           // 3908\n        });                                                                                                            // 3909\n        range.create().insertNode($image[0]);                                                                          // 3910\n        range.createFromNodeAfter($image[0]).select();                                                                 // 3911\n        afterCommand($editable);                                                                                       // 3912\n      }).fail(function () {                                                                                            // 3913\n        var $holder = dom.makeLayoutInfo($editable).holder();                                                          // 3914\n        handler.bindCustomEvent(                                                                                       // 3915\n          $holder, $editable.data('callbacks'), 'image.upload.error'                                                   // 3916\n        )();                                                                                                           // 3917\n      });                                                                                                              // 3918\n    };                                                                                                                 // 3919\n                                                                                                                       // 3920\n    /**                                                                                                                // 3921\n     * @method insertNode                                                                                              // 3922\n     * insert node                                                                                                     // 3923\n     * @param {Node} $editable                                                                                         // 3924\n     * @param {Node} node                                                                                              // 3925\n     */                                                                                                                // 3926\n    this.insertNode = function ($editable, node) {                                                                     // 3927\n      beforeCommand($editable);                                                                                        // 3928\n      range.create().insertNode(node);                                                                                 // 3929\n      range.createFromNodeAfter(node).select();                                                                        // 3930\n      afterCommand($editable);                                                                                         // 3931\n    };                                                                                                                 // 3932\n                                                                                                                       // 3933\n    /**                                                                                                                // 3934\n     * insert text                                                                                                     // 3935\n     * @param {Node} $editable                                                                                         // 3936\n     * @param {String} text                                                                                            // 3937\n     */                                                                                                                // 3938\n    this.insertText = function ($editable, text) {                                                                     // 3939\n      beforeCommand($editable);                                                                                        // 3940\n      var textNode = range.create().insertNode(dom.createText(text));                                                  // 3941\n      range.create(textNode, dom.nodeLength(textNode)).select();                                                       // 3942\n      afterCommand($editable);                                                                                         // 3943\n    };                                                                                                                 // 3944\n                                                                                                                       // 3945\n    /**                                                                                                                // 3946\n     * paste HTML                                                                                                      // 3947\n     * @param {Node} $editable                                                                                         // 3948\n     * @param {String} markup                                                                                          // 3949\n     */                                                                                                                // 3950\n    this.pasteHTML = function ($editable, markup) {                                                                    // 3951\n      beforeCommand($editable);                                                                                        // 3952\n      var contents = range.create().pasteHTML(markup);                                                                 // 3953\n      range.createFromNodeAfter(list.last(contents)).select();                                                         // 3954\n      afterCommand($editable);                                                                                         // 3955\n    };                                                                                                                 // 3956\n                                                                                                                       // 3957\n    /**                                                                                                                // 3958\n     * formatBlock                                                                                                     // 3959\n     *                                                                                                                 // 3960\n     * @param {jQuery} $editable                                                                                       // 3961\n     * @param {String} tagName                                                                                         // 3962\n     */                                                                                                                // 3963\n    this.formatBlock = function ($editable, tagName) {                                                                 // 3964\n      beforeCommand($editable);                                                                                        // 3965\n      // [workaround] for MSIE, IE need `<`                                                                            // 3966\n      tagName = agent.isMSIE ? '<' + tagName + '>' : tagName;                                                          // 3967\n      document.execCommand('FormatBlock', false, tagName);                                                             // 3968\n      afterCommand($editable);                                                                                         // 3969\n    };                                                                                                                 // 3970\n                                                                                                                       // 3971\n    this.formatPara = function ($editable) {                                                                           // 3972\n      beforeCommand($editable);                                                                                        // 3973\n      this.formatBlock($editable, 'P');                                                                                // 3974\n      afterCommand($editable);                                                                                         // 3975\n    };                                                                                                                 // 3976\n                                                                                                                       // 3977\n    /* jshint ignore:start */                                                                                          // 3978\n    for (var idx = 1; idx <= 6; idx ++) {                                                                              // 3979\n      this['formatH' + idx] = function (idx) {                                                                         // 3980\n        return function ($editable) {                                                                                  // 3981\n          this.formatBlock($editable, 'H' + idx);                                                                      // 3982\n        };                                                                                                             // 3983\n      }(idx);                                                                                                          // 3984\n    };                                                                                                                 // 3985\n    /* jshint ignore:end */                                                                                            // 3986\n                                                                                                                       // 3987\n    /**                                                                                                                // 3988\n     * fontSize                                                                                                        // 3989\n     *                                                                                                                 // 3990\n     * @param {jQuery} $editable                                                                                       // 3991\n     * @param {String} value - px                                                                                      // 3992\n     */                                                                                                                // 3993\n    this.fontSize = function ($editable, value) {                                                                      // 3994\n      var rng = range.create();                                                                                        // 3995\n                                                                                                                       // 3996\n      if (rng.isCollapsed()) {                                                                                         // 3997\n        var spans = style.styleNodes(rng);                                                                             // 3998\n        var firstSpan = list.head(spans);                                                                              // 3999\n                                                                                                                       // 4000\n        $(spans).css({                                                                                                 // 4001\n          'font-size': value + 'px'                                                                                    // 4002\n        });                                                                                                            // 4003\n                                                                                                                       // 4004\n        // [workaround] added styled bogus span for style                                                              // 4005\n        //  - also bogus character needed for cursor position                                                          // 4006\n        if (firstSpan && !dom.nodeLength(firstSpan)) {                                                                 // 4007\n          firstSpan.innerHTML = dom.ZERO_WIDTH_NBSP_CHAR;                                                              // 4008\n          range.createFromNodeAfter(firstSpan.firstChild).select();                                                    // 4009\n          $editable.data(KEY_BOGUS, firstSpan);                                                                        // 4010\n        }                                                                                                              // 4011\n      } else {                                                                                                         // 4012\n        beforeCommand($editable);                                                                                      // 4013\n        $(style.styleNodes(rng)).css({                                                                                 // 4014\n          'font-size': value + 'px'                                                                                    // 4015\n        });                                                                                                            // 4016\n        afterCommand($editable);                                                                                       // 4017\n      }                                                                                                                // 4018\n    };                                                                                                                 // 4019\n                                                                                                                       // 4020\n    /**                                                                                                                // 4021\n     * insert horizontal rule                                                                                          // 4022\n     * @param {jQuery} $editable                                                                                       // 4023\n     */                                                                                                                // 4024\n    this.insertHorizontalRule = function ($editable) {                                                                 // 4025\n      beforeCommand($editable);                                                                                        // 4026\n                                                                                                                       // 4027\n      var rng = range.create();                                                                                        // 4028\n      var hrNode = rng.insertNode($('<HR/>')[0]);                                                                      // 4029\n      if (hrNode.nextSibling) {                                                                                        // 4030\n        range.create(hrNode.nextSibling, 0).normalize().select();                                                      // 4031\n      }                                                                                                                // 4032\n                                                                                                                       // 4033\n      afterCommand($editable);                                                                                         // 4034\n    };                                                                                                                 // 4035\n                                                                                                                       // 4036\n    /**                                                                                                                // 4037\n     * remove bogus node and character                                                                                 // 4038\n     */                                                                                                                // 4039\n    this.removeBogus = function ($editable) {                                                                          // 4040\n      var bogusNode = $editable.data(KEY_BOGUS);                                                                       // 4041\n      if (!bogusNode) {                                                                                                // 4042\n        return;                                                                                                        // 4043\n      }                                                                                                                // 4044\n                                                                                                                       // 4045\n      var textNode = list.find(list.from(bogusNode.childNodes), dom.isText);                                           // 4046\n                                                                                                                       // 4047\n      var bogusCharIdx = textNode.nodeValue.indexOf(dom.ZERO_WIDTH_NBSP_CHAR);                                         // 4048\n      if (bogusCharIdx !== -1) {                                                                                       // 4049\n        textNode.deleteData(bogusCharIdx, 1);                                                                          // 4050\n      }                                                                                                                // 4051\n                                                                                                                       // 4052\n      if (dom.isEmpty(bogusNode)) {                                                                                    // 4053\n        dom.remove(bogusNode);                                                                                         // 4054\n      }                                                                                                                // 4055\n                                                                                                                       // 4056\n      $editable.removeData(KEY_BOGUS);                                                                                 // 4057\n    };                                                                                                                 // 4058\n                                                                                                                       // 4059\n    /**                                                                                                                // 4060\n     * lineHeight                                                                                                      // 4061\n     * @param {jQuery} $editable                                                                                       // 4062\n     * @param {String} value                                                                                           // 4063\n     */                                                                                                                // 4064\n    this.lineHeight = function ($editable, value) {                                                                    // 4065\n      beforeCommand($editable);                                                                                        // 4066\n      style.stylePara(range.create(), {                                                                                // 4067\n        lineHeight: value                                                                                              // 4068\n      });                                                                                                              // 4069\n      afterCommand($editable);                                                                                         // 4070\n    };                                                                                                                 // 4071\n                                                                                                                       // 4072\n    /**                                                                                                                // 4073\n     * unlink                                                                                                          // 4074\n     *                                                                                                                 // 4075\n     * @type command                                                                                                   // 4076\n     *                                                                                                                 // 4077\n     * @param {jQuery} $editable                                                                                       // 4078\n     */                                                                                                                // 4079\n    this.unlink = function ($editable) {                                                                               // 4080\n      var rng = this.createRange($editable);                                                                           // 4081\n      if (rng.isOnAnchor()) {                                                                                          // 4082\n        var anchor = dom.ancestor(rng.sc, dom.isAnchor);                                                               // 4083\n        rng = range.createFromNode(anchor);                                                                            // 4084\n        rng.select();                                                                                                  // 4085\n                                                                                                                       // 4086\n        beforeCommand($editable);                                                                                      // 4087\n        document.execCommand('unlink');                                                                                // 4088\n        afterCommand($editable);                                                                                       // 4089\n      }                                                                                                                // 4090\n    };                                                                                                                 // 4091\n                                                                                                                       // 4092\n    /**                                                                                                                // 4093\n     * create link (command)                                                                                           // 4094\n     *                                                                                                                 // 4095\n     * @param {jQuery} $editable                                                                                       // 4096\n     * @param {Object} linkInfo                                                                                        // 4097\n     * @param {Object} options                                                                                         // 4098\n     */                                                                                                                // 4099\n    this.createLink = function ($editable, linkInfo, options) {                                                        // 4100\n      var linkUrl = linkInfo.url;                                                                                      // 4101\n      var linkText = linkInfo.text;                                                                                    // 4102\n      var isNewWindow = linkInfo.isNewWindow;                                                                          // 4103\n      var rng = linkInfo.range || this.createRange($editable);                                                         // 4104\n      var isTextChanged = rng.toString() !== linkText;                                                                 // 4105\n                                                                                                                       // 4106\n      options = options || dom.makeLayoutInfo($editable).editor().data('options');                                     // 4107\n                                                                                                                       // 4108\n      beforeCommand($editable);                                                                                        // 4109\n                                                                                                                       // 4110\n      if (options.onCreateLink) {                                                                                      // 4111\n        linkUrl = options.onCreateLink(linkUrl);                                                                       // 4112\n      }                                                                                                                // 4113\n                                                                                                                       // 4114\n      var anchors = [];                                                                                                // 4115\n      if (isTextChanged) {                                                                                             // 4116\n        // Create a new link when text changed.                                                                        // 4117\n        var anchor = rng.insertNode($('<A>' + linkText + '</A>')[0]);                                                  // 4118\n        anchors.push(anchor);                                                                                          // 4119\n      } else {                                                                                                         // 4120\n        anchors = style.styleNodes(rng, {                                                                              // 4121\n          nodeName: 'A',                                                                                               // 4122\n          expandClosestSibling: true,                                                                                  // 4123\n          onlyPartialContains: true                                                                                    // 4124\n        });                                                                                                            // 4125\n      }                                                                                                                // 4126\n                                                                                                                       // 4127\n      $.each(anchors, function (idx, anchor) {                                                                         // 4128\n        $(anchor).attr('href', linkUrl);                                                                               // 4129\n        if (isNewWindow) {                                                                                             // 4130\n          $(anchor).attr('target', '_blank');                                                                          // 4131\n        } else {                                                                                                       // 4132\n          $(anchor).removeAttr('target');                                                                              // 4133\n        }                                                                                                              // 4134\n      });                                                                                                              // 4135\n                                                                                                                       // 4136\n      var startRange = range.createFromNodeBefore(list.head(anchors));                                                 // 4137\n      var startPoint = startRange.getStartPoint();                                                                     // 4138\n      var endRange = range.createFromNodeAfter(list.last(anchors));                                                    // 4139\n      var endPoint = endRange.getEndPoint();                                                                           // 4140\n                                                                                                                       // 4141\n      range.create(                                                                                                    // 4142\n        startPoint.node,                                                                                               // 4143\n        startPoint.offset,                                                                                             // 4144\n        endPoint.node,                                                                                                 // 4145\n        endPoint.offset                                                                                                // 4146\n      ).select();                                                                                                      // 4147\n                                                                                                                       // 4148\n      afterCommand($editable);                                                                                         // 4149\n    };                                                                                                                 // 4150\n                                                                                                                       // 4151\n    /**                                                                                                                // 4152\n     * returns link info                                                                                               // 4153\n     *                                                                                                                 // 4154\n     * @return {Object}                                                                                                // 4155\n     * @return {WrappedRange} return.range                                                                             // 4156\n     * @return {String} return.text                                                                                    // 4157\n     * @return {Boolean} [return.isNewWindow=true]                                                                     // 4158\n     * @return {String} [return.url=\"\"]                                                                                // 4159\n     */                                                                                                                // 4160\n    this.getLinkInfo = function ($editable) {                                                                          // 4161\n      this.focus($editable);                                                                                           // 4162\n                                                                                                                       // 4163\n      var rng = range.create().expand(dom.isAnchor);                                                                   // 4164\n                                                                                                                       // 4165\n      // Get the first anchor on range(for edit).                                                                      // 4166\n      var $anchor = $(list.head(rng.nodes(dom.isAnchor)));                                                             // 4167\n                                                                                                                       // 4168\n      return {                                                                                                         // 4169\n        range: rng,                                                                                                    // 4170\n        text: rng.toString(),                                                                                          // 4171\n        isNewWindow: $anchor.length ? $anchor.attr('target') === '_blank' : false,                                     // 4172\n        url: $anchor.length ? $anchor.attr('href') : ''                                                                // 4173\n      };                                                                                                               // 4174\n    };                                                                                                                 // 4175\n                                                                                                                       // 4176\n    /**                                                                                                                // 4177\n     * setting color                                                                                                   // 4178\n     *                                                                                                                 // 4179\n     * @param {Node} $editable                                                                                         // 4180\n     * @param {Object} sObjColor  color code                                                                           // 4181\n     * @param {String} sObjColor.foreColor foreground color                                                            // 4182\n     * @param {String} sObjColor.backColor background color                                                            // 4183\n     */                                                                                                                // 4184\n    this.color = function ($editable, sObjColor) {                                                                     // 4185\n      var oColor = JSON.parse(sObjColor);                                                                              // 4186\n      var foreColor = oColor.foreColor, backColor = oColor.backColor;                                                  // 4187\n                                                                                                                       // 4188\n      beforeCommand($editable);                                                                                        // 4189\n                                                                                                                       // 4190\n      if (foreColor) { document.execCommand('foreColor', false, foreColor); }                                          // 4191\n      if (backColor) { document.execCommand('backColor', false, backColor); }                                          // 4192\n                                                                                                                       // 4193\n      afterCommand($editable);                                                                                         // 4194\n    };                                                                                                                 // 4195\n                                                                                                                       // 4196\n    /**                                                                                                                // 4197\n     * insert Table                                                                                                    // 4198\n     *                                                                                                                 // 4199\n     * @param {Node} $editable                                                                                         // 4200\n     * @param {String} sDim dimension of table (ex : \"5x5\")                                                            // 4201\n     */                                                                                                                // 4202\n    this.insertTable = function ($editable, sDim) {                                                                    // 4203\n      var dimension = sDim.split('x');                                                                                 // 4204\n      beforeCommand($editable);                                                                                        // 4205\n                                                                                                                       // 4206\n      var rng = range.create().deleteContents();                                                                       // 4207\n      rng.insertNode(table.createTable(dimension[0], dimension[1]));                                                   // 4208\n      afterCommand($editable);                                                                                         // 4209\n    };                                                                                                                 // 4210\n                                                                                                                       // 4211\n    /**                                                                                                                // 4212\n     * float me                                                                                                        // 4213\n     *                                                                                                                 // 4214\n     * @param {jQuery} $editable                                                                                       // 4215\n     * @param {String} value                                                                                           // 4216\n     * @param {jQuery} $target                                                                                         // 4217\n     */                                                                                                                // 4218\n    this.floatMe = function ($editable, value, $target) {                                                              // 4219\n      beforeCommand($editable);                                                                                        // 4220\n      // bootstrap                                                                                                     // 4221\n      $target.removeClass('pull-left pull-right');                                                                     // 4222\n      if (value && value !== 'none') {                                                                                 // 4223\n        $target.addClass('pull-' + value);                                                                             // 4224\n      }                                                                                                                // 4225\n                                                                                                                       // 4226\n      // fallback for non-bootstrap                                                                                    // 4227\n      $target.css('float', value);                                                                                     // 4228\n      afterCommand($editable);                                                                                         // 4229\n    };                                                                                                                 // 4230\n                                                                                                                       // 4231\n    /**                                                                                                                // 4232\n     * change image shape                                                                                              // 4233\n     *                                                                                                                 // 4234\n     * @param {jQuery} $editable                                                                                       // 4235\n     * @param {String} value css class                                                                                 // 4236\n     * @param {Node} $target                                                                                           // 4237\n     */                                                                                                                // 4238\n    this.imageShape = function ($editable, value, $target) {                                                           // 4239\n      beforeCommand($editable);                                                                                        // 4240\n                                                                                                                       // 4241\n      $target.removeClass('img-rounded img-circle img-thumbnail');                                                     // 4242\n                                                                                                                       // 4243\n      if (value) {                                                                                                     // 4244\n        $target.addClass(value);                                                                                       // 4245\n      }                                                                                                                // 4246\n                                                                                                                       // 4247\n      afterCommand($editable);                                                                                         // 4248\n    };                                                                                                                 // 4249\n                                                                                                                       // 4250\n    /**                                                                                                                // 4251\n     * resize overlay element                                                                                          // 4252\n     * @param {jQuery} $editable                                                                                       // 4253\n     * @param {String} value                                                                                           // 4254\n     * @param {jQuery} $target - target element                                                                        // 4255\n     */                                                                                                                // 4256\n    this.resize = function ($editable, value, $target) {                                                               // 4257\n      beforeCommand($editable);                                                                                        // 4258\n                                                                                                                       // 4259\n      $target.css({                                                                                                    // 4260\n        width: value * 100 + '%',                                                                                      // 4261\n        height: ''                                                                                                     // 4262\n      });                                                                                                              // 4263\n                                                                                                                       // 4264\n      afterCommand($editable);                                                                                         // 4265\n    };                                                                                                                 // 4266\n                                                                                                                       // 4267\n    /**                                                                                                                // 4268\n     * @param {Position} pos                                                                                           // 4269\n     * @param {jQuery} $target - target element                                                                        // 4270\n     * @param {Boolean} [bKeepRatio] - keep ratio                                                                      // 4271\n     */                                                                                                                // 4272\n    this.resizeTo = function (pos, $target, bKeepRatio) {                                                              // 4273\n      var imageSize;                                                                                                   // 4274\n      if (bKeepRatio) {                                                                                                // 4275\n        var newRatio = pos.y / pos.x;                                                                                  // 4276\n        var ratio = $target.data('ratio');                                                                             // 4277\n        imageSize = {                                                                                                  // 4278\n          width: ratio > newRatio ? pos.x : pos.y / ratio,                                                             // 4279\n          height: ratio > newRatio ? pos.x * ratio : pos.y                                                             // 4280\n        };                                                                                                             // 4281\n      } else {                                                                                                         // 4282\n        imageSize = {                                                                                                  // 4283\n          width: pos.x,                                                                                                // 4284\n          height: pos.y                                                                                                // 4285\n        };                                                                                                             // 4286\n      }                                                                                                                // 4287\n                                                                                                                       // 4288\n      $target.css(imageSize);                                                                                          // 4289\n    };                                                                                                                 // 4290\n                                                                                                                       // 4291\n    /**                                                                                                                // 4292\n     * remove media object                                                                                             // 4293\n     *                                                                                                                 // 4294\n     * @param {jQuery} $editable                                                                                       // 4295\n     * @param {String} value - dummy argument (for keep interface)                                                     // 4296\n     * @param {jQuery} $target - target element                                                                        // 4297\n     */                                                                                                                // 4298\n    this.removeMedia = function ($editable, value, $target) {                                                          // 4299\n      beforeCommand($editable);                                                                                        // 4300\n      $target.detach();                                                                                                // 4301\n                                                                                                                       // 4302\n      handler.bindCustomEvent(                                                                                         // 4303\n        $(), $editable.data('callbacks'), 'media.delete'                                                               // 4304\n      )($target, $editable);                                                                                           // 4305\n                                                                                                                       // 4306\n      afterCommand($editable);                                                                                         // 4307\n    };                                                                                                                 // 4308\n                                                                                                                       // 4309\n    /**                                                                                                                // 4310\n     * set focus                                                                                                       // 4311\n     *                                                                                                                 // 4312\n     * @param $editable                                                                                                // 4313\n     */                                                                                                                // 4314\n    this.focus = function ($editable) {                                                                                // 4315\n      $editable.focus();                                                                                               // 4316\n                                                                                                                       // 4317\n      // [workaround] for firefox bug http://goo.gl/lVfAaI                                                             // 4318\n      if (agent.isFF && !range.create().isOnEditable()) {                                                              // 4319\n        range.createFromNode($editable[0])                                                                             // 4320\n             .normalize()                                                                                              // 4321\n             .collapse()                                                                                               // 4322\n             .select();                                                                                                // 4323\n      }                                                                                                                // 4324\n    };                                                                                                                 // 4325\n                                                                                                                       // 4326\n    /**                                                                                                                // 4327\n     * returns whether contents is empty or not.                                                                       // 4328\n     *                                                                                                                 // 4329\n     * @param {jQuery} $editable                                                                                       // 4330\n     * @return {Boolean}                                                                                               // 4331\n     */                                                                                                                // 4332\n    this.isEmpty = function ($editable) {                                                                              // 4333\n      return dom.isEmpty($editable[0]) || dom.emptyPara === $editable.html();                                          // 4334\n    };                                                                                                                 // 4335\n  };                                                                                                                   // 4336\n                                                                                                                       // 4337\n  /**                                                                                                                  // 4338\n   * @class module.Button                                                                                              // 4339\n   *                                                                                                                   // 4340\n   * Button                                                                                                            // 4341\n   */                                                                                                                  // 4342\n  var Button = function () {                                                                                           // 4343\n    /**                                                                                                                // 4344\n     * update button status                                                                                            // 4345\n     *                                                                                                                 // 4346\n     * @param {jQuery} $container                                                                                      // 4347\n     * @param {Object} styleInfo                                                                                       // 4348\n     */                                                                                                                // 4349\n    this.update = function ($container, styleInfo) {                                                                   // 4350\n      /**                                                                                                              // 4351\n       * handle dropdown's check mark (for fontname, fontsize, lineHeight).                                            // 4352\n       * @param {jQuery} $btn                                                                                          // 4353\n       * @param {Number} value                                                                                         // 4354\n       */                                                                                                              // 4355\n      var checkDropdownMenu = function ($btn, value) {                                                                 // 4356\n        $btn.find('.dropdown-menu li a').each(function () {                                                            // 4357\n          // always compare string to avoid creating another func.                                                     // 4358\n          var isChecked = ($(this).data('value') + '') === (value + '');                                               // 4359\n          this.className = isChecked ? 'checked' : '';                                                                 // 4360\n        });                                                                                                            // 4361\n      };                                                                                                               // 4362\n                                                                                                                       // 4363\n      /**                                                                                                              // 4364\n       * update button state(active or not).                                                                           // 4365\n       *                                                                                                               // 4366\n       * @private                                                                                                      // 4367\n       * @param {String} selector                                                                                      // 4368\n       * @param {Function} pred                                                                                        // 4369\n       */                                                                                                              // 4370\n      var btnState = function (selector, pred) {                                                                       // 4371\n        var $btn = $container.find(selector);                                                                          // 4372\n        $btn.toggleClass('active', pred());                                                                            // 4373\n      };                                                                                                               // 4374\n                                                                                                                       // 4375\n      if (styleInfo.image) {                                                                                           // 4376\n        var $img = $(styleInfo.image);                                                                                 // 4377\n                                                                                                                       // 4378\n        btnState('button[data-event=\"imageShape\"][data-value=\"img-rounded\"]', function () {                            // 4379\n          return $img.hasClass('img-rounded');                                                                         // 4380\n        });                                                                                                            // 4381\n        btnState('button[data-event=\"imageShape\"][data-value=\"img-circle\"]', function () {                             // 4382\n          return $img.hasClass('img-circle');                                                                          // 4383\n        });                                                                                                            // 4384\n        btnState('button[data-event=\"imageShape\"][data-value=\"img-thumbnail\"]', function () {                          // 4385\n          return $img.hasClass('img-thumbnail');                                                                       // 4386\n        });                                                                                                            // 4387\n        btnState('button[data-event=\"imageShape\"]:not([data-value])', function () {                                    // 4388\n          return !$img.is('.img-rounded, .img-circle, .img-thumbnail');                                                // 4389\n        });                                                                                                            // 4390\n                                                                                                                       // 4391\n        var imgFloat = $img.css('float');                                                                              // 4392\n        btnState('button[data-event=\"floatMe\"][data-value=\"left\"]', function () {                                      // 4393\n          return imgFloat === 'left';                                                                                  // 4394\n        });                                                                                                            // 4395\n        btnState('button[data-event=\"floatMe\"][data-value=\"right\"]', function () {                                     // 4396\n          return imgFloat === 'right';                                                                                 // 4397\n        });                                                                                                            // 4398\n        btnState('button[data-event=\"floatMe\"][data-value=\"none\"]', function () {                                      // 4399\n          return imgFloat !== 'left' && imgFloat !== 'right';                                                          // 4400\n        });                                                                                                            // 4401\n                                                                                                                       // 4402\n        var style = $img.attr('style');                                                                                // 4403\n        btnState('button[data-event=\"resize\"][data-value=\"1\"]', function () {                                          // 4404\n          return !!/(^|\\s)(max-)?width\\s*:\\s*100%/.test(style);                                                        // 4405\n        });                                                                                                            // 4406\n        btnState('button[data-event=\"resize\"][data-value=\"0.5\"]', function () {                                        // 4407\n          return !!/(^|\\s)(max-)?width\\s*:\\s*50%/.test(style);                                                         // 4408\n        });                                                                                                            // 4409\n        btnState('button[data-event=\"resize\"][data-value=\"0.25\"]', function () {                                       // 4410\n          return !!/(^|\\s)(max-)?width\\s*:\\s*25%/.test(style);                                                         // 4411\n        });                                                                                                            // 4412\n        return;                                                                                                        // 4413\n      }                                                                                                                // 4414\n                                                                                                                       // 4415\n      // fontname                                                                                                      // 4416\n      var $fontname = $container.find('.note-fontname');                                                               // 4417\n      if ($fontname.length) {                                                                                          // 4418\n        var selectedFont = styleInfo['font-family'];                                                                   // 4419\n        if (!!selectedFont) {                                                                                          // 4420\n                                                                                                                       // 4421\n          var list = selectedFont.split(',');                                                                          // 4422\n          for (var i = 0, len = list.length; i < len; i++) {                                                           // 4423\n            selectedFont = list[i].replace(/[\\'\\\"]/g, '').replace(/\\s+$/, '').replace(/^\\s+/, '');                     // 4424\n            if (agent.isFontInstalled(selectedFont)) {                                                                 // 4425\n              break;                                                                                                   // 4426\n            }                                                                                                          // 4427\n          }                                                                                                            // 4428\n                                                                                                                       // 4429\n          $fontname.find('.note-current-fontname').text(selectedFont);                                                 // 4430\n          checkDropdownMenu($fontname, selectedFont);                                                                  // 4431\n                                                                                                                       // 4432\n        }                                                                                                              // 4433\n      }                                                                                                                // 4434\n                                                                                                                       // 4435\n      // fontsize                                                                                                      // 4436\n      var $fontsize = $container.find('.note-fontsize');                                                               // 4437\n      $fontsize.find('.note-current-fontsize').text(styleInfo['font-size']);                                           // 4438\n      checkDropdownMenu($fontsize, parseFloat(styleInfo['font-size']));                                                // 4439\n                                                                                                                       // 4440\n      // lineheight                                                                                                    // 4441\n      var $lineHeight = $container.find('.note-height');                                                               // 4442\n      checkDropdownMenu($lineHeight, parseFloat(styleInfo['line-height']));                                            // 4443\n                                                                                                                       // 4444\n      btnState('button[data-event=\"bold\"]', function () {                                                              // 4445\n        return styleInfo['font-bold'] === 'bold';                                                                      // 4446\n      });                                                                                                              // 4447\n      btnState('button[data-event=\"italic\"]', function () {                                                            // 4448\n        return styleInfo['font-italic'] === 'italic';                                                                  // 4449\n      });                                                                                                              // 4450\n      btnState('button[data-event=\"underline\"]', function () {                                                         // 4451\n        return styleInfo['font-underline'] === 'underline';                                                            // 4452\n      });                                                                                                              // 4453\n      btnState('button[data-event=\"strikethrough\"]', function () {                                                     // 4454\n        return styleInfo['font-strikethrough'] === 'strikethrough';                                                    // 4455\n      });                                                                                                              // 4456\n      btnState('button[data-event=\"superscript\"]', function () {                                                       // 4457\n        return styleInfo['font-superscript'] === 'superscript';                                                        // 4458\n      });                                                                                                              // 4459\n      btnState('button[data-event=\"subscript\"]', function () {                                                         // 4460\n        return styleInfo['font-subscript'] === 'subscript';                                                            // 4461\n      });                                                                                                              // 4462\n      btnState('button[data-event=\"justifyLeft\"]', function () {                                                       // 4463\n        return styleInfo['text-align'] === 'left' || styleInfo['text-align'] === 'start';                              // 4464\n      });                                                                                                              // 4465\n      btnState('button[data-event=\"justifyCenter\"]', function () {                                                     // 4466\n        return styleInfo['text-align'] === 'center';                                                                   // 4467\n      });                                                                                                              // 4468\n      btnState('button[data-event=\"justifyRight\"]', function () {                                                      // 4469\n        return styleInfo['text-align'] === 'right';                                                                    // 4470\n      });                                                                                                              // 4471\n      btnState('button[data-event=\"justifyFull\"]', function () {                                                       // 4472\n        return styleInfo['text-align'] === 'justify';                                                                  // 4473\n      });                                                                                                              // 4474\n      btnState('button[data-event=\"insertUnorderedList\"]', function () {                                               // 4475\n        return styleInfo['list-style'] === 'unordered';                                                                // 4476\n      });                                                                                                              // 4477\n      btnState('button[data-event=\"insertOrderedList\"]', function () {                                                 // 4478\n        return styleInfo['list-style'] === 'ordered';                                                                  // 4479\n      });                                                                                                              // 4480\n    };                                                                                                                 // 4481\n                                                                                                                       // 4482\n    /**                                                                                                                // 4483\n     * update recent color                                                                                             // 4484\n     *                                                                                                                 // 4485\n     * @param {Node} button                                                                                            // 4486\n     * @param {String} eventName                                                                                       // 4487\n     * @param {Mixed} value                                                                                            // 4488\n     */                                                                                                                // 4489\n    this.updateRecentColor = function (button, eventName, value) {                                                     // 4490\n      var $color = $(button).closest('.note-color');                                                                   // 4491\n      var $recentColor = $color.find('.note-recent-color');                                                            // 4492\n      var colorInfo = JSON.parse($recentColor.attr('data-value'));                                                     // 4493\n      colorInfo[eventName] = value;                                                                                    // 4494\n      $recentColor.attr('data-value', JSON.stringify(colorInfo));                                                      // 4495\n      var sKey = eventName === 'backColor' ? 'background-color' : 'color';                                             // 4496\n      $recentColor.find('i').css(sKey, value);                                                                         // 4497\n    };                                                                                                                 // 4498\n  };                                                                                                                   // 4499\n                                                                                                                       // 4500\n  /**                                                                                                                  // 4501\n   * @class module.Toolbar                                                                                             // 4502\n   *                                                                                                                   // 4503\n   * Toolbar                                                                                                           // 4504\n   */                                                                                                                  // 4505\n  var Toolbar = function () {                                                                                          // 4506\n    var button = new Button();                                                                                         // 4507\n                                                                                                                       // 4508\n    this.update = function ($toolbar, styleInfo) {                                                                     // 4509\n      button.update($toolbar, styleInfo);                                                                              // 4510\n    };                                                                                                                 // 4511\n                                                                                                                       // 4512\n    /**                                                                                                                // 4513\n     * @param {Node} button                                                                                            // 4514\n     * @param {String} eventName                                                                                       // 4515\n     * @param {String} value                                                                                           // 4516\n     */                                                                                                                // 4517\n    this.updateRecentColor = function (buttonNode, eventName, value) {                                                 // 4518\n      button.updateRecentColor(buttonNode, eventName, value);                                                          // 4519\n    };                                                                                                                 // 4520\n                                                                                                                       // 4521\n    /**                                                                                                                // 4522\n     * activate buttons exclude codeview                                                                               // 4523\n     * @param {jQuery} $toolbar                                                                                        // 4524\n     */                                                                                                                // 4525\n    this.activate = function ($toolbar) {                                                                              // 4526\n      $toolbar.find('button')                                                                                          // 4527\n              .not('button[data-event=\"codeview\"]')                                                                    // 4528\n              .removeClass('disabled');                                                                                // 4529\n    };                                                                                                                 // 4530\n                                                                                                                       // 4531\n    /**                                                                                                                // 4532\n     * deactivate buttons exclude codeview                                                                             // 4533\n     * @param {jQuery} $toolbar                                                                                        // 4534\n     */                                                                                                                // 4535\n    this.deactivate = function ($toolbar) {                                                                            // 4536\n      $toolbar.find('button')                                                                                          // 4537\n              .not('button[data-event=\"codeview\"]')                                                                    // 4538\n              .addClass('disabled');                                                                                   // 4539\n    };                                                                                                                 // 4540\n                                                                                                                       // 4541\n    /**                                                                                                                // 4542\n     * @param {jQuery} $container                                                                                      // 4543\n     * @param {Boolean} [bFullscreen=false]                                                                            // 4544\n     */                                                                                                                // 4545\n    this.updateFullscreen = function ($container, bFullscreen) {                                                       // 4546\n      var $btn = $container.find('button[data-event=\"fullscreen\"]');                                                   // 4547\n      $btn.toggleClass('active', bFullscreen);                                                                         // 4548\n    };                                                                                                                 // 4549\n                                                                                                                       // 4550\n    /**                                                                                                                // 4551\n     * @param {jQuery} $container                                                                                      // 4552\n     * @param {Boolean} [isCodeview=false]                                                                             // 4553\n     */                                                                                                                // 4554\n    this.updateCodeview = function ($container, isCodeview) {                                                          // 4555\n      var $btn = $container.find('button[data-event=\"codeview\"]');                                                     // 4556\n      $btn.toggleClass('active', isCodeview);                                                                          // 4557\n                                                                                                                       // 4558\n      if (isCodeview) {                                                                                                // 4559\n        this.deactivate($container);                                                                                   // 4560\n      } else {                                                                                                         // 4561\n        this.activate($container);                                                                                     // 4562\n      }                                                                                                                // 4563\n    };                                                                                                                 // 4564\n                                                                                                                       // 4565\n    /**                                                                                                                // 4566\n     * get button in toolbar                                                                                           // 4567\n     *                                                                                                                 // 4568\n     * @param {jQuery} $editable                                                                                       // 4569\n     * @param {String} name                                                                                            // 4570\n     * @return {jQuery}                                                                                                // 4571\n     */                                                                                                                // 4572\n    this.get = function ($editable, name) {                                                                            // 4573\n      var $toolbar = dom.makeLayoutInfo($editable).toolbar();                                                          // 4574\n                                                                                                                       // 4575\n      return $toolbar.find('[data-name=' + name + ']');                                                                // 4576\n    };                                                                                                                 // 4577\n                                                                                                                       // 4578\n    /**                                                                                                                // 4579\n     * set button state                                                                                                // 4580\n     * @param {jQuery} $editable                                                                                       // 4581\n     * @param {String} name                                                                                            // 4582\n     * @param {Boolean} [isActive=true]                                                                                // 4583\n     */                                                                                                                // 4584\n    this.setButtonState = function ($editable, name, isActive) {                                                       // 4585\n      isActive = (isActive === false) ? false : true;                                                                  // 4586\n                                                                                                                       // 4587\n      var $button = this.get($editable, name);                                                                         // 4588\n      $button.toggleClass('active', isActive);                                                                         // 4589\n    };                                                                                                                 // 4590\n  };                                                                                                                   // 4591\n                                                                                                                       // 4592\n  var EDITABLE_PADDING = 24;                                                                                           // 4593\n                                                                                                                       // 4594\n  var Statusbar = function () {                                                                                        // 4595\n    var $document = $(document);                                                                                       // 4596\n                                                                                                                       // 4597\n    this.attach = function (layoutInfo, options) {                                                                     // 4598\n      if (!options.disableResizeEditor) {                                                                              // 4599\n        layoutInfo.statusbar().on('mousedown', hStatusbarMousedown);                                                   // 4600\n      }                                                                                                                // 4601\n    };                                                                                                                 // 4602\n                                                                                                                       // 4603\n    /**                                                                                                                // 4604\n     * `mousedown` event handler on statusbar                                                                          // 4605\n     *                                                                                                                 // 4606\n     * @param {MouseEvent} event                                                                                       // 4607\n     */                                                                                                                // 4608\n    var hStatusbarMousedown = function (event) {                                                                       // 4609\n      event.preventDefault();                                                                                          // 4610\n      event.stopPropagation();                                                                                         // 4611\n                                                                                                                       // 4612\n      var $editable = dom.makeLayoutInfo(event.target).editable();                                                     // 4613\n      var editableTop = $editable.offset().top - $document.scrollTop();                                                // 4614\n                                                                                                                       // 4615\n      var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);                                        // 4616\n      var options = layoutInfo.editor().data('options');                                                               // 4617\n                                                                                                                       // 4618\n      $document.on('mousemove', function (event) {                                                                     // 4619\n        var nHeight = event.clientY - (editableTop + EDITABLE_PADDING);                                                // 4620\n                                                                                                                       // 4621\n        nHeight = (options.minHeight > 0) ? Math.max(nHeight, options.minHeight) : nHeight;                            // 4622\n        nHeight = (options.maxHeight > 0) ? Math.min(nHeight, options.maxHeight) : nHeight;                            // 4623\n                                                                                                                       // 4624\n        $editable.height(nHeight);                                                                                     // 4625\n      }).one('mouseup', function () {                                                                                  // 4626\n        $document.off('mousemove');                                                                                    // 4627\n      });                                                                                                              // 4628\n    };                                                                                                                 // 4629\n  };                                                                                                                   // 4630\n                                                                                                                       // 4631\n  /**                                                                                                                  // 4632\n   * @class module.Popover                                                                                             // 4633\n   *                                                                                                                   // 4634\n   * Popover (http://getbootstrap.com/javascript/#popovers)                                                            // 4635\n   *                                                                                                                   // 4636\n   */                                                                                                                  // 4637\n  var Popover = function () {                                                                                          // 4638\n    var button = new Button();                                                                                         // 4639\n                                                                                                                       // 4640\n    /**                                                                                                                // 4641\n     * returns position from placeholder                                                                               // 4642\n     *                                                                                                                 // 4643\n     * @private                                                                                                        // 4644\n     * @param {Node} placeholder                                                                                       // 4645\n     * @param {Object} options                                                                                         // 4646\n     * @param {Boolean} options.isAirMode                                                                              // 4647\n     * @return {Position}                                                                                              // 4648\n     */                                                                                                                // 4649\n    var posFromPlaceholder = function (placeholder, options) {                                                         // 4650\n      var isAirMode = options && options.isAirMode;                                                                    // 4651\n      var isLeftTop = options && options.isLeftTop;                                                                    // 4652\n                                                                                                                       // 4653\n      var $placeholder = $(placeholder);                                                                               // 4654\n      var pos = isAirMode ? $placeholder.offset() : $placeholder.position();                                           // 4655\n      var height = isLeftTop ? 0 : $placeholder.outerHeight(true); // include margin                                   // 4656\n                                                                                                                       // 4657\n      // popover below placeholder.                                                                                    // 4658\n      return {                                                                                                         // 4659\n        left: pos.left,                                                                                                // 4660\n        top: pos.top + height                                                                                          // 4661\n      };                                                                                                               // 4662\n    };                                                                                                                 // 4663\n                                                                                                                       // 4664\n    /**                                                                                                                // 4665\n     * show popover                                                                                                    // 4666\n     *                                                                                                                 // 4667\n     * @private                                                                                                        // 4668\n     * @param {jQuery} popover                                                                                         // 4669\n     * @param {Position} pos                                                                                           // 4670\n     */                                                                                                                // 4671\n    var showPopover = function ($popover, pos) {                                                                       // 4672\n      $popover.css({                                                                                                   // 4673\n        display: 'block',                                                                                              // 4674\n        left: pos.left,                                                                                                // 4675\n        top: pos.top                                                                                                   // 4676\n      });                                                                                                              // 4677\n    };                                                                                                                 // 4678\n                                                                                                                       // 4679\n    var PX_POPOVER_ARROW_OFFSET_X = 20;                                                                                // 4680\n                                                                                                                       // 4681\n    /**                                                                                                                // 4682\n     * update current state                                                                                            // 4683\n     * @param {jQuery} $popover - popover container                                                                    // 4684\n     * @param {Object} styleInfo - style object                                                                        // 4685\n     * @param {Boolean} isAirMode                                                                                      // 4686\n     */                                                                                                                // 4687\n    this.update = function ($popover, styleInfo, isAirMode) {                                                          // 4688\n      button.update($popover, styleInfo);                                                                              // 4689\n                                                                                                                       // 4690\n      var $linkPopover = $popover.find('.note-link-popover');                                                          // 4691\n      if (styleInfo.anchor) {                                                                                          // 4692\n        var $anchor = $linkPopover.find('a');                                                                          // 4693\n        var href = $(styleInfo.anchor).attr('href');                                                                   // 4694\n        var target = $(styleInfo.anchor).attr('target');                                                               // 4695\n        $anchor.attr('href', href).html(href);                                                                         // 4696\n        if (!target) {                                                                                                 // 4697\n          $anchor.removeAttr('target');                                                                                // 4698\n        } else {                                                                                                       // 4699\n          $anchor.attr('target', '_blank');                                                                            // 4700\n        }                                                                                                              // 4701\n        showPopover($linkPopover, posFromPlaceholder(styleInfo.anchor, {                                               // 4702\n          isAirMode: isAirMode                                                                                         // 4703\n        }));                                                                                                           // 4704\n      } else {                                                                                                         // 4705\n        $linkPopover.hide();                                                                                           // 4706\n      }                                                                                                                // 4707\n                                                                                                                       // 4708\n      var $imagePopover = $popover.find('.note-image-popover');                                                        // 4709\n      if (styleInfo.image) {                                                                                           // 4710\n        showPopover($imagePopover, posFromPlaceholder(styleInfo.image, {                                               // 4711\n          isAirMode: isAirMode,                                                                                        // 4712\n          isLeftTop: true                                                                                              // 4713\n        }));                                                                                                           // 4714\n      } else {                                                                                                         // 4715\n        $imagePopover.hide();                                                                                          // 4716\n      }                                                                                                                // 4717\n                                                                                                                       // 4718\n      var $airPopover = $popover.find('.note-air-popover');                                                            // 4719\n      if (isAirMode && styleInfo.range && !styleInfo.range.isCollapsed()) {                                            // 4720\n        var rect = list.last(styleInfo.range.getClientRects());                                                        // 4721\n        if (rect) {                                                                                                    // 4722\n          var bnd = func.rect2bnd(rect);                                                                               // 4723\n          showPopover($airPopover, {                                                                                   // 4724\n            left: Math.max(bnd.left + bnd.width / 2 - PX_POPOVER_ARROW_OFFSET_X, 0),                                   // 4725\n            top: bnd.top + bnd.height                                                                                  // 4726\n          });                                                                                                          // 4727\n        }                                                                                                              // 4728\n      } else {                                                                                                         // 4729\n        $airPopover.hide();                                                                                            // 4730\n      }                                                                                                                // 4731\n    };                                                                                                                 // 4732\n                                                                                                                       // 4733\n    /**                                                                                                                // 4734\n     * @param {Node} button                                                                                            // 4735\n     * @param {String} eventName                                                                                       // 4736\n     * @param {String} value                                                                                           // 4737\n     */                                                                                                                // 4738\n    this.updateRecentColor = function (button, eventName, value) {                                                     // 4739\n      button.updateRecentColor(button, eventName, value);                                                              // 4740\n    };                                                                                                                 // 4741\n                                                                                                                       // 4742\n    /**                                                                                                                // 4743\n     * hide all popovers                                                                                               // 4744\n     * @param {jQuery} $popover - popover container                                                                    // 4745\n     */                                                                                                                // 4746\n    this.hide = function ($popover) {                                                                                  // 4747\n      $popover.children().hide();                                                                                      // 4748\n    };                                                                                                                 // 4749\n  };                                                                                                                   // 4750\n                                                                                                                       // 4751\n  /**                                                                                                                  // 4752\n   * @class module.Handle                                                                                              // 4753\n   *                                                                                                                   // 4754\n   * Handle                                                                                                            // 4755\n   */                                                                                                                  // 4756\n  var Handle = function (handler) {                                                                                    // 4757\n    var $document = $(document);                                                                                       // 4758\n                                                                                                                       // 4759\n    /**                                                                                                                // 4760\n     * `mousedown` event handler on $handle                                                                            // 4761\n     *  - controlSizing: resize image                                                                                  // 4762\n     *                                                                                                                 // 4763\n     * @param {MouseEvent} event                                                                                       // 4764\n     */                                                                                                                // 4765\n    var hHandleMousedown = function (event) {                                                                          // 4766\n      if (dom.isControlSizing(event.target)) {                                                                         // 4767\n        event.preventDefault();                                                                                        // 4768\n        event.stopPropagation();                                                                                       // 4769\n                                                                                                                       // 4770\n        var layoutInfo = dom.makeLayoutInfo(event.target),                                                             // 4771\n            $handle = layoutInfo.handle(),                                                                             // 4772\n            $popover = layoutInfo.popover(),                                                                           // 4773\n            $editable = layoutInfo.editable(),                                                                         // 4774\n            $editor = layoutInfo.editor();                                                                             // 4775\n                                                                                                                       // 4776\n        var target = $handle.find('.note-control-selection').data('target'),                                           // 4777\n            $target = $(target), posStart = $target.offset(),                                                          // 4778\n            scrollTop = $document.scrollTop();                                                                         // 4779\n                                                                                                                       // 4780\n        var isAirMode = $editor.data('options').airMode;                                                               // 4781\n                                                                                                                       // 4782\n        $document.on('mousemove', function (event) {                                                                   // 4783\n          handler.invoke('editor.resizeTo', {                                                                          // 4784\n            x: event.clientX - posStart.left,                                                                          // 4785\n            y: event.clientY - (posStart.top - scrollTop)                                                              // 4786\n          }, $target, !event.shiftKey);                                                                                // 4787\n                                                                                                                       // 4788\n          handler.invoke('handle.update', $handle, {image: target}, isAirMode);                                        // 4789\n          handler.invoke('popover.update', $popover, {image: target}, isAirMode);                                      // 4790\n        }).one('mouseup', function () {                                                                                // 4791\n          $document.off('mousemove');                                                                                  // 4792\n          handler.invoke('editor.afterCommand', $editable);                                                            // 4793\n        });                                                                                                            // 4794\n                                                                                                                       // 4795\n        if (!$target.data('ratio')) { // original ratio.                                                               // 4796\n          $target.data('ratio', $target.height() / $target.width());                                                   // 4797\n        }                                                                                                              // 4798\n      }                                                                                                                // 4799\n    };                                                                                                                 // 4800\n                                                                                                                       // 4801\n    this.attach = function (layoutInfo) {                                                                              // 4802\n      layoutInfo.handle().on('mousedown', hHandleMousedown);                                                           // 4803\n    };                                                                                                                 // 4804\n                                                                                                                       // 4805\n    /**                                                                                                                // 4806\n     * update handle                                                                                                   // 4807\n     * @param {jQuery} $handle                                                                                         // 4808\n     * @param {Object} styleInfo                                                                                       // 4809\n     * @param {Boolean} isAirMode                                                                                      // 4810\n     */                                                                                                                // 4811\n    this.update = function ($handle, styleInfo, isAirMode) {                                                           // 4812\n      var $selection = $handle.find('.note-control-selection');                                                        // 4813\n      if (styleInfo.image) {                                                                                           // 4814\n        var $image = $(styleInfo.image);                                                                               // 4815\n        var pos = isAirMode ? $image.offset() : $image.position();                                                     // 4816\n                                                                                                                       // 4817\n        // include margin                                                                                              // 4818\n        var imageSize = {                                                                                              // 4819\n          w: $image.outerWidth(true),                                                                                  // 4820\n          h: $image.outerHeight(true)                                                                                  // 4821\n        };                                                                                                             // 4822\n                                                                                                                       // 4823\n        $selection.css({                                                                                               // 4824\n          display: 'block',                                                                                            // 4825\n          left: pos.left,                                                                                              // 4826\n          top: pos.top,                                                                                                // 4827\n          width: imageSize.w,                                                                                          // 4828\n          height: imageSize.h                                                                                          // 4829\n        }).data('target', styleInfo.image); // save current image element.                                             // 4830\n        var sizingText = imageSize.w + 'x' + imageSize.h;                                                              // 4831\n        $selection.find('.note-control-selection-info').text(sizingText);                                              // 4832\n      } else {                                                                                                         // 4833\n        $selection.hide();                                                                                             // 4834\n      }                                                                                                                // 4835\n    };                                                                                                                 // 4836\n                                                                                                                       // 4837\n    /**                                                                                                                // 4838\n     * hide                                                                                                            // 4839\n     *                                                                                                                 // 4840\n     * @param {jQuery} $handle                                                                                         // 4841\n     */                                                                                                                // 4842\n    this.hide = function ($handle) {                                                                                   // 4843\n      $handle.children().hide();                                                                                       // 4844\n    };                                                                                                                 // 4845\n  };                                                                                                                   // 4846\n                                                                                                                       // 4847\n  var Fullscreen = function (handler) {                                                                                // 4848\n    var $window = $(window);                                                                                           // 4849\n    var $scrollbar = $('html, body');                                                                                  // 4850\n                                                                                                                       // 4851\n    /**                                                                                                                // 4852\n     * toggle fullscreen                                                                                               // 4853\n     *                                                                                                                 // 4854\n     * @param {Object} layoutInfo                                                                                      // 4855\n     */                                                                                                                // 4856\n    this.toggle = function (layoutInfo) {                                                                              // 4857\n                                                                                                                       // 4858\n      var $editor = layoutInfo.editor(),                                                                               // 4859\n          $toolbar = layoutInfo.toolbar(),                                                                             // 4860\n          $editable = layoutInfo.editable(),                                                                           // 4861\n          $codable = layoutInfo.codable();                                                                             // 4862\n                                                                                                                       // 4863\n      var resize = function (size) {                                                                                   // 4864\n        $editable.css('height', size.h);                                                                               // 4865\n        $codable.css('height', size.h);                                                                                // 4866\n        if ($codable.data('cmeditor')) {                                                                               // 4867\n          $codable.data('cmeditor').setsize(null, size.h);                                                             // 4868\n        }                                                                                                              // 4869\n      };                                                                                                               // 4870\n                                                                                                                       // 4871\n      $editor.toggleClass('fullscreen');                                                                               // 4872\n      var isFullscreen = $editor.hasClass('fullscreen');                                                               // 4873\n      if (isFullscreen) {                                                                                              // 4874\n        $editable.data('orgheight', $editable.css('height'));                                                          // 4875\n                                                                                                                       // 4876\n        $window.on('resize', function () {                                                                             // 4877\n          resize({                                                                                                     // 4878\n            h: $window.height() - $toolbar.outerHeight()                                                               // 4879\n          });                                                                                                          // 4880\n        }).trigger('resize');                                                                                          // 4881\n                                                                                                                       // 4882\n        $scrollbar.css('overflow', 'hidden');                                                                          // 4883\n      } else {                                                                                                         // 4884\n        $window.off('resize');                                                                                         // 4885\n        resize({                                                                                                       // 4886\n          h: $editable.data('orgheight')                                                                               // 4887\n        });                                                                                                            // 4888\n        $scrollbar.css('overflow', 'visible');                                                                         // 4889\n      }                                                                                                                // 4890\n                                                                                                                       // 4891\n      handler.invoke('toolbar.updateFullscreen', $toolbar, isFullscreen);                                              // 4892\n    };                                                                                                                 // 4893\n  };                                                                                                                   // 4894\n                                                                                                                       // 4895\n                                                                                                                       // 4896\n  var CodeMirror;                                                                                                      // 4897\n  if (agent.hasCodeMirror) {                                                                                           // 4898\n    if (agent.isSupportAmd) {                                                                                          // 4899\n      require(['CodeMirror'], function (cm) {                                                                          // 4900\n        CodeMirror = cm;                                                                                               // 4901\n      });                                                                                                              // 4902\n    } else {                                                                                                           // 4903\n      CodeMirror = window.CodeMirror;                                                                                  // 4904\n    }                                                                                                                  // 4905\n  }                                                                                                                    // 4906\n                                                                                                                       // 4907\n  /**                                                                                                                  // 4908\n   * @class Codeview                                                                                                   // 4909\n   */                                                                                                                  // 4910\n  var Codeview = function (handler) {                                                                                  // 4911\n                                                                                                                       // 4912\n    this.sync = function (layoutInfo) {                                                                                // 4913\n      var isCodeview = handler.invoke('codeview.isActivated', layoutInfo);                                             // 4914\n      if (isCodeview && agent.hasCodeMirror) {                                                                         // 4915\n        layoutInfo.codable().data('cmEditor').save();                                                                  // 4916\n      }                                                                                                                // 4917\n    };                                                                                                                 // 4918\n                                                                                                                       // 4919\n    /**                                                                                                                // 4920\n     * @param {Object} layoutInfo                                                                                      // 4921\n     * @return {Boolean}                                                                                               // 4922\n     */                                                                                                                // 4923\n    this.isActivated = function (layoutInfo) {                                                                         // 4924\n      var $editor = layoutInfo.editor();                                                                               // 4925\n      return $editor.hasClass('codeview');                                                                             // 4926\n    };                                                                                                                 // 4927\n                                                                                                                       // 4928\n    /**                                                                                                                // 4929\n     * toggle codeview                                                                                                 // 4930\n     *                                                                                                                 // 4931\n     * @param {Object} layoutInfo                                                                                      // 4932\n     */                                                                                                                // 4933\n    this.toggle = function (layoutInfo) {                                                                              // 4934\n      if (this.isActivated(layoutInfo)) {                                                                              // 4935\n        this.deactivate(layoutInfo);                                                                                   // 4936\n      } else {                                                                                                         // 4937\n        this.activate(layoutInfo);                                                                                     // 4938\n      }                                                                                                                // 4939\n    };                                                                                                                 // 4940\n                                                                                                                       // 4941\n    /**                                                                                                                // 4942\n     * activate code view                                                                                              // 4943\n     *                                                                                                                 // 4944\n     * @param {Object} layoutInfo                                                                                      // 4945\n     */                                                                                                                // 4946\n    this.activate = function (layoutInfo) {                                                                            // 4947\n      var $editor = layoutInfo.editor(),                                                                               // 4948\n          $toolbar = layoutInfo.toolbar(),                                                                             // 4949\n          $editable = layoutInfo.editable(),                                                                           // 4950\n          $codable = layoutInfo.codable(),                                                                             // 4951\n          $popover = layoutInfo.popover(),                                                                             // 4952\n          $handle = layoutInfo.handle();                                                                               // 4953\n                                                                                                                       // 4954\n      var options = $editor.data('options');                                                                           // 4955\n                                                                                                                       // 4956\n      $codable.val(dom.html($editable, options.prettifyHtml));                                                         // 4957\n      $codable.height($editable.height());                                                                             // 4958\n                                                                                                                       // 4959\n      handler.invoke('toolbar.updateCodeview', $toolbar, true);                                                        // 4960\n      handler.invoke('popover.hide', $popover);                                                                        // 4961\n      handler.invoke('handle.hide', $handle);                                                                          // 4962\n                                                                                                                       // 4963\n      $editor.addClass('codeview');                                                                                    // 4964\n                                                                                                                       // 4965\n      $codable.focus();                                                                                                // 4966\n                                                                                                                       // 4967\n      // activate CodeMirror as codable                                                                                // 4968\n      if (agent.hasCodeMirror) {                                                                                       // 4969\n        var cmEditor = CodeMirror.fromTextArea($codable[0], options.codemirror);                                       // 4970\n                                                                                                                       // 4971\n        // CodeMirror TernServer                                                                                       // 4972\n        if (options.codemirror.tern) {                                                                                 // 4973\n          var server = new CodeMirror.TernServer(options.codemirror.tern);                                             // 4974\n          cmEditor.ternServer = server;                                                                                // 4975\n          cmEditor.on('cursorActivity', function (cm) {                                                                // 4976\n            server.updateArgHints(cm);                                                                                 // 4977\n          });                                                                                                          // 4978\n        }                                                                                                              // 4979\n                                                                                                                       // 4980\n        // CodeMirror hasn't Padding.                                                                                  // 4981\n        cmEditor.setSize(null, $editable.outerHeight());                                                               // 4982\n        $codable.data('cmEditor', cmEditor);                                                                           // 4983\n      }                                                                                                                // 4984\n    };                                                                                                                 // 4985\n                                                                                                                       // 4986\n    /**                                                                                                                // 4987\n     * deactivate code view                                                                                            // 4988\n     *                                                                                                                 // 4989\n     * @param {Object} layoutInfo                                                                                      // 4990\n     */                                                                                                                // 4991\n    this.deactivate = function (layoutInfo) {                                                                          // 4992\n      var $holder = layoutInfo.holder(),                                                                               // 4993\n          $editor = layoutInfo.editor(),                                                                               // 4994\n          $toolbar = layoutInfo.toolbar(),                                                                             // 4995\n          $editable = layoutInfo.editable(),                                                                           // 4996\n          $codable = layoutInfo.codable();                                                                             // 4997\n                                                                                                                       // 4998\n      var options = $editor.data('options');                                                                           // 4999\n                                                                                                                       // 5000\n      // deactivate CodeMirror as codable                                                                              // 5001\n      if (agent.hasCodeMirror) {                                                                                       // 5002\n        var cmEditor = $codable.data('cmEditor');                                                                      // 5003\n        $codable.val(cmEditor.getValue());                                                                             // 5004\n        cmEditor.toTextArea();                                                                                         // 5005\n      }                                                                                                                // 5006\n                                                                                                                       // 5007\n      var value = dom.value($codable, options.prettifyHtml) || dom.emptyPara;                                          // 5008\n      var isChange = $editable.html() !== value;                                                                       // 5009\n                                                                                                                       // 5010\n      $editable.html(value);                                                                                           // 5011\n      $editable.height(options.height ? $codable.height() : 'auto');                                                   // 5012\n      $editor.removeClass('codeview');                                                                                 // 5013\n                                                                                                                       // 5014\n      if (isChange) {                                                                                                  // 5015\n        handler.bindCustomEvent(                                                                                       // 5016\n          $holder, $editable.data('callbacks'), 'change'                                                               // 5017\n        )($editable.html(), $editable);                                                                                // 5018\n      }                                                                                                                // 5019\n                                                                                                                       // 5020\n      $editable.focus();                                                                                               // 5021\n                                                                                                                       // 5022\n      handler.invoke('toolbar.updateCodeview', $toolbar, false);                                                       // 5023\n    };                                                                                                                 // 5024\n  };                                                                                                                   // 5025\n                                                                                                                       // 5026\n  var DragAndDrop = function (handler) {                                                                               // 5027\n    var $document = $(document);                                                                                       // 5028\n                                                                                                                       // 5029\n    /**                                                                                                                // 5030\n     * attach Drag and Drop Events                                                                                     // 5031\n     *                                                                                                                 // 5032\n     * @param {Object} layoutInfo - layout Informations                                                                // 5033\n     * @param {Object} options                                                                                         // 5034\n     */                                                                                                                // 5035\n    this.attach = function (layoutInfo, options) {                                                                     // 5036\n      if (options.airMode || options.disableDragAndDrop) {                                                             // 5037\n        // prevent default drop event                                                                                  // 5038\n        $document.on('drop', function (e) {                                                                            // 5039\n          e.preventDefault();                                                                                          // 5040\n        });                                                                                                            // 5041\n      } else {                                                                                                         // 5042\n        this.attachDragAndDropEvent(layoutInfo, options);                                                              // 5043\n      }                                                                                                                // 5044\n    };                                                                                                                 // 5045\n                                                                                                                       // 5046\n    /**                                                                                                                // 5047\n     * attach Drag and Drop Events                                                                                     // 5048\n     *                                                                                                                 // 5049\n     * @param {Object} layoutInfo - layout Informations                                                                // 5050\n     * @param {Object} options                                                                                         // 5051\n     */                                                                                                                // 5052\n    this.attachDragAndDropEvent = function (layoutInfo, options) {                                                     // 5053\n      var collection = $(),                                                                                            // 5054\n          $editor = layoutInfo.editor(),                                                                               // 5055\n          $dropzone = layoutInfo.dropzone(),                                                                           // 5056\n          $dropzoneMessage = $dropzone.find('.note-dropzone-message');                                                 // 5057\n                                                                                                                       // 5058\n      // show dropzone on dragenter when dragging a object to document                                                 // 5059\n      // -but only if the editor is visible, i.e. has a positive width and height                                      // 5060\n      $document.on('dragenter', function (e) {                                                                         // 5061\n        var isCodeview = handler.invoke('codeview.isActivated', layoutInfo);                                           // 5062\n        var hasEditorSize = $editor.width() > 0 && $editor.height() > 0;                                               // 5063\n        if (!isCodeview && !collection.length && hasEditorSize) {                                                      // 5064\n          $editor.addClass('dragover');                                                                                // 5065\n          $dropzone.width($editor.width());                                                                            // 5066\n          $dropzone.height($editor.height());                                                                          // 5067\n          $dropzoneMessage.text(options.langInfo.image.dragImageHere);                                                 // 5068\n        }                                                                                                              // 5069\n        collection = collection.add(e.target);                                                                         // 5070\n      }).on('dragleave', function (e) {                                                                                // 5071\n        collection = collection.not(e.target);                                                                         // 5072\n        if (!collection.length) {                                                                                      // 5073\n          $editor.removeClass('dragover');                                                                             // 5074\n        }                                                                                                              // 5075\n      }).on('drop', function () {                                                                                      // 5076\n        collection = $();                                                                                              // 5077\n        $editor.removeClass('dragover');                                                                               // 5078\n      });                                                                                                              // 5079\n                                                                                                                       // 5080\n      // change dropzone's message on hover.                                                                           // 5081\n      $dropzone.on('dragenter', function () {                                                                          // 5082\n        $dropzone.addClass('hover');                                                                                   // 5083\n        $dropzoneMessage.text(options.langInfo.image.dropImage);                                                       // 5084\n      }).on('dragleave', function () {                                                                                 // 5085\n        $dropzone.removeClass('hover');                                                                                // 5086\n        $dropzoneMessage.text(options.langInfo.image.dragImageHere);                                                   // 5087\n      });                                                                                                              // 5088\n                                                                                                                       // 5089\n      // attach dropImage                                                                                              // 5090\n      $dropzone.on('drop', function (event) {                                                                          // 5091\n                                                                                                                       // 5092\n        var dataTransfer = event.originalEvent.dataTransfer;                                                           // 5093\n        var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);                                      // 5094\n                                                                                                                       // 5095\n        if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {                                         // 5096\n          event.preventDefault();                                                                                      // 5097\n          layoutInfo.editable().focus();                                                                               // 5098\n          handler.insertImages(layoutInfo, dataTransfer.files);                                                        // 5099\n        } else {                                                                                                       // 5100\n          var insertNodefunc = function () {                                                                           // 5101\n            layoutInfo.holder().summernote('insertNode', this);                                                        // 5102\n          };                                                                                                           // 5103\n                                                                                                                       // 5104\n          for (var i = 0, len = dataTransfer.types.length; i < len; i++) {                                             // 5105\n            var type = dataTransfer.types[i];                                                                          // 5106\n            var content = dataTransfer.getData(type);                                                                  // 5107\n                                                                                                                       // 5108\n            if (type.toLowerCase().indexOf('text') > -1) {                                                             // 5109\n              layoutInfo.holder().summernote('pasteHTML', content);                                                    // 5110\n            } else {                                                                                                   // 5111\n              $(content).each(insertNodefunc);                                                                         // 5112\n            }                                                                                                          // 5113\n          }                                                                                                            // 5114\n        }                                                                                                              // 5115\n      }).on('dragover', false); // prevent default dragover event                                                      // 5116\n    };                                                                                                                 // 5117\n  };                                                                                                                   // 5118\n                                                                                                                       // 5119\n  var Clipboard = function (handler) {                                                                                 // 5120\n    var $paste;                                                                                                        // 5121\n                                                                                                                       // 5122\n    this.attach = function (layoutInfo) {                                                                              // 5123\n      // [workaround] getting image from clipboard                                                                     // 5124\n      //  - IE11 and Firefox: CTRL+v hook                                                                              // 5125\n      //  - Webkit: event.clipboardData                                                                                // 5126\n      if ((agent.isMSIE && agent.browserVersion > 10) || agent.isFF) {                                                 // 5127\n        $paste = $('<div />').attr('contenteditable', true).css({                                                      // 5128\n          position : 'absolute',                                                                                       // 5129\n          left : -100000,                                                                                              // 5130\n          opacity : 0                                                                                                  // 5131\n        });                                                                                                            // 5132\n                                                                                                                       // 5133\n        layoutInfo.editable().on('keydown', function (e) {                                                             // 5134\n          if (e.ctrlKey && e.keyCode === key.code.V) {                                                                 // 5135\n            handler.invoke('saveRange', layoutInfo.editable());                                                        // 5136\n            $paste.focus();                                                                                            // 5137\n                                                                                                                       // 5138\n            setTimeout(function () {                                                                                   // 5139\n              pasteByHook(layoutInfo);                                                                                 // 5140\n            }, 0);                                                                                                     // 5141\n          }                                                                                                            // 5142\n        });                                                                                                            // 5143\n                                                                                                                       // 5144\n        layoutInfo.editable().before($paste);                                                                          // 5145\n      } else {                                                                                                         // 5146\n        layoutInfo.editable().on('paste', pasteByEvent);                                                               // 5147\n      }                                                                                                                // 5148\n    };                                                                                                                 // 5149\n                                                                                                                       // 5150\n    var pasteByHook = function (layoutInfo) {                                                                          // 5151\n      var $editable = layoutInfo.editable();                                                                           // 5152\n      var node = $paste[0].firstChild;                                                                                 // 5153\n                                                                                                                       // 5154\n      if (dom.isImg(node)) {                                                                                           // 5155\n        var dataURI = node.src;                                                                                        // 5156\n        var decodedData = atob(dataURI.split(',')[1]);                                                                 // 5157\n        var array = new Uint8Array(decodedData.length);                                                                // 5158\n        for (var i = 0; i < decodedData.length; i++) {                                                                 // 5159\n          array[i] = decodedData.charCodeAt(i);                                                                        // 5160\n        }                                                                                                              // 5161\n                                                                                                                       // 5162\n        var blob = new Blob([array], { type : 'image/png' });                                                          // 5163\n        blob.name = 'clipboard.png';                                                                                   // 5164\n                                                                                                                       // 5165\n        handler.invoke('restoreRange', $editable);                                                                     // 5166\n        handler.invoke('focus', $editable);                                                                            // 5167\n        handler.insertImages(layoutInfo, [blob]);                                                                      // 5168\n      } else {                                                                                                         // 5169\n        var pasteContent = $('<div />').html($paste.html()).html();                                                    // 5170\n        handler.invoke('restoreRange', $editable);                                                                     // 5171\n        handler.invoke('focus', $editable);                                                                            // 5172\n                                                                                                                       // 5173\n        if (pasteContent) {                                                                                            // 5174\n          handler.invoke('pasteHTML', $editable, pasteContent);                                                        // 5175\n        }                                                                                                              // 5176\n      }                                                                                                                // 5177\n                                                                                                                       // 5178\n      $paste.empty();                                                                                                  // 5179\n    };                                                                                                                 // 5180\n                                                                                                                       // 5181\n    /**                                                                                                                // 5182\n     * paste by clipboard event                                                                                        // 5183\n     *                                                                                                                 // 5184\n     * @param {Event} event                                                                                            // 5185\n     */                                                                                                                // 5186\n    var pasteByEvent = function (event) {                                                                              // 5187\n      var clipboardData = event.originalEvent.clipboardData;                                                           // 5188\n      var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);                                        // 5189\n      var $editable = layoutInfo.editable();                                                                           // 5190\n                                                                                                                       // 5191\n      if (clipboardData && clipboardData.items && clipboardData.items.length) {                                        // 5192\n        var item = list.head(clipboardData.items);                                                                     // 5193\n        if (item.kind === 'file' && item.type.indexOf('image/') !== -1) {                                              // 5194\n          handler.insertImages(layoutInfo, [item.getAsFile()]);                                                        // 5195\n        }                                                                                                              // 5196\n        handler.invoke('editor.afterCommand', $editable);                                                              // 5197\n      }                                                                                                                // 5198\n    };                                                                                                                 // 5199\n  };                                                                                                                   // 5200\n                                                                                                                       // 5201\n  var LinkDialog = function (handler) {                                                                                // 5202\n                                                                                                                       // 5203\n    /**                                                                                                                // 5204\n     * toggle button status                                                                                            // 5205\n     *                                                                                                                 // 5206\n     * @private                                                                                                        // 5207\n     * @param {jQuery} $btn                                                                                            // 5208\n     * @param {Boolean} isEnable                                                                                       // 5209\n     */                                                                                                                // 5210\n    var toggleBtn = function ($btn, isEnable) {                                                                        // 5211\n      $btn.toggleClass('disabled', !isEnable);                                                                         // 5212\n      $btn.attr('disabled', !isEnable);                                                                                // 5213\n    };                                                                                                                 // 5214\n                                                                                                                       // 5215\n    /**                                                                                                                // 5216\n     * bind enter key                                                                                                  // 5217\n     *                                                                                                                 // 5218\n     * @private                                                                                                        // 5219\n     * @param {jQuery} $input                                                                                          // 5220\n     * @param {jQuery} $btn                                                                                            // 5221\n     */                                                                                                                // 5222\n    var bindEnterKey = function ($input, $btn) {                                                                       // 5223\n      $input.on('keypress', function (event) {                                                                         // 5224\n        if (event.keyCode === key.code.ENTER) {                                                                        // 5225\n          $btn.trigger('click');                                                                                       // 5226\n        }                                                                                                              // 5227\n      });                                                                                                              // 5228\n    };                                                                                                                 // 5229\n                                                                                                                       // 5230\n    /**                                                                                                                // 5231\n     * Show link dialog and set event handlers on dialog controls.                                                     // 5232\n     *                                                                                                                 // 5233\n     * @param {jQuery} $editable                                                                                       // 5234\n     * @param {jQuery} $dialog                                                                                         // 5235\n     * @param {Object} linkInfo                                                                                        // 5236\n     * @return {Promise}                                                                                               // 5237\n     */                                                                                                                // 5238\n    this.showLinkDialog = function ($editable, $dialog, linkInfo) {                                                    // 5239\n      return $.Deferred(function (deferred) {                                                                          // 5240\n        var $linkDialog = $dialog.find('.note-link-dialog');                                                           // 5241\n                                                                                                                       // 5242\n        var $linkText = $linkDialog.find('.note-link-text'),                                                           // 5243\n        $linkUrl = $linkDialog.find('.note-link-url'),                                                                 // 5244\n        $linkBtn = $linkDialog.find('.note-link-btn'),                                                                 // 5245\n        $openInNewWindow = $linkDialog.find('input[type=checkbox]');                                                   // 5246\n                                                                                                                       // 5247\n        $linkDialog.one('shown.bs.modal', function () {                                                                // 5248\n          $linkText.val(linkInfo.text);                                                                                // 5249\n                                                                                                                       // 5250\n          $linkText.on('input', function () {                                                                          // 5251\n            toggleBtn($linkBtn, $linkText.val() && $linkUrl.val());                                                    // 5252\n            // if linktext was modified by keyup,                                                                      // 5253\n            // stop cloning text from linkUrl                                                                          // 5254\n            linkInfo.text = $linkText.val();                                                                           // 5255\n          });                                                                                                          // 5256\n                                                                                                                       // 5257\n          // if no url was given, copy text to url                                                                     // 5258\n          if (!linkInfo.url) {                                                                                         // 5259\n            linkInfo.url = linkInfo.text || 'http://';                                                                 // 5260\n            toggleBtn($linkBtn, linkInfo.text);                                                                        // 5261\n          }                                                                                                            // 5262\n                                                                                                                       // 5263\n          $linkUrl.on('input', function () {                                                                           // 5264\n            toggleBtn($linkBtn, $linkText.val() && $linkUrl.val());                                                    // 5265\n            // display same link on `Text to display` input                                                            // 5266\n            // when create a new link                                                                                  // 5267\n            if (!linkInfo.text) {                                                                                      // 5268\n              $linkText.val($linkUrl.val());                                                                           // 5269\n            }                                                                                                          // 5270\n          }).val(linkInfo.url).trigger('focus').trigger('select');                                                     // 5271\n                                                                                                                       // 5272\n          bindEnterKey($linkUrl, $linkBtn);                                                                            // 5273\n          bindEnterKey($linkText, $linkBtn);                                                                           // 5274\n                                                                                                                       // 5275\n          $openInNewWindow.prop('checked', linkInfo.isNewWindow);                                                      // 5276\n                                                                                                                       // 5277\n          $linkBtn.one('click', function (event) {                                                                     // 5278\n            event.preventDefault();                                                                                    // 5279\n                                                                                                                       // 5280\n            deferred.resolve({                                                                                         // 5281\n              range: linkInfo.range,                                                                                   // 5282\n              url: $linkUrl.val(),                                                                                     // 5283\n              text: $linkText.val(),                                                                                   // 5284\n              isNewWindow: $openInNewWindow.is(':checked')                                                             // 5285\n            });                                                                                                        // 5286\n            $linkDialog.modal('hide');                                                                                 // 5287\n          });                                                                                                          // 5288\n        }).one('hidden.bs.modal', function () {                                                                        // 5289\n          // detach events                                                                                             // 5290\n          $linkText.off('input keypress');                                                                             // 5291\n          $linkUrl.off('input keypress');                                                                              // 5292\n          $linkBtn.off('click');                                                                                       // 5293\n                                                                                                                       // 5294\n          if (deferred.state() === 'pending') {                                                                        // 5295\n            deferred.reject();                                                                                         // 5296\n          }                                                                                                            // 5297\n        }).modal('show');                                                                                              // 5298\n      }).promise();                                                                                                    // 5299\n    };                                                                                                                 // 5300\n                                                                                                                       // 5301\n    /**                                                                                                                // 5302\n     * @param {Object} layoutInfo                                                                                      // 5303\n     */                                                                                                                // 5304\n    this.show = function (layoutInfo) {                                                                                // 5305\n      var $editor = layoutInfo.editor(),                                                                               // 5306\n          $dialog = layoutInfo.dialog(),                                                                               // 5307\n          $editable = layoutInfo.editable(),                                                                           // 5308\n          $popover = layoutInfo.popover(),                                                                             // 5309\n          linkInfo = handler.invoke('editor.getLinkInfo', $editable);                                                  // 5310\n                                                                                                                       // 5311\n      var options = $editor.data('options');                                                                           // 5312\n                                                                                                                       // 5313\n      handler.invoke('editor.saveRange', $editable);                                                                   // 5314\n      this.showLinkDialog($editable, $dialog, linkInfo).then(function (linkInfo) {                                     // 5315\n        handler.invoke('editor.restoreRange', $editable);                                                              // 5316\n        handler.invoke('editor.createLink', $editable, linkInfo, options);                                             // 5317\n        // hide popover after creating link                                                                            // 5318\n        handler.invoke('popover.hide', $popover);                                                                      // 5319\n      }).fail(function () {                                                                                            // 5320\n        handler.invoke('editor.restoreRange', $editable);                                                              // 5321\n      });                                                                                                              // 5322\n    };                                                                                                                 // 5323\n  };                                                                                                                   // 5324\n                                                                                                                       // 5325\n  var ImageDialog = function (handler) {                                                                               // 5326\n    /**                                                                                                                // 5327\n     * toggle button status                                                                                            // 5328\n     *                                                                                                                 // 5329\n     * @private                                                                                                        // 5330\n     * @param {jQuery} $btn                                                                                            // 5331\n     * @param {Boolean} isEnable                                                                                       // 5332\n     */                                                                                                                // 5333\n    var toggleBtn = function ($btn, isEnable) {                                                                        // 5334\n      $btn.toggleClass('disabled', !isEnable);                                                                         // 5335\n      $btn.attr('disabled', !isEnable);                                                                                // 5336\n    };                                                                                                                 // 5337\n                                                                                                                       // 5338\n    /**                                                                                                                // 5339\n     * bind enter key                                                                                                  // 5340\n     *                                                                                                                 // 5341\n     * @private                                                                                                        // 5342\n     * @param {jQuery} $input                                                                                          // 5343\n     * @param {jQuery} $btn                                                                                            // 5344\n     */                                                                                                                // 5345\n    var bindEnterKey = function ($input, $btn) {                                                                       // 5346\n      $input.on('keypress', function (event) {                                                                         // 5347\n        if (event.keyCode === key.code.ENTER) {                                                                        // 5348\n          $btn.trigger('click');                                                                                       // 5349\n        }                                                                                                              // 5350\n      });                                                                                                              // 5351\n    };                                                                                                                 // 5352\n                                                                                                                       // 5353\n    this.show = function (layoutInfo) {                                                                                // 5354\n      var $dialog = layoutInfo.dialog(),                                                                               // 5355\n          $editable = layoutInfo.editable();                                                                           // 5356\n                                                                                                                       // 5357\n      handler.invoke('editor.saveRange', $editable);                                                                   // 5358\n      this.showImageDialog($editable, $dialog).then(function (data) {                                                  // 5359\n        handler.invoke('editor.restoreRange', $editable);                                                              // 5360\n                                                                                                                       // 5361\n        if (typeof data === 'string') {                                                                                // 5362\n          // image url                                                                                                 // 5363\n          handler.invoke('editor.insertImage', $editable, data);                                                       // 5364\n        } else {                                                                                                       // 5365\n          // array of files                                                                                            // 5366\n          handler.insertImages(layoutInfo, data);                                                                      // 5367\n        }                                                                                                              // 5368\n      }).fail(function () {                                                                                            // 5369\n        handler.invoke('editor.restoreRange', $editable);                                                              // 5370\n      });                                                                                                              // 5371\n    };                                                                                                                 // 5372\n                                                                                                                       // 5373\n    /**                                                                                                                // 5374\n     * show image dialog                                                                                               // 5375\n     *                                                                                                                 // 5376\n     * @param {jQuery} $editable                                                                                       // 5377\n     * @param {jQuery} $dialog                                                                                         // 5378\n     * @return {Promise}                                                                                               // 5379\n     */                                                                                                                // 5380\n    this.showImageDialog = function ($editable, $dialog) {                                                             // 5381\n      return $.Deferred(function (deferred) {                                                                          // 5382\n        var $imageDialog = $dialog.find('.note-image-dialog');                                                         // 5383\n                                                                                                                       // 5384\n        var $imageInput = $dialog.find('.note-image-input'),                                                           // 5385\n            $imageUrl = $dialog.find('.note-image-url'),                                                               // 5386\n            $imageBtn = $dialog.find('.note-image-btn');                                                               // 5387\n                                                                                                                       // 5388\n        $imageDialog.one('shown.bs.modal', function () {                                                               // 5389\n          // Cloning imageInput to clear element.                                                                      // 5390\n          $imageInput.replaceWith($imageInput.clone()                                                                  // 5391\n            .on('change', function () {                                                                                // 5392\n              deferred.resolve(this.files || this.value);                                                              // 5393\n              $imageDialog.modal('hide');                                                                              // 5394\n            })                                                                                                         // 5395\n            .val('')                                                                                                   // 5396\n          );                                                                                                           // 5397\n                                                                                                                       // 5398\n          $imageBtn.click(function (event) {                                                                           // 5399\n            event.preventDefault();                                                                                    // 5400\n                                                                                                                       // 5401\n            deferred.resolve($imageUrl.val());                                                                         // 5402\n            $imageDialog.modal('hide');                                                                                // 5403\n          });                                                                                                          // 5404\n                                                                                                                       // 5405\n          $imageUrl.on('keyup paste', function (event) {                                                               // 5406\n            var url;                                                                                                   // 5407\n                                                                                                                       // 5408\n            if (event.type === 'paste') {                                                                              // 5409\n              url = event.originalEvent.clipboardData.getData('text');                                                 // 5410\n            } else {                                                                                                   // 5411\n              url = $imageUrl.val();                                                                                   // 5412\n            }                                                                                                          // 5413\n                                                                                                                       // 5414\n            toggleBtn($imageBtn, url);                                                                                 // 5415\n          }).val('').trigger('focus');                                                                                 // 5416\n          bindEnterKey($imageUrl, $imageBtn);                                                                          // 5417\n        }).one('hidden.bs.modal', function () {                                                                        // 5418\n          $imageInput.off('change');                                                                                   // 5419\n          $imageUrl.off('keyup paste keypress');                                                                       // 5420\n          $imageBtn.off('click');                                                                                      // 5421\n                                                                                                                       // 5422\n          if (deferred.state() === 'pending') {                                                                        // 5423\n            deferred.reject();                                                                                         // 5424\n          }                                                                                                            // 5425\n        }).modal('show');                                                                                              // 5426\n      });                                                                                                              // 5427\n    };                                                                                                                 // 5428\n  };                                                                                                                   // 5429\n                                                                                                                       // 5430\n  var HelpDialog = function (handler) {                                                                                // 5431\n    /**                                                                                                                // 5432\n     * show help dialog                                                                                                // 5433\n     *                                                                                                                 // 5434\n     * @param {jQuery} $editable                                                                                       // 5435\n     * @param {jQuery} $dialog                                                                                         // 5436\n     * @return {Promise}                                                                                               // 5437\n     */                                                                                                                // 5438\n    this.showHelpDialog = function ($editable, $dialog) {                                                              // 5439\n      return $.Deferred(function (deferred) {                                                                          // 5440\n        var $helpDialog = $dialog.find('.note-help-dialog');                                                           // 5441\n                                                                                                                       // 5442\n        $helpDialog.one('hidden.bs.modal', function () {                                                               // 5443\n          deferred.resolve();                                                                                          // 5444\n        }).modal('show');                                                                                              // 5445\n      }).promise();                                                                                                    // 5446\n    };                                                                                                                 // 5447\n                                                                                                                       // 5448\n    /**                                                                                                                // 5449\n     * @param {Object} layoutInfo                                                                                      // 5450\n     */                                                                                                                // 5451\n    this.show = function (layoutInfo) {                                                                                // 5452\n      var $dialog = layoutInfo.dialog(),                                                                               // 5453\n          $editable = layoutInfo.editable();                                                                           // 5454\n                                                                                                                       // 5455\n      handler.invoke('editor.saveRange', $editable, true);                                                             // 5456\n      this.showHelpDialog($editable, $dialog).then(function () {                                                       // 5457\n        handler.invoke('editor.restoreRange', $editable);                                                              // 5458\n      });                                                                                                              // 5459\n    };                                                                                                                 // 5460\n  };                                                                                                                   // 5461\n                                                                                                                       // 5462\n                                                                                                                       // 5463\n  /**                                                                                                                  // 5464\n   * @class EventHandler                                                                                               // 5465\n   *                                                                                                                   // 5466\n   * EventHandler                                                                                                      // 5467\n   *  - TODO: new instance per a editor                                                                                // 5468\n   */                                                                                                                  // 5469\n  var EventHandler = function () {                                                                                     // 5470\n    var self = this;                                                                                                   // 5471\n                                                                                                                       // 5472\n    /**                                                                                                                // 5473\n     * Modules                                                                                                         // 5474\n     */                                                                                                                // 5475\n    var modules = this.modules = {                                                                                     // 5476\n      editor: new Editor(this),                                                                                        // 5477\n      toolbar: new Toolbar(this),                                                                                      // 5478\n      statusbar: new Statusbar(this),                                                                                  // 5479\n      popover: new Popover(this),                                                                                      // 5480\n      handle: new Handle(this),                                                                                        // 5481\n      fullscreen: new Fullscreen(this),                                                                                // 5482\n      codeview: new Codeview(this),                                                                                    // 5483\n      dragAndDrop: new DragAndDrop(this),                                                                              // 5484\n      clipboard: new Clipboard(this),                                                                                  // 5485\n      linkDialog: new LinkDialog(this),                                                                                // 5486\n      imageDialog: new ImageDialog(this),                                                                              // 5487\n      helpDialog: new HelpDialog(this)                                                                                 // 5488\n    };                                                                                                                 // 5489\n                                                                                                                       // 5490\n    /**                                                                                                                // 5491\n     * invoke module's method                                                                                          // 5492\n     *                                                                                                                 // 5493\n     * @param {String} moduleAndMethod - ex) 'editor.redo'                                                             // 5494\n     * @param {...*} arguments - arguments of method                                                                   // 5495\n     * @return {*}                                                                                                     // 5496\n     */                                                                                                                // 5497\n    this.invoke = function () {                                                                                        // 5498\n      var moduleAndMethod = list.head(list.from(arguments));                                                           // 5499\n      var args = list.tail(list.from(arguments));                                                                      // 5500\n                                                                                                                       // 5501\n      var splits = moduleAndMethod.split('.');                                                                         // 5502\n      var hasSeparator = splits.length > 1;                                                                            // 5503\n      var moduleName = hasSeparator && list.head(splits);                                                              // 5504\n      var methodName = hasSeparator ? list.last(splits) : list.head(splits);                                           // 5505\n                                                                                                                       // 5506\n      var module = this.getModule(moduleName);                                                                         // 5507\n      var method = module[methodName];                                                                                 // 5508\n                                                                                                                       // 5509\n      return method && method.apply(module, args);                                                                     // 5510\n    };                                                                                                                 // 5511\n                                                                                                                       // 5512\n    /**                                                                                                                // 5513\n     * returns module                                                                                                  // 5514\n     *                                                                                                                 // 5515\n     * @param {String} moduleName - name of module                                                                     // 5516\n     * @return {Module} - defaults is editor                                                                           // 5517\n     */                                                                                                                // 5518\n    this.getModule = function (moduleName) {                                                                           // 5519\n      return this.modules[moduleName] || this.modules.editor;                                                          // 5520\n    };                                                                                                                 // 5521\n                                                                                                                       // 5522\n    /**                                                                                                                // 5523\n     * @param {jQuery} $holder                                                                                         // 5524\n     * @param {Object} callbacks                                                                                       // 5525\n     * @param {String} eventNamespace                                                                                  // 5526\n     * @returns {Function}                                                                                             // 5527\n     */                                                                                                                // 5528\n    var bindCustomEvent = this.bindCustomEvent = function ($holder, callbacks, eventNamespace) {                       // 5529\n      return function () {                                                                                             // 5530\n        var callback = callbacks[func.namespaceToCamel(eventNamespace, 'on')];                                         // 5531\n        if (callback) {                                                                                                // 5532\n          callback.apply($holder[0], arguments);                                                                       // 5533\n        }                                                                                                              // 5534\n        return $holder.trigger('summernote.' + eventNamespace, arguments);                                             // 5535\n      };                                                                                                               // 5536\n    };                                                                                                                 // 5537\n                                                                                                                       // 5538\n    /**                                                                                                                // 5539\n     * insert Images from file array.                                                                                  // 5540\n     *                                                                                                                 // 5541\n     * @private                                                                                                        // 5542\n     * @param {Object} layoutInfo                                                                                      // 5543\n     * @param {File[]} files                                                                                           // 5544\n     */                                                                                                                // 5545\n    this.insertImages = function (layoutInfo, files) {                                                                 // 5546\n      var $editor = layoutInfo.editor(),                                                                               // 5547\n          $editable = layoutInfo.editable(),                                                                           // 5548\n          $holder = layoutInfo.holder();                                                                               // 5549\n                                                                                                                       // 5550\n      var callbacks = $editable.data('callbacks');                                                                     // 5551\n      var options = $editor.data('options');                                                                           // 5552\n                                                                                                                       // 5553\n      // If onImageUpload options setted                                                                               // 5554\n      if (callbacks.onImageUpload) {                                                                                   // 5555\n        bindCustomEvent($holder, callbacks, 'image.upload')(files);                                                    // 5556\n      // else insert Image as dataURL                                                                                  // 5557\n      } else {                                                                                                         // 5558\n        $.each(files, function (idx, file) {                                                                           // 5559\n          var filename = file.name;                                                                                    // 5560\n          if (options.maximumImageFileSize && options.maximumImageFileSize < file.size) {                              // 5561\n            bindCustomEvent($holder, callbacks, 'image.upload.error')(options.langInfo.image.maximumFileSizeError);    // 5562\n          } else {                                                                                                     // 5563\n            async.readFileAsDataURL(file).then(function (sDataURL) {                                                   // 5564\n              modules.editor.insertImage($editable, sDataURL, filename);                                               // 5565\n            }).fail(function () {                                                                                      // 5566\n              bindCustomEvent($holder, callbacks, 'image.upload.error')(options.langInfo.image.maximumFileSizeError);  // 5567\n            });                                                                                                        // 5568\n          }                                                                                                            // 5569\n        });                                                                                                            // 5570\n      }                                                                                                                // 5571\n    };                                                                                                                 // 5572\n                                                                                                                       // 5573\n    var commands = {                                                                                                   // 5574\n      /**                                                                                                              // 5575\n       * @param {Object} layoutInfo                                                                                    // 5576\n       */                                                                                                              // 5577\n      showLinkDialog: function (layoutInfo) {                                                                          // 5578\n        modules.linkDialog.show(layoutInfo);                                                                           // 5579\n      },                                                                                                               // 5580\n                                                                                                                       // 5581\n      /**                                                                                                              // 5582\n       * @param {Object} layoutInfo                                                                                    // 5583\n       */                                                                                                              // 5584\n      showImageDialog: function (layoutInfo) {                                                                         // 5585\n        modules.imageDialog.show(layoutInfo);                                                                          // 5586\n      },                                                                                                               // 5587\n                                                                                                                       // 5588\n      /**                                                                                                              // 5589\n       * @param {Object} layoutInfo                                                                                    // 5590\n       */                                                                                                              // 5591\n      showHelpDialog: function (layoutInfo) {                                                                          // 5592\n        modules.helpDialog.show(layoutInfo);                                                                           // 5593\n      },                                                                                                               // 5594\n                                                                                                                       // 5595\n      /**                                                                                                              // 5596\n       * @param {Object} layoutInfo                                                                                    // 5597\n       */                                                                                                              // 5598\n      fullscreen: function (layoutInfo) {                                                                              // 5599\n        modules.fullscreen.toggle(layoutInfo);                                                                         // 5600\n      },                                                                                                               // 5601\n                                                                                                                       // 5602\n      /**                                                                                                              // 5603\n       * @param {Object} layoutInfo                                                                                    // 5604\n       */                                                                                                              // 5605\n      codeview: function (layoutInfo) {                                                                                // 5606\n        modules.codeview.toggle(layoutInfo);                                                                           // 5607\n      }                                                                                                                // 5608\n    };                                                                                                                 // 5609\n                                                                                                                       // 5610\n    var hMousedown = function (event) {                                                                                // 5611\n      //preventDefault Selection for FF, IE8+                                                                          // 5612\n      if (dom.isImg(event.target)) {                                                                                   // 5613\n        event.preventDefault();                                                                                        // 5614\n      }                                                                                                                // 5615\n    };                                                                                                                 // 5616\n                                                                                                                       // 5617\n    var hKeyupAndMouseup = function (event) {                                                                          // 5618\n      var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);                                        // 5619\n      modules.editor.removeBogus(layoutInfo.editable());                                                               // 5620\n      hToolbarAndPopoverUpdate(event);                                                                                 // 5621\n    };                                                                                                                 // 5622\n                                                                                                                       // 5623\n    /**                                                                                                                // 5624\n     * update sytle info                                                                                               // 5625\n     * @param {Object} styleInfo                                                                                       // 5626\n     * @param {Object} layoutInfo                                                                                      // 5627\n     */                                                                                                                // 5628\n    this.updateStyleInfo = function (styleInfo, layoutInfo) {                                                          // 5629\n      if (!styleInfo) {                                                                                                // 5630\n        return;                                                                                                        // 5631\n      }                                                                                                                // 5632\n      var isAirMode = layoutInfo.editor().data('options').airMode;                                                     // 5633\n      if (!isAirMode) {                                                                                                // 5634\n        modules.toolbar.update(layoutInfo.toolbar(), styleInfo);                                                       // 5635\n      }                                                                                                                // 5636\n                                                                                                                       // 5637\n      modules.popover.update(layoutInfo.popover(), styleInfo, isAirMode);                                              // 5638\n      modules.handle.update(layoutInfo.handle(), styleInfo, isAirMode);                                                // 5639\n    };                                                                                                                 // 5640\n                                                                                                                       // 5641\n    var hToolbarAndPopoverUpdate = function (event) {                                                                  // 5642\n      var target = event.target;                                                                                       // 5643\n      // delay for range after mouseup                                                                                 // 5644\n      setTimeout(function () {                                                                                         // 5645\n        var layoutInfo = dom.makeLayoutInfo(target);                                                                   // 5646\n        var styleInfo = modules.editor.currentStyle(target);                                                           // 5647\n        self.updateStyleInfo(styleInfo, layoutInfo);                                                                   // 5648\n      }, 0);                                                                                                           // 5649\n    };                                                                                                                 // 5650\n                                                                                                                       // 5651\n    var hScroll = function (event) {                                                                                   // 5652\n      var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);                                        // 5653\n      //hide popover and handle when scrolled                                                                          // 5654\n      modules.popover.hide(layoutInfo.popover());                                                                      // 5655\n      modules.handle.hide(layoutInfo.handle());                                                                        // 5656\n    };                                                                                                                 // 5657\n                                                                                                                       // 5658\n    var hToolbarAndPopoverMousedown = function (event) {                                                               // 5659\n      // prevent default event when insertTable (FF, Webkit)                                                           // 5660\n      var $btn = $(event.target).closest('[data-event]');                                                              // 5661\n      if ($btn.length) {                                                                                               // 5662\n        event.preventDefault();                                                                                        // 5663\n      }                                                                                                                // 5664\n    };                                                                                                                 // 5665\n                                                                                                                       // 5666\n    var hToolbarAndPopoverClick = function (event) {                                                                   // 5667\n      var $btn = $(event.target).closest('[data-event]');                                                              // 5668\n                                                                                                                       // 5669\n      if (!$btn.length) {                                                                                              // 5670\n        return;                                                                                                        // 5671\n      }                                                                                                                // 5672\n                                                                                                                       // 5673\n      var eventName = $btn.attr('data-event'),                                                                         // 5674\n          value = $btn.attr('data-value'),                                                                             // 5675\n          hide = $btn.attr('data-hide');                                                                               // 5676\n                                                                                                                       // 5677\n      var layoutInfo = dom.makeLayoutInfo(event.target);                                                               // 5678\n                                                                                                                       // 5679\n      // before command: detect control selection element($target)                                                     // 5680\n      var $target;                                                                                                     // 5681\n      if ($.inArray(eventName, ['resize', 'floatMe', 'removeMedia', 'imageShape']) !== -1) {                           // 5682\n        var $selection = layoutInfo.handle().find('.note-control-selection');                                          // 5683\n        $target = $($selection.data('target'));                                                                        // 5684\n      }                                                                                                                // 5685\n                                                                                                                       // 5686\n      // If requested, hide the popover when the button is clicked.                                                    // 5687\n      // Useful for things like showHelpDialog.                                                                        // 5688\n      if (hide) {                                                                                                      // 5689\n        $btn.parents('.popover').hide();                                                                               // 5690\n      }                                                                                                                // 5691\n                                                                                                                       // 5692\n      if ($.isFunction($.summernote.pluginEvents[eventName])) {                                                        // 5693\n        $.summernote.pluginEvents[eventName](event, modules.editor, layoutInfo, value);                                // 5694\n      } else if (modules.editor[eventName]) { // on command                                                            // 5695\n        var $editable = layoutInfo.editable();                                                                         // 5696\n        $editable.focus();                                                                                             // 5697\n        modules.editor[eventName]($editable, value, $target);                                                          // 5698\n        event.preventDefault();                                                                                        // 5699\n      } else if (commands[eventName]) {                                                                                // 5700\n        commands[eventName].call(this, layoutInfo);                                                                    // 5701\n        event.preventDefault();                                                                                        // 5702\n      }                                                                                                                // 5703\n                                                                                                                       // 5704\n      // after command                                                                                                 // 5705\n      if ($.inArray(eventName, ['backColor', 'foreColor']) !== -1) {                                                   // 5706\n        var options = layoutInfo.editor().data('options', options);                                                    // 5707\n        var module = options.airMode ? modules.popover : modules.toolbar;                                              // 5708\n        module.updateRecentColor(list.head($btn), eventName, value);                                                   // 5709\n      }                                                                                                                // 5710\n                                                                                                                       // 5711\n      hToolbarAndPopoverUpdate(event);                                                                                 // 5712\n    };                                                                                                                 // 5713\n                                                                                                                       // 5714\n    var PX_PER_EM = 18;                                                                                                // 5715\n    var hDimensionPickerMove = function (event, options) {                                                             // 5716\n      var $picker = $(event.target.parentNode); // target is mousecatcher                                              // 5717\n      var $dimensionDisplay = $picker.next();                                                                          // 5718\n      var $catcher = $picker.find('.note-dimension-picker-mousecatcher');                                              // 5719\n      var $highlighted = $picker.find('.note-dimension-picker-highlighted');                                           // 5720\n      var $unhighlighted = $picker.find('.note-dimension-picker-unhighlighted');                                       // 5721\n                                                                                                                       // 5722\n      var posOffset;                                                                                                   // 5723\n      // HTML5 with jQuery - e.offsetX is undefined in Firefox                                                         // 5724\n      if (event.offsetX === undefined) {                                                                               // 5725\n        var posCatcher = $(event.target).offset();                                                                     // 5726\n        posOffset = {                                                                                                  // 5727\n          x: event.pageX - posCatcher.left,                                                                            // 5728\n          y: event.pageY - posCatcher.top                                                                              // 5729\n        };                                                                                                             // 5730\n      } else {                                                                                                         // 5731\n        posOffset = {                                                                                                  // 5732\n          x: event.offsetX,                                                                                            // 5733\n          y: event.offsetY                                                                                             // 5734\n        };                                                                                                             // 5735\n      }                                                                                                                // 5736\n                                                                                                                       // 5737\n      var dim = {                                                                                                      // 5738\n        c: Math.ceil(posOffset.x / PX_PER_EM) || 1,                                                                    // 5739\n        r: Math.ceil(posOffset.y / PX_PER_EM) || 1                                                                     // 5740\n      };                                                                                                               // 5741\n                                                                                                                       // 5742\n      $highlighted.css({ width: dim.c + 'em', height: dim.r + 'em' });                                                 // 5743\n      $catcher.attr('data-value', dim.c + 'x' + dim.r);                                                                // 5744\n                                                                                                                       // 5745\n      if (3 < dim.c && dim.c < options.insertTableMaxSize.col) {                                                       // 5746\n        $unhighlighted.css({ width: dim.c + 1 + 'em'});                                                                // 5747\n      }                                                                                                                // 5748\n                                                                                                                       // 5749\n      if (3 < dim.r && dim.r < options.insertTableMaxSize.row) {                                                       // 5750\n        $unhighlighted.css({ height: dim.r + 1 + 'em'});                                                               // 5751\n      }                                                                                                                // 5752\n                                                                                                                       // 5753\n      $dimensionDisplay.html(dim.c + ' x ' + dim.r);                                                                   // 5754\n    };                                                                                                                 // 5755\n                                                                                                                       // 5756\n    /**                                                                                                                // 5757\n     * bind KeyMap on keydown                                                                                          // 5758\n     *                                                                                                                 // 5759\n     * @param {Object} layoutInfo                                                                                      // 5760\n     * @param {Object} keyMap                                                                                          // 5761\n     */                                                                                                                // 5762\n    this.bindKeyMap = function (layoutInfo, keyMap) {                                                                  // 5763\n      var $editor = layoutInfo.editor();                                                                               // 5764\n      var $editable = layoutInfo.editable();                                                                           // 5765\n                                                                                                                       // 5766\n      $editable.on('keydown', function (event) {                                                                       // 5767\n        var keys = [];                                                                                                 // 5768\n                                                                                                                       // 5769\n        // modifier                                                                                                    // 5770\n        if (event.metaKey) { keys.push('CMD'); }                                                                       // 5771\n        if (event.ctrlKey && !event.altKey) { keys.push('CTRL'); }                                                     // 5772\n        if (event.shiftKey) { keys.push('SHIFT'); }                                                                    // 5773\n                                                                                                                       // 5774\n        // keycode                                                                                                     // 5775\n        var keyName = key.nameFromCode[event.keyCode];                                                                 // 5776\n        if (keyName) {                                                                                                 // 5777\n          keys.push(keyName);                                                                                          // 5778\n        }                                                                                                              // 5779\n                                                                                                                       // 5780\n        var pluginEvent;                                                                                               // 5781\n        var keyString = keys.join('+');                                                                                // 5782\n        var eventName = keyMap[keyString];                                                                             // 5783\n        if (eventName) {                                                                                               // 5784\n          // FIXME Summernote doesn't support event pipeline yet.                                                      // 5785\n          //  - Plugin -> Base Code                                                                                    // 5786\n          pluginEvent = $.summernote.pluginEvents[keyString];                                                          // 5787\n          if ($.isFunction(pluginEvent)) {                                                                             // 5788\n            if (pluginEvent(event, modules.editor, layoutInfo)) {                                                      // 5789\n              return false;                                                                                            // 5790\n            }                                                                                                          // 5791\n          }                                                                                                            // 5792\n                                                                                                                       // 5793\n          pluginEvent = $.summernote.pluginEvents[eventName];                                                          // 5794\n                                                                                                                       // 5795\n          if ($.isFunction(pluginEvent)) {                                                                             // 5796\n            pluginEvent(event, modules.editor, layoutInfo);                                                            // 5797\n          } else if (modules.editor[eventName]) {                                                                      // 5798\n            modules.editor[eventName]($editable, $editor.data('options'));                                             // 5799\n            event.preventDefault();                                                                                    // 5800\n          } else if (commands[eventName]) {                                                                            // 5801\n            commands[eventName].call(this, layoutInfo);                                                                // 5802\n            event.preventDefault();                                                                                    // 5803\n          }                                                                                                            // 5804\n        } else if (key.isEdit(event.keyCode)) {                                                                        // 5805\n          modules.editor.afterCommand($editable);                                                                      // 5806\n        }                                                                                                              // 5807\n      });                                                                                                              // 5808\n    };                                                                                                                 // 5809\n                                                                                                                       // 5810\n    /**                                                                                                                // 5811\n     * attach eventhandler                                                                                             // 5812\n     *                                                                                                                 // 5813\n     * @param {Object} layoutInfo - layout Informations                                                                // 5814\n     * @param {Object} options - user options include custom event handlers                                            // 5815\n     */                                                                                                                // 5816\n    this.attach = function (layoutInfo, options) {                                                                     // 5817\n      // handlers for editable                                                                                         // 5818\n      if (options.shortcuts) {                                                                                         // 5819\n        this.bindKeyMap(layoutInfo, options.keyMap[agent.isMac ? 'mac' : 'pc']);                                       // 5820\n      }                                                                                                                // 5821\n      layoutInfo.editable().on('mousedown', hMousedown);                                                               // 5822\n      layoutInfo.editable().on('keyup mouseup', hKeyupAndMouseup);                                                     // 5823\n      layoutInfo.editable().on('scroll', hScroll);                                                                     // 5824\n                                                                                                                       // 5825\n      // handler for clipboard                                                                                         // 5826\n      modules.clipboard.attach(layoutInfo, options);                                                                   // 5827\n                                                                                                                       // 5828\n      // handler for handle and popover                                                                                // 5829\n      modules.handle.attach(layoutInfo, options);                                                                      // 5830\n      layoutInfo.popover().on('click', hToolbarAndPopoverClick);                                                       // 5831\n      layoutInfo.popover().on('mousedown', hToolbarAndPopoverMousedown);                                               // 5832\n                                                                                                                       // 5833\n      // handler for drag and drop                                                                                     // 5834\n      modules.dragAndDrop.attach(layoutInfo, options);                                                                 // 5835\n                                                                                                                       // 5836\n      // handlers for frame mode (toolbar, statusbar)                                                                  // 5837\n      if (!options.airMode) {                                                                                          // 5838\n        // handler for toolbar                                                                                         // 5839\n        layoutInfo.toolbar().on('click', hToolbarAndPopoverClick);                                                     // 5840\n        layoutInfo.toolbar().on('mousedown', hToolbarAndPopoverMousedown);                                             // 5841\n                                                                                                                       // 5842\n        // handler for statusbar                                                                                       // 5843\n        modules.statusbar.attach(layoutInfo, options);                                                                 // 5844\n      }                                                                                                                // 5845\n                                                                                                                       // 5846\n      // handler for table dimension                                                                                   // 5847\n      var $catcherContainer = options.airMode ? layoutInfo.popover() :                                                 // 5848\n                                                layoutInfo.toolbar();                                                  // 5849\n      var $catcher = $catcherContainer.find('.note-dimension-picker-mousecatcher');                                    // 5850\n      $catcher.css({                                                                                                   // 5851\n        width: options.insertTableMaxSize.col + 'em',                                                                  // 5852\n        height: options.insertTableMaxSize.row + 'em'                                                                  // 5853\n      }).on('mousemove', function (event) {                                                                            // 5854\n        hDimensionPickerMove(event, options);                                                                          // 5855\n      });                                                                                                              // 5856\n                                                                                                                       // 5857\n      // save options on editor                                                                                        // 5858\n      layoutInfo.editor().data('options', options);                                                                    // 5859\n                                                                                                                       // 5860\n      // ret styleWithCSS for backColor / foreColor clearing with 'inherit'.                                           // 5861\n      if (!agent.isMSIE) {                                                                                             // 5862\n        // [workaround] for Firefox                                                                                    // 5863\n        //  - protect FF Error: NS_ERROR_FAILURE: Failure                                                              // 5864\n        setTimeout(function () {                                                                                       // 5865\n          document.execCommand('styleWithCSS', 0, options.styleWithSpan);                                              // 5866\n        }, 0);                                                                                                         // 5867\n      }                                                                                                                // 5868\n                                                                                                                       // 5869\n      // History                                                                                                       // 5870\n      var history = new History(layoutInfo.editable());                                                                // 5871\n      layoutInfo.editable().data('NoteHistory', history);                                                              // 5872\n                                                                                                                       // 5873\n      // All editor status will be saved on editable with jquery's data                                                // 5874\n      // for support multiple editor with singleton object.                                                            // 5875\n      layoutInfo.editable().data('callbacks', {                                                                        // 5876\n        onInit: options.onInit,                                                                                        // 5877\n        onFocus: options.onFocus,                                                                                      // 5878\n        onBlur: options.onBlur,                                                                                        // 5879\n        onKeydown: options.onKeydown,                                                                                  // 5880\n        onKeyup: options.onKeyup,                                                                                      // 5881\n        onMousedown: options.onMousedown,                                                                              // 5882\n        onEnter: options.onEnter,                                                                                      // 5883\n        onPaste: options.onPaste,                                                                                      // 5884\n        onBeforeCommand: options.onBeforeCommand,                                                                      // 5885\n        onChange: options.onChange,                                                                                    // 5886\n        onImageUpload: options.onImageUpload,                                                                          // 5887\n        onImageUploadError: options.onImageUploadError,                                                                // 5888\n        onMediaDelete: options.onMediaDelete,                                                                          // 5889\n        onToolbarClick: options.onToolbarClick                                                                         // 5890\n      });                                                                                                              // 5891\n                                                                                                                       // 5892\n      var styleInfo = modules.editor.styleFromNode(layoutInfo.editable());                                             // 5893\n      this.updateStyleInfo(styleInfo, layoutInfo);                                                                     // 5894\n    };                                                                                                                 // 5895\n                                                                                                                       // 5896\n    /**                                                                                                                // 5897\n     * attach jquery custom event                                                                                      // 5898\n     *                                                                                                                 // 5899\n     * @param {Object} layoutInfo - layout Informations                                                                // 5900\n     */                                                                                                                // 5901\n    this.attachCustomEvent = function (layoutInfo, options) {                                                          // 5902\n      var $holder = layoutInfo.holder();                                                                               // 5903\n      var $editable = layoutInfo.editable();                                                                           // 5904\n      var callbacks = $editable.data('callbacks');                                                                     // 5905\n                                                                                                                       // 5906\n      $editable.focus(bindCustomEvent($holder, callbacks, 'focus'));                                                   // 5907\n      $editable.blur(bindCustomEvent($holder, callbacks, 'blur'));                                                     // 5908\n                                                                                                                       // 5909\n      $editable.keydown(function (event) {                                                                             // 5910\n        if (event.keyCode === key.code.ENTER) {                                                                        // 5911\n          bindCustomEvent($holder, callbacks, 'enter').call(this, event);                                              // 5912\n        }                                                                                                              // 5913\n        bindCustomEvent($holder, callbacks, 'keydown').call(this, event);                                              // 5914\n      });                                                                                                              // 5915\n      $editable.keyup(bindCustomEvent($holder, callbacks, 'keyup'));                                                   // 5916\n                                                                                                                       // 5917\n      $editable.on('mousedown', bindCustomEvent($holder, callbacks, 'mousedown'));                                     // 5918\n      $editable.on('mouseup', bindCustomEvent($holder, callbacks, 'mouseup'));                                         // 5919\n      $editable.on('scroll', bindCustomEvent($holder, callbacks, 'scroll'));                                           // 5920\n                                                                                                                       // 5921\n      $editable.on('paste', bindCustomEvent($holder, callbacks, 'paste'));                                             // 5922\n                                                                                                                       // 5923\n      // [workaround] IE doesn't have input events for contentEditable                                                 // 5924\n      //  - see: https://goo.gl/4bfIvA                                                                                 // 5925\n      var changeEventName = agent.isMSIE ? 'DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted' : 'input';    // 5926\n      $editable.on(changeEventName, function () {                                                                      // 5927\n        bindCustomEvent($holder, callbacks, 'change')($editable.html(), $editable);                                    // 5928\n      });                                                                                                              // 5929\n                                                                                                                       // 5930\n      if (!options.airMode) {                                                                                          // 5931\n        layoutInfo.toolbar().click(bindCustomEvent($holder, callbacks, 'toolbar.click'));                              // 5932\n        layoutInfo.popover().click(bindCustomEvent($holder, callbacks, 'popover.click'));                              // 5933\n      }                                                                                                                // 5934\n                                                                                                                       // 5935\n      // Textarea: auto filling the code before form submit.                                                           // 5936\n      if (dom.isTextarea(list.head($holder))) {                                                                        // 5937\n        $holder.closest('form').submit(function (e) {                                                                  // 5938\n          layoutInfo.holder().val(layoutInfo.holder().code());                                                         // 5939\n          bindCustomEvent($holder, callbacks, 'submit').call(this, e, $holder.code());                                 // 5940\n        });                                                                                                            // 5941\n      }                                                                                                                // 5942\n                                                                                                                       // 5943\n      // textarea auto sync                                                                                            // 5944\n      if (dom.isTextarea(list.head($holder)) && options.textareaAutoSync) {                                            // 5945\n        $holder.on('summernote.change', function () {                                                                  // 5946\n          layoutInfo.holder().val(layoutInfo.holder().code());                                                         // 5947\n        });                                                                                                            // 5948\n      }                                                                                                                // 5949\n                                                                                                                       // 5950\n      // fire init event                                                                                               // 5951\n      bindCustomEvent($holder, callbacks, 'init')(layoutInfo);                                                         // 5952\n                                                                                                                       // 5953\n      // fire plugin init event                                                                                        // 5954\n      for (var i = 0, len = $.summernote.plugins.length; i < len; i++) {                                               // 5955\n        if ($.isFunction($.summernote.plugins[i].init)) {                                                              // 5956\n          $.summernote.plugins[i].init(layoutInfo);                                                                    // 5957\n        }                                                                                                              // 5958\n      }                                                                                                                // 5959\n    };                                                                                                                 // 5960\n                                                                                                                       // 5961\n    this.detach = function (layoutInfo, options) {                                                                     // 5962\n      layoutInfo.holder().off();                                                                                       // 5963\n      layoutInfo.editable().off();                                                                                     // 5964\n                                                                                                                       // 5965\n      layoutInfo.popover().off();                                                                                      // 5966\n      layoutInfo.handle().off();                                                                                       // 5967\n      layoutInfo.dialog().off();                                                                                       // 5968\n                                                                                                                       // 5969\n      if (!options.airMode) {                                                                                          // 5970\n        layoutInfo.dropzone().off();                                                                                   // 5971\n        layoutInfo.toolbar().off();                                                                                    // 5972\n        layoutInfo.statusbar().off();                                                                                  // 5973\n      }                                                                                                                // 5974\n    };                                                                                                                 // 5975\n  };                                                                                                                   // 5976\n                                                                                                                       // 5977\n  /**                                                                                                                  // 5978\n   * @class Renderer                                                                                                   // 5979\n   *                                                                                                                   // 5980\n   * renderer                                                                                                          // 5981\n   *                                                                                                                   // 5982\n   * rendering toolbar and editable                                                                                    // 5983\n   */                                                                                                                  // 5984\n  var Renderer = function () {                                                                                         // 5985\n                                                                                                                       // 5986\n    /**                                                                                                                // 5987\n     * bootstrap button template                                                                                       // 5988\n     * @private                                                                                                        // 5989\n     * @param {String} label button name                                                                               // 5990\n     * @param {Object} [options] button options                                                                        // 5991\n     * @param {String} [options.event] data-event                                                                      // 5992\n     * @param {String} [options.className] button's class name                                                         // 5993\n     * @param {String} [options.value] data-value                                                                      // 5994\n     * @param {String} [options.title] button's title for popup                                                        // 5995\n     * @param {String} [options.dropdown] dropdown html                                                                // 5996\n     * @param {String} [options.hide] data-hide                                                                        // 5997\n     */                                                                                                                // 5998\n    var tplButton = function (label, options) {                                                                        // 5999\n      var event = options.event;                                                                                       // 6000\n      var value = options.value;                                                                                       // 6001\n      var title = options.title;                                                                                       // 6002\n      var className = options.className;                                                                               // 6003\n      var dropdown = options.dropdown;                                                                                 // 6004\n      var hide = options.hide;                                                                                         // 6005\n                                                                                                                       // 6006\n      return (dropdown ? '<div class=\"btn-group' +                                                                     // 6007\n               (className ? ' ' + className : '') + '\">' : '') +                                                       // 6008\n               '<button type=\"button\"' +                                                                               // 6009\n                 ' class=\"btn btn-default btn-sm' +                                                                    // 6010\n                   ((!dropdown && className) ? ' ' + className : '') +                                                 // 6011\n                   (dropdown ? ' dropdown-toggle' : '') +                                                              // 6012\n                 '\"' +                                                                                                 // 6013\n                 (dropdown ? ' data-toggle=\"dropdown\"' : '') +                                                         // 6014\n                 (title ? ' title=\"' + title + '\"' : '') +                                                             // 6015\n                 (event ? ' data-event=\"' + event + '\"' : '') +                                                        // 6016\n                 (value ? ' data-value=\\'' + value + '\\'' : '') +                                                      // 6017\n                 (hide ? ' data-hide=\\'' + hide + '\\'' : '') +                                                         // 6018\n                 ' tabindex=\"-1\">' +                                                                                   // 6019\n                 label +                                                                                               // 6020\n                 (dropdown ? ' <span class=\"caret\"></span>' : '') +                                                    // 6021\n               '</button>' +                                                                                           // 6022\n               (dropdown || '') +                                                                                      // 6023\n             (dropdown ? '</div>' : '');                                                                               // 6024\n    };                                                                                                                 // 6025\n                                                                                                                       // 6026\n    /**                                                                                                                // 6027\n     * bootstrap icon button template                                                                                  // 6028\n     * @private                                                                                                        // 6029\n     * @param {String} iconClassName                                                                                   // 6030\n     * @param {Object} [options]                                                                                       // 6031\n     * @param {String} [options.event]                                                                                 // 6032\n     * @param {String} [options.value]                                                                                 // 6033\n     * @param {String} [options.title]                                                                                 // 6034\n     * @param {String} [options.dropdown]                                                                              // 6035\n     */                                                                                                                // 6036\n    var tplIconButton = function (iconClassName, options) {                                                            // 6037\n      var label = '<i class=\"' + iconClassName + '\"></i>';                                                             // 6038\n      return tplButton(label, options);                                                                                // 6039\n    };                                                                                                                 // 6040\n                                                                                                                       // 6041\n    /**                                                                                                                // 6042\n     * bootstrap popover template                                                                                      // 6043\n     * @private                                                                                                        // 6044\n     * @param {String} className                                                                                       // 6045\n     * @param {String} content                                                                                         // 6046\n     */                                                                                                                // 6047\n    var tplPopover = function (className, content) {                                                                   // 6048\n      var $popover = $('<div class=\"' + className + ' popover bottom in\" style=\"display: none;\">' +                    // 6049\n               '<div class=\"arrow\"></div>' +                                                                           // 6050\n               '<div class=\"popover-content\">' +                                                                       // 6051\n               '</div>' +                                                                                              // 6052\n             '</div>');                                                                                                // 6053\n                                                                                                                       // 6054\n      $popover.find('.popover-content').append(content);                                                               // 6055\n      return $popover;                                                                                                 // 6056\n    };                                                                                                                 // 6057\n                                                                                                                       // 6058\n    /**                                                                                                                // 6059\n     * bootstrap dialog template                                                                                       // 6060\n     *                                                                                                                 // 6061\n     * @param {String} className                                                                                       // 6062\n     * @param {String} [title='']                                                                                      // 6063\n     * @param {String} body                                                                                            // 6064\n     * @param {String} [footer='']                                                                                     // 6065\n     */                                                                                                                // 6066\n    var tplDialog = function (className, title, body, footer) {                                                        // 6067\n      return '<div class=\"' + className + ' modal\" aria-hidden=\"false\">' +                                             // 6068\n               '<div class=\"modal-dialog\">' +                                                                          // 6069\n                 '<div class=\"modal-content\">' +                                                                       // 6070\n                   (title ?                                                                                            // 6071\n                   '<div class=\"modal-header\">' +                                                                      // 6072\n                     '<button type=\"button\" class=\"close\" aria-hidden=\"true\" tabindex=\"-1\">&times;</button>' +         // 6073\n                     '<h4 class=\"modal-title\">' + title + '</h4>' +                                                    // 6074\n                   '</div>' : ''                                                                                       // 6075\n                   ) +                                                                                                 // 6076\n                   '<div class=\"modal-body\">' + body + '</div>' +                                                      // 6077\n                   (footer ?                                                                                           // 6078\n                   '<div class=\"modal-footer\">' + footer + '</div>' : ''                                               // 6079\n                   ) +                                                                                                 // 6080\n                 '</div>' +                                                                                            // 6081\n               '</div>' +                                                                                              // 6082\n             '</div>';                                                                                                 // 6083\n    };                                                                                                                 // 6084\n                                                                                                                       // 6085\n    /**                                                                                                                // 6086\n     * bootstrap dropdown template                                                                                     // 6087\n     *                                                                                                                 // 6088\n     * @param {String|String[]} contents                                                                               // 6089\n     * @param {String} [className='']                                                                                  // 6090\n     * @param {String} [nodeName='']                                                                                   // 6091\n     */                                                                                                                // 6092\n    var tplDropdown = function (contents, className, nodeName) {                                                       // 6093\n      var classes = 'dropdown-menu' + (className ? ' ' + className : '');                                              // 6094\n      nodeName = nodeName || 'ul';                                                                                     // 6095\n      if (contents instanceof Array) {                                                                                 // 6096\n        contents = contents.join('');                                                                                  // 6097\n      }                                                                                                                // 6098\n                                                                                                                       // 6099\n      return '<' + nodeName + ' class=\"' + classes + '\">' + contents + '</' + nodeName + '>';                          // 6100\n    };                                                                                                                 // 6101\n                                                                                                                       // 6102\n    var tplButtonInfo = {                                                                                              // 6103\n      picture: function (lang, options) {                                                                              // 6104\n        return tplIconButton(options.iconPrefix + options.icons.image.image, {                                         // 6105\n          event: 'showImageDialog',                                                                                    // 6106\n          title: lang.image.image,                                                                                     // 6107\n          hide: true                                                                                                   // 6108\n        });                                                                                                            // 6109\n      },                                                                                                               // 6110\n      link: function (lang, options) {                                                                                 // 6111\n        return tplIconButton(options.iconPrefix + options.icons.link.link, {                                           // 6112\n          event: 'showLinkDialog',                                                                                     // 6113\n          title: lang.link.link,                                                                                       // 6114\n          hide: true                                                                                                   // 6115\n        });                                                                                                            // 6116\n      },                                                                                                               // 6117\n      table: function (lang, options) {                                                                                // 6118\n        var dropdown = [                                                                                               // 6119\n          '<div class=\"note-dimension-picker\">',                                                                       // 6120\n          '<div class=\"note-dimension-picker-mousecatcher\" data-event=\"insertTable\" data-value=\"1x1\"></div>',          // 6121\n          '<div class=\"note-dimension-picker-highlighted\"></div>',                                                     // 6122\n          '<div class=\"note-dimension-picker-unhighlighted\"></div>',                                                   // 6123\n          '</div>',                                                                                                    // 6124\n          '<div class=\"note-dimension-display\"> 1 x 1 </div>'                                                          // 6125\n        ];                                                                                                             // 6126\n                                                                                                                       // 6127\n        return tplIconButton(options.iconPrefix + options.icons.table.table, {                                         // 6128\n          title: lang.table.table,                                                                                     // 6129\n          dropdown: tplDropdown(dropdown, 'note-table')                                                                // 6130\n        });                                                                                                            // 6131\n      },                                                                                                               // 6132\n      style: function (lang, options) {                                                                                // 6133\n        var items = options.styleTags.reduce(function (memo, v) {                                                      // 6134\n          var label = lang.style[v === 'p' ? 'normal' : v];                                                            // 6135\n          return memo + '<li><a data-event=\"formatBlock\" href=\"#\" data-value=\"' + v + '\">' +                           // 6136\n                   (                                                                                                   // 6137\n                     (v === 'p' || v === 'pre') ? label :                                                              // 6138\n                     '<' + v + '>' + label + '</' + v + '>'                                                            // 6139\n                   ) +                                                                                                 // 6140\n                 '</a></li>';                                                                                          // 6141\n        }, '');                                                                                                        // 6142\n                                                                                                                       // 6143\n        return tplIconButton(options.iconPrefix + options.icons.style.style, {                                         // 6144\n          title: lang.style.style,                                                                                     // 6145\n          dropdown: tplDropdown(items)                                                                                 // 6146\n        });                                                                                                            // 6147\n      },                                                                                                               // 6148\n      fontname: function (lang, options) {                                                                             // 6149\n        var realFontList = [];                                                                                         // 6150\n        var items = options.fontNames.reduce(function (memo, v) {                                                      // 6151\n          if (!agent.isFontInstalled(v) && !list.contains(options.fontNamesIgnoreCheck, v)) {                          // 6152\n            return memo;                                                                                               // 6153\n          }                                                                                                            // 6154\n          realFontList.push(v);                                                                                        // 6155\n          return memo + '<li><a data-event=\"fontName\" href=\"#\" data-value=\"' + v + '\" style=\"font-family:\\'' + v + '\\'\">' +\n                          '<i class=\"' + options.iconPrefix + options.icons.misc.check + '\"></i> ' + v +               // 6157\n                        '</a></li>';                                                                                   // 6158\n        }, '');                                                                                                        // 6159\n                                                                                                                       // 6160\n        var hasDefaultFont = agent.isFontInstalled(options.defaultFontName);                                           // 6161\n        var defaultFontName = (hasDefaultFont) ? options.defaultFontName : realFontList[0];                            // 6162\n                                                                                                                       // 6163\n        var label = '<span class=\"note-current-fontname\">' +                                                           // 6164\n                        defaultFontName +                                                                              // 6165\n                     '</span>';                                                                                        // 6166\n        return tplButton(label, {                                                                                      // 6167\n          title: lang.font.name,                                                                                       // 6168\n          className: 'note-fontname',                                                                                  // 6169\n          dropdown: tplDropdown(items, 'note-check')                                                                   // 6170\n        });                                                                                                            // 6171\n      },                                                                                                               // 6172\n      fontsize: function (lang, options) {                                                                             // 6173\n        var items = options.fontSizes.reduce(function (memo, v) {                                                      // 6174\n          return memo + '<li><a data-event=\"fontSize\" href=\"#\" data-value=\"' + v + '\">' +                              // 6175\n                          '<i class=\"' + options.iconPrefix + options.icons.misc.check + '\"></i> ' + v +               // 6176\n                        '</a></li>';                                                                                   // 6177\n        }, '');                                                                                                        // 6178\n                                                                                                                       // 6179\n        var label = '<span class=\"note-current-fontsize\">11</span>';                                                   // 6180\n        return tplButton(label, {                                                                                      // 6181\n          title: lang.font.size,                                                                                       // 6182\n          className: 'note-fontsize',                                                                                  // 6183\n          dropdown: tplDropdown(items, 'note-check')                                                                   // 6184\n        });                                                                                                            // 6185\n      },                                                                                                               // 6186\n      color: function (lang, options) {                                                                                // 6187\n        var colorButtonLabel = '<i class=\"' +                                                                          // 6188\n                                  options.iconPrefix + options.icons.color.recent +                                    // 6189\n                                '\" style=\"color:black;background-color:yellow;\"></i>';                                 // 6190\n                                                                                                                       // 6191\n        var colorButton = tplButton(colorButtonLabel, {                                                                // 6192\n          className: 'note-recent-color',                                                                              // 6193\n          title: lang.color.recent,                                                                                    // 6194\n          event: 'color',                                                                                              // 6195\n          value: '{\"backColor\":\"yellow\"}'                                                                              // 6196\n        });                                                                                                            // 6197\n                                                                                                                       // 6198\n        var items = [                                                                                                  // 6199\n          '<li><div class=\"btn-group\">',                                                                               // 6200\n          '<div class=\"note-palette-title\">' + lang.color.background + '</div>',                                       // 6201\n          '<div class=\"note-color-reset\" data-event=\"backColor\"',                                                      // 6202\n          ' data-value=\"inherit\" title=\"' + lang.color.transparent + '\">' + lang.color.setTransparent + '</div>',      // 6203\n          '<div class=\"note-color-palette\" data-target-event=\"backColor\"></div>',                                      // 6204\n          '</div><div class=\"btn-group\">',                                                                             // 6205\n          '<div class=\"note-palette-title\">' + lang.color.foreground + '</div>',                                       // 6206\n          '<div class=\"note-color-reset\" data-event=\"foreColor\" data-value=\"inherit\" title=\"' + lang.color.reset + '\">',\n          lang.color.resetToDefault,                                                                                   // 6208\n          '</div>',                                                                                                    // 6209\n          '<div class=\"note-color-palette\" data-target-event=\"foreColor\"></div>',                                      // 6210\n          '</div></li>'                                                                                                // 6211\n        ];                                                                                                             // 6212\n                                                                                                                       // 6213\n        var moreButton = tplButton('', {                                                                               // 6214\n          title: lang.color.more,                                                                                      // 6215\n          dropdown: tplDropdown(items)                                                                                 // 6216\n        });                                                                                                            // 6217\n                                                                                                                       // 6218\n        return colorButton + moreButton;                                                                               // 6219\n      },                                                                                                               // 6220\n      bold: function (lang, options) {                                                                                 // 6221\n        return tplIconButton(options.iconPrefix + options.icons.font.bold, {                                           // 6222\n          event: 'bold',                                                                                               // 6223\n          title: lang.font.bold                                                                                        // 6224\n        });                                                                                                            // 6225\n      },                                                                                                               // 6226\n      italic: function (lang, options) {                                                                               // 6227\n        return tplIconButton(options.iconPrefix + options.icons.font.italic, {                                         // 6228\n          event: 'italic',                                                                                             // 6229\n          title: lang.font.italic                                                                                      // 6230\n        });                                                                                                            // 6231\n      },                                                                                                               // 6232\n      underline: function (lang, options) {                                                                            // 6233\n        return tplIconButton(options.iconPrefix + options.icons.font.underline, {                                      // 6234\n          event: 'underline',                                                                                          // 6235\n          title: lang.font.underline                                                                                   // 6236\n        });                                                                                                            // 6237\n      },                                                                                                               // 6238\n      strikethrough: function (lang, options) {                                                                        // 6239\n        return tplIconButton(options.iconPrefix + options.icons.font.strikethrough, {                                  // 6240\n          event: 'strikethrough',                                                                                      // 6241\n          title: lang.font.strikethrough                                                                               // 6242\n        });                                                                                                            // 6243\n      },                                                                                                               // 6244\n      superscript: function (lang, options) {                                                                          // 6245\n        return tplIconButton(options.iconPrefix + options.icons.font.superscript, {                                    // 6246\n          event: 'superscript',                                                                                        // 6247\n          title: lang.font.superscript                                                                                 // 6248\n        });                                                                                                            // 6249\n      },                                                                                                               // 6250\n      subscript: function (lang, options) {                                                                            // 6251\n        return tplIconButton(options.iconPrefix + options.icons.font.subscript, {                                      // 6252\n          event: 'subscript',                                                                                          // 6253\n          title: lang.font.subscript                                                                                   // 6254\n        });                                                                                                            // 6255\n      },                                                                                                               // 6256\n      clear: function (lang, options) {                                                                                // 6257\n        return tplIconButton(options.iconPrefix + options.icons.font.clear, {                                          // 6258\n          event: 'removeFormat',                                                                                       // 6259\n          title: lang.font.clear                                                                                       // 6260\n        });                                                                                                            // 6261\n      },                                                                                                               // 6262\n      ul: function (lang, options) {                                                                                   // 6263\n        return tplIconButton(options.iconPrefix + options.icons.lists.unordered, {                                     // 6264\n          event: 'insertUnorderedList',                                                                                // 6265\n          title: lang.lists.unordered                                                                                  // 6266\n        });                                                                                                            // 6267\n      },                                                                                                               // 6268\n      ol: function (lang, options) {                                                                                   // 6269\n        return tplIconButton(options.iconPrefix + options.icons.lists.ordered, {                                       // 6270\n          event: 'insertOrderedList',                                                                                  // 6271\n          title: lang.lists.ordered                                                                                    // 6272\n        });                                                                                                            // 6273\n      },                                                                                                               // 6274\n      paragraph: function (lang, options) {                                                                            // 6275\n        var leftButton = tplIconButton(options.iconPrefix + options.icons.paragraph.left, {                            // 6276\n          title: lang.paragraph.left,                                                                                  // 6277\n          event: 'justifyLeft'                                                                                         // 6278\n        });                                                                                                            // 6279\n        var centerButton = tplIconButton(options.iconPrefix + options.icons.paragraph.center, {                        // 6280\n          title: lang.paragraph.center,                                                                                // 6281\n          event: 'justifyCenter'                                                                                       // 6282\n        });                                                                                                            // 6283\n        var rightButton = tplIconButton(options.iconPrefix + options.icons.paragraph.right, {                          // 6284\n          title: lang.paragraph.right,                                                                                 // 6285\n          event: 'justifyRight'                                                                                        // 6286\n        });                                                                                                            // 6287\n        var justifyButton = tplIconButton(options.iconPrefix + options.icons.paragraph.justify, {                      // 6288\n          title: lang.paragraph.justify,                                                                               // 6289\n          event: 'justifyFull'                                                                                         // 6290\n        });                                                                                                            // 6291\n                                                                                                                       // 6292\n        var outdentButton = tplIconButton(options.iconPrefix + options.icons.paragraph.outdent, {                      // 6293\n          title: lang.paragraph.outdent,                                                                               // 6294\n          event: 'outdent'                                                                                             // 6295\n        });                                                                                                            // 6296\n        var indentButton = tplIconButton(options.iconPrefix + options.icons.paragraph.indent, {                        // 6297\n          title: lang.paragraph.indent,                                                                                // 6298\n          event: 'indent'                                                                                              // 6299\n        });                                                                                                            // 6300\n                                                                                                                       // 6301\n        var dropdown = [                                                                                               // 6302\n          '<div class=\"note-align btn-group\">',                                                                        // 6303\n          leftButton + centerButton + rightButton + justifyButton,                                                     // 6304\n          '</div><div class=\"note-list btn-group\">',                                                                   // 6305\n          indentButton + outdentButton,                                                                                // 6306\n          '</div>'                                                                                                     // 6307\n        ];                                                                                                             // 6308\n                                                                                                                       // 6309\n        return tplIconButton(options.iconPrefix + options.icons.paragraph.paragraph, {                                 // 6310\n          title: lang.paragraph.paragraph,                                                                             // 6311\n          dropdown: tplDropdown(dropdown, '', 'div')                                                                   // 6312\n        });                                                                                                            // 6313\n      },                                                                                                               // 6314\n      height: function (lang, options) {                                                                               // 6315\n        var items = options.lineHeights.reduce(function (memo, v) {                                                    // 6316\n          return memo + '<li><a data-event=\"lineHeight\" href=\"#\" data-value=\"' + parseFloat(v) + '\">' +                // 6317\n                          '<i class=\"' + options.iconPrefix + options.icons.misc.check + '\"></i> ' + v +               // 6318\n                        '</a></li>';                                                                                   // 6319\n        }, '');                                                                                                        // 6320\n                                                                                                                       // 6321\n        return tplIconButton(options.iconPrefix + options.icons.font.height, {                                         // 6322\n          title: lang.font.height,                                                                                     // 6323\n          dropdown: tplDropdown(items, 'note-check')                                                                   // 6324\n        });                                                                                                            // 6325\n                                                                                                                       // 6326\n      },                                                                                                               // 6327\n      help: function (lang, options) {                                                                                 // 6328\n        return tplIconButton(options.iconPrefix + options.icons.options.help, {                                        // 6329\n          event: 'showHelpDialog',                                                                                     // 6330\n          title: lang.options.help,                                                                                    // 6331\n          hide: true                                                                                                   // 6332\n        });                                                                                                            // 6333\n      },                                                                                                               // 6334\n      fullscreen: function (lang, options) {                                                                           // 6335\n        return tplIconButton(options.iconPrefix + options.icons.options.fullscreen, {                                  // 6336\n          event: 'fullscreen',                                                                                         // 6337\n          title: lang.options.fullscreen                                                                               // 6338\n        });                                                                                                            // 6339\n      },                                                                                                               // 6340\n      codeview: function (lang, options) {                                                                             // 6341\n        return tplIconButton(options.iconPrefix + options.icons.options.codeview, {                                    // 6342\n          event: 'codeview',                                                                                           // 6343\n          title: lang.options.codeview                                                                                 // 6344\n        });                                                                                                            // 6345\n      },                                                                                                               // 6346\n      undo: function (lang, options) {                                                                                 // 6347\n        return tplIconButton(options.iconPrefix + options.icons.history.undo, {                                        // 6348\n          event: 'undo',                                                                                               // 6349\n          title: lang.history.undo                                                                                     // 6350\n        });                                                                                                            // 6351\n      },                                                                                                               // 6352\n      redo: function (lang, options) {                                                                                 // 6353\n        return tplIconButton(options.iconPrefix + options.icons.history.redo, {                                        // 6354\n          event: 'redo',                                                                                               // 6355\n          title: lang.history.redo                                                                                     // 6356\n        });                                                                                                            // 6357\n      },                                                                                                               // 6358\n      hr: function (lang, options) {                                                                                   // 6359\n        return tplIconButton(options.iconPrefix + options.icons.hr.insert, {                                           // 6360\n          event: 'insertHorizontalRule',                                                                               // 6361\n          title: lang.hr.insert                                                                                        // 6362\n        });                                                                                                            // 6363\n      }                                                                                                                // 6364\n    };                                                                                                                 // 6365\n                                                                                                                       // 6366\n    var tplPopovers = function (lang, options) {                                                                       // 6367\n      var tplLinkPopover = function () {                                                                               // 6368\n        var linkButton = tplIconButton(options.iconPrefix + options.icons.link.edit, {                                 // 6369\n          title: lang.link.edit,                                                                                       // 6370\n          event: 'showLinkDialog',                                                                                     // 6371\n          hide: true                                                                                                   // 6372\n        });                                                                                                            // 6373\n        var unlinkButton = tplIconButton(options.iconPrefix + options.icons.link.unlink, {                             // 6374\n          title: lang.link.unlink,                                                                                     // 6375\n          event: 'unlink'                                                                                              // 6376\n        });                                                                                                            // 6377\n        var content = '<a href=\"http://www.google.com\" target=\"_blank\">www.google.com</a>&nbsp;&nbsp;' +               // 6378\n                      '<div class=\"note-insert btn-group\">' +                                                          // 6379\n                        linkButton + unlinkButton +                                                                    // 6380\n                      '</div>';                                                                                        // 6381\n        return tplPopover('note-link-popover', content);                                                               // 6382\n      };                                                                                                               // 6383\n                                                                                                                       // 6384\n      var tplImagePopover = function () {                                                                              // 6385\n        var fullButton = tplButton('<span class=\"note-fontsize-10\">100%</span>', {                                     // 6386\n          title: lang.image.resizeFull,                                                                                // 6387\n          event: 'resize',                                                                                             // 6388\n          value: '1'                                                                                                   // 6389\n        });                                                                                                            // 6390\n        var halfButton = tplButton('<span class=\"note-fontsize-10\">50%</span>', {                                      // 6391\n          title: lang.image.resizeHalf,                                                                                // 6392\n          event: 'resize',                                                                                             // 6393\n          value: '0.5'                                                                                                 // 6394\n        });                                                                                                            // 6395\n        var quarterButton = tplButton('<span class=\"note-fontsize-10\">25%</span>', {                                   // 6396\n          title: lang.image.resizeQuarter,                                                                             // 6397\n          event: 'resize',                                                                                             // 6398\n          value: '0.25'                                                                                                // 6399\n        });                                                                                                            // 6400\n                                                                                                                       // 6401\n        var leftButton = tplIconButton(options.iconPrefix + options.icons.image.floatLeft, {                           // 6402\n          title: lang.image.floatLeft,                                                                                 // 6403\n          event: 'floatMe',                                                                                            // 6404\n          value: 'left'                                                                                                // 6405\n        });                                                                                                            // 6406\n        var rightButton = tplIconButton(options.iconPrefix + options.icons.image.floatRight, {                         // 6407\n          title: lang.image.floatRight,                                                                                // 6408\n          event: 'floatMe',                                                                                            // 6409\n          value: 'right'                                                                                               // 6410\n        });                                                                                                            // 6411\n        var justifyButton = tplIconButton(options.iconPrefix + options.icons.image.floatNone, {                        // 6412\n          title: lang.image.floatNone,                                                                                 // 6413\n          event: 'floatMe',                                                                                            // 6414\n          value: 'none'                                                                                                // 6415\n        });                                                                                                            // 6416\n                                                                                                                       // 6417\n        var roundedButton = tplIconButton(options.iconPrefix + options.icons.image.shapeRounded, {                     // 6418\n          title: lang.image.shapeRounded,                                                                              // 6419\n          event: 'imageShape',                                                                                         // 6420\n          value: 'img-rounded'                                                                                         // 6421\n        });                                                                                                            // 6422\n        var circleButton = tplIconButton(options.iconPrefix + options.icons.image.shapeCircle, {                       // 6423\n          title: lang.image.shapeCircle,                                                                               // 6424\n          event: 'imageShape',                                                                                         // 6425\n          value: 'img-circle'                                                                                          // 6426\n        });                                                                                                            // 6427\n        var thumbnailButton = tplIconButton(options.iconPrefix + options.icons.image.shapeThumbnail, {                 // 6428\n          title: lang.image.shapeThumbnail,                                                                            // 6429\n          event: 'imageShape',                                                                                         // 6430\n          value: 'img-thumbnail'                                                                                       // 6431\n        });                                                                                                            // 6432\n        var noneButton = tplIconButton(options.iconPrefix + options.icons.image.shapeNone, {                           // 6433\n          title: lang.image.shapeNone,                                                                                 // 6434\n          event: 'imageShape',                                                                                         // 6435\n          value: ''                                                                                                    // 6436\n        });                                                                                                            // 6437\n                                                                                                                       // 6438\n        var removeButton = tplIconButton(options.iconPrefix + options.icons.image.remove, {                            // 6439\n          title: lang.image.remove,                                                                                    // 6440\n          event: 'removeMedia',                                                                                        // 6441\n          value: 'none'                                                                                                // 6442\n        });                                                                                                            // 6443\n                                                                                                                       // 6444\n        var content = (options.disableResizeImage ? '' : '<div class=\"btn-group\">' + fullButton + halfButton + quarterButton + '</div>') +\n                      '<div class=\"btn-group\">' + leftButton + rightButton + justifyButton + '</div><br>' +            // 6446\n                      '<div class=\"btn-group\">' + roundedButton + circleButton + thumbnailButton + noneButton + '</div>' +\n                      '<div class=\"btn-group\">' + removeButton + '</div>';                                             // 6448\n        return tplPopover('note-image-popover', content);                                                              // 6449\n      };                                                                                                               // 6450\n                                                                                                                       // 6451\n      var tplAirPopover = function () {                                                                                // 6452\n        var $content = $('<div />');                                                                                   // 6453\n        for (var idx = 0, len = options.airPopover.length; idx < len; idx ++) {                                        // 6454\n          var group = options.airPopover[idx];                                                                         // 6455\n                                                                                                                       // 6456\n          var $group = $('<div class=\"note-' + group[0] + ' btn-group\">');                                             // 6457\n          for (var i = 0, lenGroup = group[1].length; i < lenGroup; i++) {                                             // 6458\n            var $button = $(tplButtonInfo[group[1][i]](lang, options));                                                // 6459\n                                                                                                                       // 6460\n            $button.attr('data-name', group[1][i]);                                                                    // 6461\n                                                                                                                       // 6462\n            $group.append($button);                                                                                    // 6463\n          }                                                                                                            // 6464\n          $content.append($group);                                                                                     // 6465\n        }                                                                                                              // 6466\n                                                                                                                       // 6467\n        return tplPopover('note-air-popover', $content.children());                                                    // 6468\n      };                                                                                                               // 6469\n                                                                                                                       // 6470\n      var $notePopover = $('<div class=\"note-popover\" />');                                                            // 6471\n                                                                                                                       // 6472\n      $notePopover.append(tplLinkPopover());                                                                           // 6473\n      $notePopover.append(tplImagePopover());                                                                          // 6474\n                                                                                                                       // 6475\n      if (options.airMode) {                                                                                           // 6476\n        $notePopover.append(tplAirPopover());                                                                          // 6477\n      }                                                                                                                // 6478\n                                                                                                                       // 6479\n      return $notePopover;                                                                                             // 6480\n    };                                                                                                                 // 6481\n                                                                                                                       // 6482\n    var tplHandles = function (options) {                                                                              // 6483\n      return '<div class=\"note-handle\">' +                                                                             // 6484\n               '<div class=\"note-control-selection\">' +                                                                // 6485\n                 '<div class=\"note-control-selection-bg\"></div>' +                                                     // 6486\n                 '<div class=\"note-control-holder note-control-nw\"></div>' +                                           // 6487\n                 '<div class=\"note-control-holder note-control-ne\"></div>' +                                           // 6488\n                 '<div class=\"note-control-holder note-control-sw\"></div>' +                                           // 6489\n                 '<div class=\"' +                                                                                      // 6490\n                 (options.disableResizeImage ? 'note-control-holder' : 'note-control-sizing') +                        // 6491\n                 ' note-control-se\"></div>' +                                                                          // 6492\n                 (options.disableResizeImage ? '' : '<div class=\"note-control-selection-info\"></div>') +               // 6493\n               '</div>' +                                                                                              // 6494\n             '</div>';                                                                                                 // 6495\n    };                                                                                                                 // 6496\n                                                                                                                       // 6497\n    /**                                                                                                                // 6498\n     * shortcut table template                                                                                         // 6499\n     * @param {String} title                                                                                           // 6500\n     * @param {String} body                                                                                            // 6501\n     */                                                                                                                // 6502\n    var tplShortcut = function (title, keys) {                                                                         // 6503\n      var keyClass = 'note-shortcut-col col-xs-6 note-shortcut-';                                                      // 6504\n      var body = [];                                                                                                   // 6505\n                                                                                                                       // 6506\n      for (var i in keys) {                                                                                            // 6507\n        if (keys.hasOwnProperty(i)) {                                                                                  // 6508\n          body.push(                                                                                                   // 6509\n            '<div class=\"' + keyClass + 'key\">' + keys[i].kbd + '</div>' +                                             // 6510\n            '<div class=\"' + keyClass + 'name\">' + keys[i].text + '</div>'                                             // 6511\n            );                                                                                                         // 6512\n        }                                                                                                              // 6513\n      }                                                                                                                // 6514\n                                                                                                                       // 6515\n      return '<div class=\"note-shortcut-row row\"><div class=\"' + keyClass + 'title col-xs-offset-6\">' + title + '</div></div>' +\n             '<div class=\"note-shortcut-row row\">' + body.join('</div><div class=\"note-shortcut-row row\">') + '</div>';\n    };                                                                                                                 // 6518\n                                                                                                                       // 6519\n    var tplShortcutText = function (lang) {                                                                            // 6520\n      var keys = [                                                                                                     // 6521\n        { kbd: '⌘ + B', text: lang.font.bold },                                                                        // 6522\n        { kbd: '⌘ + I', text: lang.font.italic },                                                                      // 6523\n        { kbd: '⌘ + U', text: lang.font.underline },                                                                   // 6524\n        { kbd: '⌘ + \\\\', text: lang.font.clear }                                                                       // 6525\n      ];                                                                                                               // 6526\n                                                                                                                       // 6527\n      return tplShortcut(lang.shortcut.textFormatting, keys);                                                          // 6528\n    };                                                                                                                 // 6529\n                                                                                                                       // 6530\n    var tplShortcutAction = function (lang) {                                                                          // 6531\n      var keys = [                                                                                                     // 6532\n        { kbd: '⌘ + Z', text: lang.history.undo },                                                                     // 6533\n        { kbd: '⌘ + ⇧ + Z', text: lang.history.redo },                                                                 // 6534\n        { kbd: '⌘ + ]', text: lang.paragraph.indent },                                                                 // 6535\n        { kbd: '⌘ + [', text: lang.paragraph.outdent },                                                                // 6536\n        { kbd: '⌘ + ENTER', text: lang.hr.insert }                                                                     // 6537\n      ];                                                                                                               // 6538\n                                                                                                                       // 6539\n      return tplShortcut(lang.shortcut.action, keys);                                                                  // 6540\n    };                                                                                                                 // 6541\n                                                                                                                       // 6542\n    var tplShortcutPara = function (lang) {                                                                            // 6543\n      var keys = [                                                                                                     // 6544\n        { kbd: '⌘ + ⇧ + L', text: lang.paragraph.left },                                                               // 6545\n        { kbd: '⌘ + ⇧ + E', text: lang.paragraph.center },                                                             // 6546\n        { kbd: '⌘ + ⇧ + R', text: lang.paragraph.right },                                                              // 6547\n        { kbd: '⌘ + ⇧ + J', text: lang.paragraph.justify },                                                            // 6548\n        { kbd: '⌘ + ⇧ + NUM7', text: lang.lists.ordered },                                                             // 6549\n        { kbd: '⌘ + ⇧ + NUM8', text: lang.lists.unordered }                                                            // 6550\n      ];                                                                                                               // 6551\n                                                                                                                       // 6552\n      return tplShortcut(lang.shortcut.paragraphFormatting, keys);                                                     // 6553\n    };                                                                                                                 // 6554\n                                                                                                                       // 6555\n    var tplShortcutStyle = function (lang) {                                                                           // 6556\n      var keys = [                                                                                                     // 6557\n        { kbd: '⌘ + NUM0', text: lang.style.normal },                                                                  // 6558\n        { kbd: '⌘ + NUM1', text: lang.style.h1 },                                                                      // 6559\n        { kbd: '⌘ + NUM2', text: lang.style.h2 },                                                                      // 6560\n        { kbd: '⌘ + NUM3', text: lang.style.h3 },                                                                      // 6561\n        { kbd: '⌘ + NUM4', text: lang.style.h4 },                                                                      // 6562\n        { kbd: '⌘ + NUM5', text: lang.style.h5 },                                                                      // 6563\n        { kbd: '⌘ + NUM6', text: lang.style.h6 }                                                                       // 6564\n      ];                                                                                                               // 6565\n                                                                                                                       // 6566\n      return tplShortcut(lang.shortcut.documentStyle, keys);                                                           // 6567\n    };                                                                                                                 // 6568\n                                                                                                                       // 6569\n    var tplExtraShortcuts = function (lang, options) {                                                                 // 6570\n      var extraKeys = options.extraKeys;                                                                               // 6571\n      var keys = [];                                                                                                   // 6572\n                                                                                                                       // 6573\n      for (var key in extraKeys) {                                                                                     // 6574\n        if (extraKeys.hasOwnProperty(key)) {                                                                           // 6575\n          keys.push({ kbd: key, text: extraKeys[key] });                                                               // 6576\n        }                                                                                                              // 6577\n      }                                                                                                                // 6578\n                                                                                                                       // 6579\n      return tplShortcut(lang.shortcut.extraKeys, keys);                                                               // 6580\n    };                                                                                                                 // 6581\n                                                                                                                       // 6582\n    var tplShortcutTable = function (lang, options) {                                                                  // 6583\n      var colClass = 'class=\"note-shortcut note-shortcut-col col-sm-6 col-xs-12\"';                                     // 6584\n      var template = [                                                                                                 // 6585\n        '<div ' + colClass + '>' + tplShortcutAction(lang, options) + '</div>' +                                       // 6586\n        '<div ' + colClass + '>' + tplShortcutText(lang, options) + '</div>',                                          // 6587\n        '<div ' + colClass + '>' + tplShortcutStyle(lang, options) + '</div>' +                                        // 6588\n        '<div ' + colClass + '>' + tplShortcutPara(lang, options) + '</div>'                                           // 6589\n      ];                                                                                                               // 6590\n                                                                                                                       // 6591\n      if (options.extraKeys) {                                                                                         // 6592\n        template.push('<div ' + colClass + '>' + tplExtraShortcuts(lang, options) + '</div>');                         // 6593\n      }                                                                                                                // 6594\n                                                                                                                       // 6595\n      return '<div class=\"note-shortcut-row row\">' +                                                                   // 6596\n               template.join('</div><div class=\"note-shortcut-row row\">') +                                            // 6597\n             '</div>';                                                                                                 // 6598\n    };                                                                                                                 // 6599\n                                                                                                                       // 6600\n    var replaceMacKeys = function (sHtml) {                                                                            // 6601\n      return sHtml.replace(/⌘/g, 'Ctrl').replace(/⇧/g, 'Shift');                                                       // 6602\n    };                                                                                                                 // 6603\n                                                                                                                       // 6604\n    var tplDialogInfo = {                                                                                              // 6605\n      image: function (lang, options) {                                                                                // 6606\n        var imageLimitation = '';                                                                                      // 6607\n        if (options.maximumImageFileSize) {                                                                            // 6608\n          var unit = Math.floor(Math.log(options.maximumImageFileSize) / Math.log(1024));                              // 6609\n          var readableSize = (options.maximumImageFileSize / Math.pow(1024, unit)).toFixed(2) * 1 +                    // 6610\n                             ' ' + ' KMGTP'[unit] + 'B';                                                               // 6611\n          imageLimitation = '<small>' + lang.image.maximumFileSize + ' : ' + readableSize + '</small>';                // 6612\n        }                                                                                                              // 6613\n                                                                                                                       // 6614\n        var body = '<div class=\"form-group row note-group-select-from-files\">' +                                       // 6615\n                     '<label>' + lang.image.selectFromFiles + '</label>' +                                             // 6616\n                     '<input class=\"note-image-input form-control\" type=\"file\" name=\"files\" accept=\"image/*\" multiple=\"multiple\" />' +\n                     imageLimitation +                                                                                 // 6618\n                   '</div>' +                                                                                          // 6619\n                   '<div class=\"form-group row\">' +                                                                    // 6620\n                     '<label>' + lang.image.url + '</label>' +                                                         // 6621\n                     '<input class=\"note-image-url form-control col-md-12\" type=\"text\" />' +                           // 6622\n                   '</div>';                                                                                           // 6623\n        var footer = '<button href=\"#\" class=\"btn btn-primary note-image-btn disabled\" disabled>' + lang.image.insert + '</button>';\n        return tplDialog('note-image-dialog', lang.image.insert, body, footer);                                        // 6625\n      },                                                                                                               // 6626\n                                                                                                                       // 6627\n      link: function (lang, options) {                                                                                 // 6628\n        var body = '<div class=\"form-group row\">' +                                                                    // 6629\n                     '<label>' + lang.link.textToDisplay + '</label>' +                                                // 6630\n                     '<input class=\"note-link-text form-control col-md-12\" type=\"text\" />' +                           // 6631\n                   '</div>' +                                                                                          // 6632\n                   '<div class=\"form-group row\">' +                                                                    // 6633\n                     '<label>' + lang.link.url + '</label>' +                                                          // 6634\n                     '<input class=\"note-link-url form-control col-md-12\" type=\"text\" value=\"http://\" />' +            // 6635\n                   '</div>' +                                                                                          // 6636\n                   (!options.disableLinkTarget ?                                                                       // 6637\n                     '<div class=\"checkbox\">' +                                                                        // 6638\n                       '<label>' + '<input type=\"checkbox\" checked> ' +                                                // 6639\n                         lang.link.openInNewWindow +                                                                   // 6640\n                       '</label>' +                                                                                    // 6641\n                     '</div>' : ''                                                                                     // 6642\n                   );                                                                                                  // 6643\n        var footer = '<button href=\"#\" class=\"btn btn-primary note-link-btn disabled\" disabled>' + lang.link.insert + '</button>';\n        return tplDialog('note-link-dialog', lang.link.insert, body, footer);                                          // 6645\n      },                                                                                                               // 6646\n                                                                                                                       // 6647\n      help: function (lang, options) {                                                                                 // 6648\n        var body = '<a class=\"modal-close pull-right\" aria-hidden=\"true\" tabindex=\"-1\">' + lang.shortcut.close + '</a>' +\n                   '<div class=\"title\">' + lang.shortcut.shortcuts + '</div>' +                                        // 6650\n                   (agent.isMac ? tplShortcutTable(lang, options) : replaceMacKeys(tplShortcutTable(lang, options))) + // 6651\n                   '<p class=\"text-center\">' +                                                                         // 6652\n                     '<a href=\"//summernote.org/\" target=\"_blank\">Summernote 0.6.16</a> · ' +                          // 6653\n                     '<a href=\"//github.com/summernote/summernote\" target=\"_blank\">Project</a> · ' +                   // 6654\n                     '<a href=\"//github.com/summernote/summernote/issues\" target=\"_blank\">Issues</a>' +                // 6655\n                   '</p>';                                                                                             // 6656\n        return tplDialog('note-help-dialog', '', body, '');                                                            // 6657\n      }                                                                                                                // 6658\n    };                                                                                                                 // 6659\n                                                                                                                       // 6660\n    var tplDialogs = function (lang, options) {                                                                        // 6661\n      var dialogs = '';                                                                                                // 6662\n                                                                                                                       // 6663\n      $.each(tplDialogInfo, function (idx, tplDialog) {                                                                // 6664\n        dialogs += tplDialog(lang, options);                                                                           // 6665\n      });                                                                                                              // 6666\n                                                                                                                       // 6667\n      return '<div class=\"note-dialog\">' + dialogs + '</div>';                                                         // 6668\n    };                                                                                                                 // 6669\n                                                                                                                       // 6670\n    var tplStatusbar = function () {                                                                                   // 6671\n      return '<div class=\"note-resizebar\">' +                                                                          // 6672\n               '<div class=\"note-icon-bar\"></div>' +                                                                   // 6673\n               '<div class=\"note-icon-bar\"></div>' +                                                                   // 6674\n               '<div class=\"note-icon-bar\"></div>' +                                                                   // 6675\n             '</div>';                                                                                                 // 6676\n    };                                                                                                                 // 6677\n                                                                                                                       // 6678\n    var representShortcut = function (str) {                                                                           // 6679\n      if (agent.isMac) {                                                                                               // 6680\n        str = str.replace('CMD', '⌘').replace('SHIFT', '⇧');                                                           // 6681\n      }                                                                                                                // 6682\n                                                                                                                       // 6683\n      return str.replace('BACKSLASH', '\\\\')                                                                            // 6684\n                .replace('SLASH', '/')                                                                                 // 6685\n                .replace('LEFTBRACKET', '[')                                                                           // 6686\n                .replace('RIGHTBRACKET', ']');                                                                         // 6687\n    };                                                                                                                 // 6688\n                                                                                                                       // 6689\n    /**                                                                                                                // 6690\n     * createTooltip                                                                                                   // 6691\n     *                                                                                                                 // 6692\n     * @param {jQuery} $container                                                                                      // 6693\n     * @param {Object} keyMap                                                                                          // 6694\n     * @param {String} [sPlacement]                                                                                    // 6695\n     */                                                                                                                // 6696\n    var createTooltip = function ($container, keyMap, sPlacement) {                                                    // 6697\n      var invertedKeyMap = func.invertObject(keyMap);                                                                  // 6698\n      var $buttons = $container.find('button');                                                                        // 6699\n                                                                                                                       // 6700\n      $buttons.each(function (i, elBtn) {                                                                              // 6701\n        var $btn = $(elBtn);                                                                                           // 6702\n        var sShortcut = invertedKeyMap[$btn.data('event')];                                                            // 6703\n        if (sShortcut) {                                                                                               // 6704\n          $btn.attr('title', function (i, v) {                                                                         // 6705\n            return v + ' (' + representShortcut(sShortcut) + ')';                                                      // 6706\n          });                                                                                                          // 6707\n        }                                                                                                              // 6708\n      // bootstrap tooltip on btn-group bug                                                                            // 6709\n      // https://github.com/twbs/bootstrap/issues/5687                                                                 // 6710\n      }).tooltip({                                                                                                     // 6711\n        container: 'body',                                                                                             // 6712\n        trigger: 'hover',                                                                                              // 6713\n        placement: sPlacement || 'top'                                                                                 // 6714\n      }).on('click', function () {                                                                                     // 6715\n        $(this).tooltip('hide');                                                                                       // 6716\n      });                                                                                                              // 6717\n    };                                                                                                                 // 6718\n                                                                                                                       // 6719\n    // createPalette                                                                                                   // 6720\n    var createPalette = function ($container, options) {                                                               // 6721\n      var colorInfo = options.colors;                                                                                  // 6722\n      $container.find('.note-color-palette').each(function () {                                                        // 6723\n        var $palette = $(this), eventName = $palette.attr('data-target-event');                                        // 6724\n        var paletteContents = [];                                                                                      // 6725\n        for (var row = 0, lenRow = colorInfo.length; row < lenRow; row++) {                                            // 6726\n          var colors = colorInfo[row];                                                                                 // 6727\n          var buttons = [];                                                                                            // 6728\n          for (var col = 0, lenCol = colors.length; col < lenCol; col++) {                                             // 6729\n            var color = colors[col];                                                                                   // 6730\n            buttons.push(['<button type=\"button\" class=\"note-color-btn\" style=\"background-color:', color,              // 6731\n                           ';\" data-event=\"', eventName,                                                               // 6732\n                           '\" data-value=\"', color,                                                                    // 6733\n                           '\" title=\"', color,                                                                         // 6734\n                           '\" data-toggle=\"button\" tabindex=\"-1\"></button>'].join(''));                                // 6735\n          }                                                                                                            // 6736\n          paletteContents.push('<div class=\"note-color-row\">' + buttons.join('') + '</div>');                          // 6737\n        }                                                                                                              // 6738\n        $palette.html(paletteContents.join(''));                                                                       // 6739\n      });                                                                                                              // 6740\n    };                                                                                                                 // 6741\n                                                                                                                       // 6742\n    /**                                                                                                                // 6743\n     * create summernote layout (air mode)                                                                             // 6744\n     *                                                                                                                 // 6745\n     * @param {jQuery} $holder                                                                                         // 6746\n     * @param {Object} options                                                                                         // 6747\n     */                                                                                                                // 6748\n    this.createLayoutByAirMode = function ($holder, options) {                                                         // 6749\n      var langInfo = options.langInfo;                                                                                 // 6750\n      var keyMap = options.keyMap[agent.isMac ? 'mac' : 'pc'];                                                         // 6751\n      var id = func.uniqueId();                                                                                        // 6752\n                                                                                                                       // 6753\n      $holder.addClass('note-air-editor note-editable panel-body');                                                    // 6754\n      $holder.attr({                                                                                                   // 6755\n        'id': 'note-editor-' + id,                                                                                     // 6756\n        'contentEditable': true                                                                                        // 6757\n      });                                                                                                              // 6758\n                                                                                                                       // 6759\n      var body = document.body;                                                                                        // 6760\n                                                                                                                       // 6761\n      // create Popover                                                                                                // 6762\n      var $popover = $(tplPopovers(langInfo, options));                                                                // 6763\n      $popover.addClass('note-air-layout');                                                                            // 6764\n      $popover.attr('id', 'note-popover-' + id);                                                                       // 6765\n      $popover.appendTo(body);                                                                                         // 6766\n      createTooltip($popover, keyMap);                                                                                 // 6767\n      createPalette($popover, options);                                                                                // 6768\n                                                                                                                       // 6769\n      // create Handle                                                                                                 // 6770\n      var $handle = $(tplHandles(options));                                                                            // 6771\n      $handle.addClass('note-air-layout');                                                                             // 6772\n      $handle.attr('id', 'note-handle-' + id);                                                                         // 6773\n      $handle.appendTo(body);                                                                                          // 6774\n                                                                                                                       // 6775\n      // create Dialog                                                                                                 // 6776\n      var $dialog = $(tplDialogs(langInfo, options));                                                                  // 6777\n      $dialog.addClass('note-air-layout');                                                                             // 6778\n      $dialog.attr('id', 'note-dialog-' + id);                                                                         // 6779\n      $dialog.find('button.close, a.modal-close').click(function () {                                                  // 6780\n        $(this).closest('.modal').modal('hide');                                                                       // 6781\n      });                                                                                                              // 6782\n      $dialog.appendTo(body);                                                                                          // 6783\n    };                                                                                                                 // 6784\n                                                                                                                       // 6785\n    /**                                                                                                                // 6786\n     * create summernote layout (normal mode)                                                                          // 6787\n     *                                                                                                                 // 6788\n     * @param {jQuery} $holder                                                                                         // 6789\n     * @param {Object} options                                                                                         // 6790\n     */                                                                                                                // 6791\n    this.createLayoutByFrame = function ($holder, options) {                                                           // 6792\n      var langInfo = options.langInfo;                                                                                 // 6793\n                                                                                                                       // 6794\n      //01. create Editor                                                                                              // 6795\n      var $editor = $('<div class=\"note-editor panel panel-default\" />');                                              // 6796\n      if (options.width) {                                                                                             // 6797\n        $editor.width(options.width);                                                                                  // 6798\n      }                                                                                                                // 6799\n                                                                                                                       // 6800\n      //02. statusbar (resizebar)                                                                                      // 6801\n      if (options.height > 0) {                                                                                        // 6802\n        $('<div class=\"note-statusbar\">' + (options.disableResizeEditor ? '' : tplStatusbar()) + '</div>').prependTo($editor);\n      }                                                                                                                // 6804\n                                                                                                                       // 6805\n      //03 editing area                                                                                                // 6806\n      var $editingArea = $('<div class=\"note-editing-area\" />');                                                       // 6807\n      //03. create editable                                                                                            // 6808\n      var isContentEditable = !$holder.is(':disabled');                                                                // 6809\n      var $editable = $('<div class=\"note-editable panel-body\" contentEditable=\"' + isContentEditable + '\"></div>').prependTo($editingArea);\n                                                                                                                       // 6811\n      if (options.height) {                                                                                            // 6812\n        $editable.height(options.height);                                                                              // 6813\n      }                                                                                                                // 6814\n      if (options.direction) {                                                                                         // 6815\n        $editable.attr('dir', options.direction);                                                                      // 6816\n      }                                                                                                                // 6817\n      var placeholder = $holder.attr('placeholder') || options.placeholder;                                            // 6818\n      if (placeholder) {                                                                                               // 6819\n        $editable.attr('data-placeholder', placeholder);                                                               // 6820\n      }                                                                                                                // 6821\n                                                                                                                       // 6822\n      $editable.html(dom.html($holder) || dom.emptyPara);                                                              // 6823\n                                                                                                                       // 6824\n      //031. create codable                                                                                            // 6825\n      $('<textarea class=\"note-codable\"></textarea>').prependTo($editingArea);                                         // 6826\n                                                                                                                       // 6827\n      //04. create Popover                                                                                             // 6828\n      var $popover = $(tplPopovers(langInfo, options)).prependTo($editingArea);                                        // 6829\n      createPalette($popover, options);                                                                                // 6830\n      createTooltip($popover, keyMap);                                                                                 // 6831\n                                                                                                                       // 6832\n      //05. handle(control selection, ...)                                                                             // 6833\n      $(tplHandles(options)).prependTo($editingArea);                                                                  // 6834\n                                                                                                                       // 6835\n      $editingArea.prependTo($editor);                                                                                 // 6836\n                                                                                                                       // 6837\n      //06. create Toolbar                                                                                             // 6838\n      var $toolbar = $('<div class=\"note-toolbar panel-heading\" />');                                                  // 6839\n      for (var idx = 0, len = options.toolbar.length; idx < len; idx ++) {                                             // 6840\n        var groupName = options.toolbar[idx][0];                                                                       // 6841\n        var groupButtons = options.toolbar[idx][1];                                                                    // 6842\n                                                                                                                       // 6843\n        var $group = $('<div class=\"note-' + groupName + ' btn-group\" />');                                            // 6844\n        for (var i = 0, btnLength = groupButtons.length; i < btnLength; i++) {                                         // 6845\n          var buttonInfo = tplButtonInfo[groupButtons[i]];                                                             // 6846\n          // continue creating toolbar even if a button doesn't exist                                                  // 6847\n          if (!$.isFunction(buttonInfo)) { continue; }                                                                 // 6848\n                                                                                                                       // 6849\n          var $button = $(buttonInfo(langInfo, options));                                                              // 6850\n          $button.attr('data-name', groupButtons[i]);  // set button's alias, becuase to get button element from $toolbar\n          $group.append($button);                                                                                      // 6852\n        }                                                                                                              // 6853\n        $toolbar.append($group);                                                                                       // 6854\n      }                                                                                                                // 6855\n                                                                                                                       // 6856\n      var keyMap = options.keyMap[agent.isMac ? 'mac' : 'pc'];                                                         // 6857\n      createPalette($toolbar, options);                                                                                // 6858\n      createTooltip($toolbar, keyMap, 'bottom');                                                                       // 6859\n      $toolbar.prependTo($editor);                                                                                     // 6860\n                                                                                                                       // 6861\n      //07. create Dropzone                                                                                            // 6862\n      $('<div class=\"note-dropzone\"><div class=\"note-dropzone-message\"></div></div>').prependTo($editor);              // 6863\n                                                                                                                       // 6864\n      //08. create Dialog                                                                                              // 6865\n      var $dialogContainer = options.dialogsInBody ? $(document.body) : $editor;                                       // 6866\n      var $dialog = $(tplDialogs(langInfo, options)).prependTo($dialogContainer);                                      // 6867\n      $dialog.find('button.close, a.modal-close').click(function () {                                                  // 6868\n        $(this).closest('.modal').modal('hide');                                                                       // 6869\n      });                                                                                                              // 6870\n                                                                                                                       // 6871\n      //09. Editor/Holder switch                                                                                       // 6872\n      $editor.insertAfter($holder);                                                                                    // 6873\n      $holder.hide();                                                                                                  // 6874\n    };                                                                                                                 // 6875\n                                                                                                                       // 6876\n    this.hasNoteEditor = function ($holder) {                                                                          // 6877\n      return this.noteEditorFromHolder($holder).length > 0;                                                            // 6878\n    };                                                                                                                 // 6879\n                                                                                                                       // 6880\n    this.noteEditorFromHolder = function ($holder) {                                                                   // 6881\n      if ($holder.hasClass('note-air-editor')) {                                                                       // 6882\n        return $holder;                                                                                                // 6883\n      } else if ($holder.next().hasClass('note-editor')) {                                                             // 6884\n        return $holder.next();                                                                                         // 6885\n      } else {                                                                                                         // 6886\n        return $();                                                                                                    // 6887\n      }                                                                                                                // 6888\n    };                                                                                                                 // 6889\n                                                                                                                       // 6890\n    /**                                                                                                                // 6891\n     * create summernote layout                                                                                        // 6892\n     *                                                                                                                 // 6893\n     * @param {jQuery} $holder                                                                                         // 6894\n     * @param {Object} options                                                                                         // 6895\n     */                                                                                                                // 6896\n    this.createLayout = function ($holder, options) {                                                                  // 6897\n      if (options.airMode) {                                                                                           // 6898\n        this.createLayoutByAirMode($holder, options);                                                                  // 6899\n      } else {                                                                                                         // 6900\n        this.createLayoutByFrame($holder, options);                                                                    // 6901\n      }                                                                                                                // 6902\n    };                                                                                                                 // 6903\n                                                                                                                       // 6904\n    /**                                                                                                                // 6905\n     * returns layoutInfo from holder                                                                                  // 6906\n     *                                                                                                                 // 6907\n     * @param {jQuery} $holder - placeholder                                                                           // 6908\n     * @return {Object}                                                                                                // 6909\n     */                                                                                                                // 6910\n    this.layoutInfoFromHolder = function ($holder) {                                                                   // 6911\n      var $editor = this.noteEditorFromHolder($holder);                                                                // 6912\n      if (!$editor.length) {                                                                                           // 6913\n        return;                                                                                                        // 6914\n      }                                                                                                                // 6915\n                                                                                                                       // 6916\n      // connect $holder to $editor                                                                                    // 6917\n      $editor.data('holder', $holder);                                                                                 // 6918\n                                                                                                                       // 6919\n      return dom.buildLayoutInfo($editor);                                                                             // 6920\n    };                                                                                                                 // 6921\n                                                                                                                       // 6922\n    /**                                                                                                                // 6923\n     * removeLayout                                                                                                    // 6924\n     *                                                                                                                 // 6925\n     * @param {jQuery} $holder - placeholder                                                                           // 6926\n     * @param {Object} layoutInfo                                                                                      // 6927\n     * @param {Object} options                                                                                         // 6928\n     *                                                                                                                 // 6929\n     */                                                                                                                // 6930\n    this.removeLayout = function ($holder, layoutInfo, options) {                                                      // 6931\n      if (options.airMode) {                                                                                           // 6932\n        $holder.removeClass('note-air-editor note-editable')                                                           // 6933\n               .removeAttr('id contentEditable');                                                                      // 6934\n                                                                                                                       // 6935\n        layoutInfo.popover().remove();                                                                                 // 6936\n        layoutInfo.handle().remove();                                                                                  // 6937\n        layoutInfo.dialog().remove();                                                                                  // 6938\n      } else {                                                                                                         // 6939\n        $holder.html(layoutInfo.editable().html());                                                                    // 6940\n                                                                                                                       // 6941\n        if (options.dialogsInBody) {                                                                                   // 6942\n          layoutInfo.dialog().remove();                                                                                // 6943\n        }                                                                                                              // 6944\n        layoutInfo.editor().remove();                                                                                  // 6945\n        $holder.show();                                                                                                // 6946\n      }                                                                                                                // 6947\n    };                                                                                                                 // 6948\n                                                                                                                       // 6949\n    /**                                                                                                                // 6950\n     *                                                                                                                 // 6951\n     * @return {Object}                                                                                                // 6952\n     * @return {function(label, options=):string} return.button {@link #tplButton function to make text button}        // 6953\n     * @return {function(iconClass, options=):string} return.iconButton {@link #tplIconButton function to make icon button}\n     * @return {function(className, title=, body=, footer=):string} return.dialog {@link #tplDialog function to make dialog}\n     */                                                                                                                // 6956\n    this.getTemplate = function () {                                                                                   // 6957\n      return {                                                                                                         // 6958\n        button: tplButton,                                                                                             // 6959\n        iconButton: tplIconButton,                                                                                     // 6960\n        dialog: tplDialog                                                                                              // 6961\n      };                                                                                                               // 6962\n    };                                                                                                                 // 6963\n                                                                                                                       // 6964\n    /**                                                                                                                // 6965\n     * add button information                                                                                          // 6966\n     *                                                                                                                 // 6967\n     * @param {String} name button name                                                                                // 6968\n     * @param {Function} buttonInfo function to make button, reference to {@link #tplButton},{@link #tplIconButton}    // 6969\n     */                                                                                                                // 6970\n    this.addButtonInfo = function (name, buttonInfo) {                                                                 // 6971\n      tplButtonInfo[name] = buttonInfo;                                                                                // 6972\n    };                                                                                                                 // 6973\n                                                                                                                       // 6974\n    /**                                                                                                                // 6975\n     *                                                                                                                 // 6976\n     * @param {String} name                                                                                            // 6977\n     * @param {Function} dialogInfo function to make dialog, reference to {@link #tplDialog}                           // 6978\n     */                                                                                                                // 6979\n    this.addDialogInfo = function (name, dialogInfo) {                                                                 // 6980\n      tplDialogInfo[name] = dialogInfo;                                                                                // 6981\n    };                                                                                                                 // 6982\n  };                                                                                                                   // 6983\n                                                                                                                       // 6984\n                                                                                                                       // 6985\n  // jQuery namespace for summernote                                                                                   // 6986\n  /**                                                                                                                  // 6987\n   * @class $.summernote                                                                                               // 6988\n   *                                                                                                                   // 6989\n   * summernote attribute                                                                                              // 6990\n   *                                                                                                                   // 6991\n   * @mixin defaults                                                                                                   // 6992\n   * @singleton                                                                                                        // 6993\n   *                                                                                                                   // 6994\n   */                                                                                                                  // 6995\n  $.summernote = $.summernote || {};                                                                                   // 6996\n                                                                                                                       // 6997\n  // extends default settings                                                                                          // 6998\n  //  - $.summernote.version                                                                                           // 6999\n  //  - $.summernote.options                                                                                           // 7000\n  //  - $.summernote.lang                                                                                              // 7001\n  $.extend($.summernote, defaults);                                                                                    // 7002\n                                                                                                                       // 7003\n  var renderer = new Renderer();                                                                                       // 7004\n  var eventHandler = new EventHandler();                                                                               // 7005\n                                                                                                                       // 7006\n  $.extend($.summernote, {                                                                                             // 7007\n    /** @property {Renderer} */                                                                                        // 7008\n    renderer: renderer,                                                                                                // 7009\n    /** @property {EventHandler} */                                                                                    // 7010\n    eventHandler: eventHandler,                                                                                        // 7011\n    /**                                                                                                                // 7012\n     * @property {Object} core                                                                                         // 7013\n     * @property {core.agent} core.agent                                                                               // 7014\n     * @property {core.dom} core.dom                                                                                   // 7015\n     * @property {core.range} core.range                                                                               // 7016\n     */                                                                                                                // 7017\n    core: {                                                                                                            // 7018\n      agent: agent,                                                                                                    // 7019\n      list : list,                                                                                                     // 7020\n      dom: dom,                                                                                                        // 7021\n      range: range                                                                                                     // 7022\n    },                                                                                                                 // 7023\n    /**                                                                                                                // 7024\n     * @property {Object}                                                                                              // 7025\n     * pluginEvents event list for plugins                                                                             // 7026\n     * event has name and callback function.                                                                           // 7027\n     *                                                                                                                 // 7028\n     * ```                                                                                                             // 7029\n     * $.summernote.addPlugin({                                                                                        // 7030\n     *     events : {                                                                                                  // 7031\n     *          'hello' : function(layoutInfo, value, $target) {                                                       // 7032\n     *              console.log('event name is hello, value is ' + value );                                            // 7033\n     *          }                                                                                                      // 7034\n     *     }                                                                                                           // 7035\n     * })                                                                                                              // 7036\n     * ```                                                                                                             // 7037\n     *                                                                                                                 // 7038\n     * * event name is data-event property.                                                                            // 7039\n     * * layoutInfo is a summernote layout information.                                                                // 7040\n     * * value is data-value property.                                                                                 // 7041\n     */                                                                                                                // 7042\n    pluginEvents: {},                                                                                                  // 7043\n                                                                                                                       // 7044\n    plugins : []                                                                                                       // 7045\n  });                                                                                                                  // 7046\n                                                                                                                       // 7047\n  /**                                                                                                                  // 7048\n   * @method addPlugin                                                                                                 // 7049\n   *                                                                                                                   // 7050\n   * add Plugin in Summernote                                                                                          // 7051\n   *                                                                                                                   // 7052\n   * Summernote can make a own plugin.                                                                                 // 7053\n   *                                                                                                                   // 7054\n   * ### Define plugin                                                                                                 // 7055\n   * ```                                                                                                               // 7056\n   * // get template function                                                                                          // 7057\n   * var tmpl = $.summernote.renderer.getTemplate();                                                                   // 7058\n   *                                                                                                                   // 7059\n   * // add a button                                                                                                   // 7060\n   * $.summernote.addPlugin({                                                                                          // 7061\n   *     buttons : {                                                                                                   // 7062\n   *        // \"hello\"  is button's namespace.                                                                         // 7063\n   *        \"hello\" : function(lang, options) {                                                                        // 7064\n   *            // make icon button by template function                                                               // 7065\n   *            return tmpl.iconButton(options.iconPrefix + 'header', {                                                // 7066\n   *                // callback function name when button clicked                                                      // 7067\n   *                event : 'hello',                                                                                   // 7068\n   *                // set data-value property                                                                         // 7069\n   *                value : 'hello',                                                                                   // 7070\n   *                hide : true                                                                                        // 7071\n   *            });                                                                                                    // 7072\n   *        }                                                                                                          // 7073\n   *                                                                                                                   // 7074\n   *     },                                                                                                            // 7075\n   *                                                                                                                   // 7076\n   *     events : {                                                                                                    // 7077\n   *        \"hello\" : function(layoutInfo, value) {                                                                    // 7078\n   *            // here is event code                                                                                  // 7079\n   *        }                                                                                                          // 7080\n   *     }                                                                                                             // 7081\n   * });                                                                                                               // 7082\n   * ```                                                                                                               // 7083\n   * ### Use a plugin in toolbar                                                                                       // 7084\n   *                                                                                                                   // 7085\n   * ```                                                                                                               // 7086\n   *    $(\"#editor\").summernote({                                                                                      // 7087\n   *    ...                                                                                                            // 7088\n   *    toolbar : [                                                                                                    // 7089\n   *        // display hello plugin in toolbar                                                                         // 7090\n   *        ['group', [ 'hello' ]]                                                                                     // 7091\n   *    ]                                                                                                              // 7092\n   *    ...                                                                                                            // 7093\n   *    });                                                                                                            // 7094\n   * ```                                                                                                               // 7095\n   *                                                                                                                   // 7096\n   *                                                                                                                   // 7097\n   * @param {Object} plugin                                                                                            // 7098\n   * @param {Object} [plugin.buttons] define plugin button. for detail, see to Renderer.addButtonInfo                  // 7099\n   * @param {Object} [plugin.dialogs] define plugin dialog. for detail, see to Renderer.addDialogInfo                  // 7100\n   * @param {Object} [plugin.events] add event in $.summernote.pluginEvents                                            // 7101\n   * @param {Object} [plugin.langs] update $.summernote.lang                                                           // 7102\n   * @param {Object} [plugin.options] update $.summernote.options                                                      // 7103\n   */                                                                                                                  // 7104\n  $.summernote.addPlugin = function (plugin) {                                                                         // 7105\n                                                                                                                       // 7106\n    // save plugin list                                                                                                // 7107\n    $.summernote.plugins.push(plugin);                                                                                 // 7108\n                                                                                                                       // 7109\n    if (plugin.buttons) {                                                                                              // 7110\n      $.each(plugin.buttons, function (name, button) {                                                                 // 7111\n        renderer.addButtonInfo(name, button);                                                                          // 7112\n      });                                                                                                              // 7113\n    }                                                                                                                  // 7114\n                                                                                                                       // 7115\n    if (plugin.dialogs) {                                                                                              // 7116\n      $.each(plugin.dialogs, function (name, dialog) {                                                                 // 7117\n        renderer.addDialogInfo(name, dialog);                                                                          // 7118\n      });                                                                                                              // 7119\n    }                                                                                                                  // 7120\n                                                                                                                       // 7121\n    if (plugin.events) {                                                                                               // 7122\n      $.each(plugin.events, function (name, event) {                                                                   // 7123\n        $.summernote.pluginEvents[name] = event;                                                                       // 7124\n      });                                                                                                              // 7125\n    }                                                                                                                  // 7126\n                                                                                                                       // 7127\n    if (plugin.langs) {                                                                                                // 7128\n      $.each(plugin.langs, function (locale, lang) {                                                                   // 7129\n        if ($.summernote.lang[locale]) {                                                                               // 7130\n          $.extend($.summernote.lang[locale], lang);                                                                   // 7131\n        }                                                                                                              // 7132\n      });                                                                                                              // 7133\n    }                                                                                                                  // 7134\n                                                                                                                       // 7135\n    if (plugin.options) {                                                                                              // 7136\n      $.extend($.summernote.options, plugin.options);                                                                  // 7137\n    }                                                                                                                  // 7138\n  };                                                                                                                   // 7139\n                                                                                                                       // 7140\n  /*                                                                                                                   // 7141\n   * extend $.fn                                                                                                       // 7142\n   */                                                                                                                  // 7143\n  $.fn.extend({                                                                                                        // 7144\n    /**                                                                                                                // 7145\n     * @method                                                                                                         // 7146\n     * Initialize summernote                                                                                           // 7147\n     *  - create editor layout and attach Mouse and keyboard events.                                                   // 7148\n     *                                                                                                                 // 7149\n     * ```                                                                                                             // 7150\n     * $(\"#summernote\").summernote( { options ..} );                                                                   // 7151\n     * ```                                                                                                             // 7152\n     *                                                                                                                 // 7153\n     * @member $.fn                                                                                                    // 7154\n     * @param {Object|String} options reference to $.summernote.options                                                // 7155\n     * @return {this}                                                                                                  // 7156\n     */                                                                                                                // 7157\n    summernote: function () {                                                                                          // 7158\n      // check first argument's type                                                                                   // 7159\n      //  - {String}: External API call {{module}}.{{method}}                                                          // 7160\n      //  - {Object}: init options                                                                                     // 7161\n      var type = $.type(list.head(arguments));                                                                         // 7162\n      var isExternalAPICalled = type === 'string';                                                                     // 7163\n      var hasInitOptions = type === 'object';                                                                          // 7164\n                                                                                                                       // 7165\n      // extend default options with custom user options                                                               // 7166\n      var options = hasInitOptions ? list.head(arguments) : {};                                                        // 7167\n                                                                                                                       // 7168\n      options = $.extend({}, $.summernote.options, options);                                                           // 7169\n      options.icons = $.extend({}, $.summernote.options.icons, options.icons);                                         // 7170\n                                                                                                                       // 7171\n      // Include langInfo in options for later use, e.g. for image drag-n-drop                                         // 7172\n      // Setup language info with en-US as default                                                                     // 7173\n      options.langInfo = $.extend(true, {}, $.summernote.lang['en-US'], $.summernote.lang[options.lang]);              // 7174\n                                                                                                                       // 7175\n      // override plugin options                                                                                       // 7176\n      if (!isExternalAPICalled && hasInitOptions) {                                                                    // 7177\n        for (var i = 0, len = $.summernote.plugins.length; i < len; i++) {                                             // 7178\n          var plugin = $.summernote.plugins[i];                                                                        // 7179\n                                                                                                                       // 7180\n          if (options.plugin[plugin.name]) {                                                                           // 7181\n            $.summernote.plugins[i] = $.extend(true, plugin, options.plugin[plugin.name]);                             // 7182\n          }                                                                                                            // 7183\n        }                                                                                                              // 7184\n      }                                                                                                                // 7185\n                                                                                                                       // 7186\n      this.each(function (idx, holder) {                                                                               // 7187\n        var $holder = $(holder);                                                                                       // 7188\n                                                                                                                       // 7189\n        // if layout isn't created yet, createLayout and attach events                                                 // 7190\n        if (!renderer.hasNoteEditor($holder)) {                                                                        // 7191\n          renderer.createLayout($holder, options);                                                                     // 7192\n                                                                                                                       // 7193\n          var layoutInfo = renderer.layoutInfoFromHolder($holder);                                                     // 7194\n          $holder.data('layoutInfo', layoutInfo);                                                                      // 7195\n                                                                                                                       // 7196\n          eventHandler.attach(layoutInfo, options);                                                                    // 7197\n          eventHandler.attachCustomEvent(layoutInfo, options);                                                         // 7198\n        }                                                                                                              // 7199\n      });                                                                                                              // 7200\n                                                                                                                       // 7201\n      var $first = this.first();                                                                                       // 7202\n      if ($first.length) {                                                                                             // 7203\n        var layoutInfo = renderer.layoutInfoFromHolder($first);                                                        // 7204\n                                                                                                                       // 7205\n        // external API                                                                                                // 7206\n        if (isExternalAPICalled) {                                                                                     // 7207\n          var moduleAndMethod = list.head(list.from(arguments));                                                       // 7208\n          var args = list.tail(list.from(arguments));                                                                  // 7209\n                                                                                                                       // 7210\n          // TODO now external API only works for editor                                                               // 7211\n          var params = [moduleAndMethod, layoutInfo.editable()].concat(args);                                          // 7212\n          return eventHandler.invoke.apply(eventHandler, params);                                                      // 7213\n        } else if (options.focus) {                                                                                    // 7214\n          // focus on first editable element for initialize editor                                                     // 7215\n          layoutInfo.editable().focus();                                                                               // 7216\n        }                                                                                                              // 7217\n      }                                                                                                                // 7218\n                                                                                                                       // 7219\n      return this;                                                                                                     // 7220\n    },                                                                                                                 // 7221\n                                                                                                                       // 7222\n    /**                                                                                                                // 7223\n     * @method                                                                                                         // 7224\n     *                                                                                                                 // 7225\n     * get the HTML contents of note or set the HTML contents of note.                                                 // 7226\n     *                                                                                                                 // 7227\n     * * get contents                                                                                                  // 7228\n     * ```                                                                                                             // 7229\n     * var content = $(\"#summernote\").code();                                                                          // 7230\n     * ```                                                                                                             // 7231\n     * * set contents                                                                                                  // 7232\n     *                                                                                                                 // 7233\n     * ```                                                                                                             // 7234\n     * $(\"#summernote\").code(html);                                                                                    // 7235\n     * ```                                                                                                             // 7236\n     *                                                                                                                 // 7237\n     * @member $.fn                                                                                                    // 7238\n     * @param {String} [html] - HTML contents(optional, set)                                                           // 7239\n     * @return {this|String} - context(set) or HTML contents of note(get).                                             // 7240\n     */                                                                                                                // 7241\n    code: function (html) {                                                                                            // 7242\n      // get the HTML contents of note                                                                                 // 7243\n      if (html === undefined) {                                                                                        // 7244\n        var $holder = this.first();                                                                                    // 7245\n        if (!$holder.length) {                                                                                         // 7246\n          return;                                                                                                      // 7247\n        }                                                                                                              // 7248\n                                                                                                                       // 7249\n        var layoutInfo = renderer.layoutInfoFromHolder($holder);                                                       // 7250\n        var $editable = layoutInfo && layoutInfo.editable();                                                           // 7251\n                                                                                                                       // 7252\n        if ($editable && $editable.length) {                                                                           // 7253\n          var isCodeview = eventHandler.invoke('codeview.isActivated', layoutInfo);                                    // 7254\n          eventHandler.invoke('codeview.sync', layoutInfo);                                                            // 7255\n          return isCodeview ? layoutInfo.codable().val() :                                                             // 7256\n                              layoutInfo.editable().html();                                                            // 7257\n        }                                                                                                              // 7258\n        return dom.value($holder);                                                                                     // 7259\n      }                                                                                                                // 7260\n                                                                                                                       // 7261\n      // set the HTML contents of note                                                                                 // 7262\n      this.each(function (i, holder) {                                                                                 // 7263\n        var layoutInfo = renderer.layoutInfoFromHolder($(holder));                                                     // 7264\n        var $editable = layoutInfo && layoutInfo.editable();                                                           // 7265\n        if ($editable) {                                                                                               // 7266\n          $editable.html(html);                                                                                        // 7267\n        }                                                                                                              // 7268\n      });                                                                                                              // 7269\n                                                                                                                       // 7270\n      return this;                                                                                                     // 7271\n    },                                                                                                                 // 7272\n                                                                                                                       // 7273\n    /**                                                                                                                // 7274\n     * @method                                                                                                         // 7275\n     *                                                                                                                 // 7276\n     * destroy Editor Layout and detach Key and Mouse Event                                                            // 7277\n     *                                                                                                                 // 7278\n     * @member $.fn                                                                                                    // 7279\n     * @return {this}                                                                                                  // 7280\n     */                                                                                                                // 7281\n    destroy: function () {                                                                                             // 7282\n      this.each(function (idx, holder) {                                                                               // 7283\n        var $holder = $(holder);                                                                                       // 7284\n                                                                                                                       // 7285\n        if (!renderer.hasNoteEditor($holder)) {                                                                        // 7286\n          return;                                                                                                      // 7287\n        }                                                                                                              // 7288\n                                                                                                                       // 7289\n        var info = renderer.layoutInfoFromHolder($holder);                                                             // 7290\n        var options = info.editor().data('options');                                                                   // 7291\n                                                                                                                       // 7292\n        eventHandler.detach(info, options);                                                                            // 7293\n        renderer.removeLayout($holder, info, options);                                                                 // 7294\n      });                                                                                                              // 7295\n                                                                                                                       // 7296\n      return this;                                                                                                     // 7297\n    }                                                                                                                  // 7298\n  });                                                                                                                  // 7299\n}));                                                                                                                   // 7300\n                                                                                                                       // 7301\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 7311\n}).call(this);                                                       // 7312\n                                                                     // 7313\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['summernote:summernote'] = {};\n\n})();\n","servePath":"/packages/summernote_summernote.js","sourceMap":{"version":3,"sources":["/packages/summernote_summernote/packages/summernote_summernote.js"],"names":[],"mappingsfile":"/packages/summernote_summernote.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/summernote:summernote/dist/summernote.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Super simple wysiwyg editor on Bootstrap v0.6.16                                                                    // 2\n * http://summernote.org/                                                                                              // 3\n *                                                                                                                     // 4\n * summernote.js                                                                                                       // 5\n * Copyright 2013-2015 Alan Hong. and other contributors                                                               // 6\n * summernote may be freely distributed under the MIT license./                                                        // 7\n *                                                                                                                     // 8\n * Date: 2015-08-03T16:41Z                                                                                             // 9\n */                                                                                                                    // 10\n(function (factory) {                                                                                                  // 11\n  /* global define */                                                                                                  // 12\n  if (typeof define === 'function' && define.amd) {                                                                    // 13\n    // AMD. Register as an anonymous module.                                                                           // 14\n    define(['jquery'], factory);                                                                                       // 15\n  } else {                                                                                                             // 16\n    // Browser globals: jQuery                                                                                         // 17\n    factory(window.jQuery);                                                                                            // 18\n  }                                                                                                                    // 19\n}(function ($) {                                                                                                       // 20\n                                                                                                                       // 21\n                                                                                                                       // 22\n                                                                                                                       // 23\n  if (!Array.prototype.reduce) {                                                                                       // 24\n    /**                                                                                                                // 25\n     * Array.prototype.reduce polyfill                                                                                 // 26\n     *                                                                                                                 // 27\n     * @param {Function} callback                                                                                      // 28\n     * @param {Value} [initialValue]                                                                                   // 29\n     * @return {Value}                                                                                                 // 30\n     *                                                                                                                 // 31\n     * @see http://goo.gl/WNriQD                                                                                       // 32\n     */                                                                                                                // 33\n    Array.prototype.reduce = function (callback) {                                                                     // 34\n      var t = Object(this), len = t.length >>> 0, k = 0, value;                                                        // 35\n      if (arguments.length === 2) {                                                                                    // 36\n        value = arguments[1];                                                                                          // 37\n      } else {                                                                                                         // 38\n        while (k < len && !(k in t)) {                                                                                 // 39\n          k++;                                                                                                         // 40\n        }                                                                                                              // 41\n        if (k >= len) {                                                                                                // 42\n          throw new TypeError('Reduce of empty array with no initial value');                                          // 43\n        }                                                                                                              // 44\n        value = t[k++];                                                                                                // 45\n      }                                                                                                                // 46\n      for (; k < len; k++) {                                                                                           // 47\n        if (k in t) {                                                                                                  // 48\n          value = callback(value, t[k], k, t);                                                                         // 49\n        }                                                                                                              // 50\n      }                                                                                                                // 51\n      return value;                                                                                                    // 52\n    };                                                                                                                 // 53\n  }                                                                                                                    // 54\n                                                                                                                       // 55\n  if ('function' !== typeof Array.prototype.filter) {                                                                  // 56\n    /**                                                                                                                // 57\n     * Array.prototype.filter polyfill                                                                                 // 58\n     *                                                                                                                 // 59\n     * @param {Function} func                                                                                          // 60\n     * @return {Array}                                                                                                 // 61\n     *                                                                                                                 // 62\n     * @see http://goo.gl/T1KFnq                                                                                       // 63\n     */                                                                                                                // 64\n    Array.prototype.filter = function (func) {                                                                         // 65\n      var t = Object(this), len = t.length >>> 0;                                                                      // 66\n                                                                                                                       // 67\n      var res = [];                                                                                                    // 68\n      var thisArg = arguments.length >= 2 ? arguments[1] : void 0;                                                     // 69\n      for (var i = 0; i < len; i++) {                                                                                  // 70\n        if (i in t) {                                                                                                  // 71\n          var val = t[i];                                                                                              // 72\n          if (func.call(thisArg, val, i, t)) {                                                                         // 73\n            res.push(val);                                                                                             // 74\n          }                                                                                                            // 75\n        }                                                                                                              // 76\n      }                                                                                                                // 77\n                                                                                                                       // 78\n      return res;                                                                                                      // 79\n    };                                                                                                                 // 80\n  }                                                                                                                    // 81\n                                                                                                                       // 82\n  if (!Array.prototype.map) {                                                                                          // 83\n    /**                                                                                                                // 84\n     * Array.prototype.map polyfill                                                                                    // 85\n     *                                                                                                                 // 86\n     * @param {Function} callback                                                                                      // 87\n     * @return {Array}                                                                                                 // 88\n     *                                                                                                                 // 89\n     * @see https://goo.gl/SMWaMK                                                                                      // 90\n     */                                                                                                                // 91\n    Array.prototype.map = function (callback, thisArg) {                                                               // 92\n      var T, A, k;                                                                                                     // 93\n      if (this === null) {                                                                                             // 94\n        throw new TypeError(' this is null or not defined');                                                           // 95\n      }                                                                                                                // 96\n                                                                                                                       // 97\n      var O = Object(this);                                                                                            // 98\n      var len = O.length >>> 0;                                                                                        // 99\n      if (typeof callback !== 'function') {                                                                            // 100\n        throw new TypeError(callback + ' is not a function');                                                          // 101\n      }                                                                                                                // 102\n                                                                                                                       // 103\n      if (arguments.length > 1) {                                                                                      // 104\n        T = thisArg;                                                                                                   // 105\n      }                                                                                                                // 106\n                                                                                                                       // 107\n      A = new Array(len);                                                                                              // 108\n      k = 0;                                                                                                           // 109\n                                                                                                                       // 110\n      while (k < len) {                                                                                                // 111\n        var kValue, mappedValue;                                                                                       // 112\n        if (k in O) {                                                                                                  // 113\n          kValue = O[k];                                                                                               // 114\n          mappedValue = callback.call(T, kValue, k, O);                                                                // 115\n          A[k] = mappedValue;                                                                                          // 116\n        }                                                                                                              // 117\n        k++;                                                                                                           // 118\n      }                                                                                                                // 119\n      return A;                                                                                                        // 120\n    };                                                                                                                 // 121\n  }                                                                                                                    // 122\n                                                                                                                       // 123\n  var isSupportAmd = typeof define === 'function' && define.amd;                                                       // 124\n                                                                                                                       // 125\n  /**                                                                                                                  // 126\n   * returns whether font is installed or not.                                                                         // 127\n   *                                                                                                                   // 128\n   * @param {String} fontName                                                                                          // 129\n   * @return {Boolean}                                                                                                 // 130\n   */                                                                                                                  // 131\n  var isFontInstalled = function (fontName) {                                                                          // 132\n    var testFontName = fontName === 'Comic Sans MS' ? 'Courier New' : 'Comic Sans MS';                                 // 133\n    var $tester = $('<div>').css({                                                                                     // 134\n      position: 'absolute',                                                                                            // 135\n      left: '-9999px',                                                                                                 // 136\n      top: '-9999px',                                                                                                  // 137\n      fontSize: '200px'                                                                                                // 138\n    }).text('mmmmmmmmmwwwwwww').appendTo(document.body);                                                               // 139\n                                                                                                                       // 140\n    var originalWidth = $tester.css('fontFamily', testFontName).width();                                               // 141\n    var width = $tester.css('fontFamily', fontName + ',' + testFontName).width();                                      // 142\n                                                                                                                       // 143\n    $tester.remove();                                                                                                  // 144\n                                                                                                                       // 145\n    return originalWidth !== width;                                                                                    // 146\n  };                                                                                                                   // 147\n                                                                                                                       // 148\n  var userAgent = navigator.userAgent;                                                                                 // 149\n  var isMSIE = /MSIE|Trident/i.test(userAgent);                                                                        // 150\n  var browserVersion;                                                                                                  // 151\n  if (isMSIE) {                                                                                                        // 152\n    var matches = /MSIE (\\d+[.]\\d+)/.exec(userAgent);                                                                  // 153\n    if (matches) {                                                                                                     // 154\n      browserVersion = parseFloat(matches[1]);                                                                         // 155\n    }                                                                                                                  // 156\n    matches = /Trident\\/.*rv:([0-9]{1,}[\\.0-9]{0,})/.exec(userAgent);                                                  // 157\n    if (matches) {                                                                                                     // 158\n      browserVersion = parseFloat(matches[1]);                                                                         // 159\n    }                                                                                                                  // 160\n  }                                                                                                                    // 161\n                                                                                                                       // 162\n  /**                                                                                                                  // 163\n   * @class core.agent                                                                                                 // 164\n   *                                                                                                                   // 165\n   * Object which check platform and agent                                                                             // 166\n   *                                                                                                                   // 167\n   * @singleton                                                                                                        // 168\n   * @alternateClassName agent                                                                                         // 169\n   */                                                                                                                  // 170\n  var agent = {                                                                                                        // 171\n    /** @property {Boolean} [isMac=false] true if this agent is Mac  */                                                // 172\n    isMac: navigator.appVersion.indexOf('Mac') > -1,                                                                   // 173\n    /** @property {Boolean} [isMSIE=false] true if this agent is a Internet Explorer  */                               // 174\n    isMSIE: isMSIE,                                                                                                    // 175\n    /** @property {Boolean} [isFF=false] true if this agent is a Firefox  */                                           // 176\n    isFF: /firefox/i.test(userAgent),                                                                                  // 177\n    isWebkit: /webkit/i.test(userAgent),                                                                               // 178\n    /** @property {Boolean} [isSafari=false] true if this agent is a Safari  */                                        // 179\n    isSafari: /safari/i.test(userAgent),                                                                               // 180\n    /** @property {Float} browserVersion current browser version  */                                                   // 181\n    browserVersion: browserVersion,                                                                                    // 182\n    /** @property {String} jqueryVersion current jQuery version string  */                                             // 183\n    jqueryVersion: parseFloat($.fn.jquery),                                                                            // 184\n    isSupportAmd: isSupportAmd,                                                                                        // 185\n    hasCodeMirror: isSupportAmd ? require.specified('CodeMirror') : !!window.CodeMirror,                               // 186\n    isFontInstalled: isFontInstalled,                                                                                  // 187\n    isW3CRangeSupport: !!document.createRange                                                                          // 188\n  };                                                                                                                   // 189\n                                                                                                                       // 190\n  /**                                                                                                                  // 191\n   * @class core.func                                                                                                  // 192\n   *                                                                                                                   // 193\n   * func utils (for high-order func's arg)                                                                            // 194\n   *                                                                                                                   // 195\n   * @singleton                                                                                                        // 196\n   * @alternateClassName func                                                                                          // 197\n   */                                                                                                                  // 198\n  var func = (function () {                                                                                            // 199\n    var eq = function (itemA) {                                                                                        // 200\n      return function (itemB) {                                                                                        // 201\n        return itemA === itemB;                                                                                        // 202\n      };                                                                                                               // 203\n    };                                                                                                                 // 204\n                                                                                                                       // 205\n    var eq2 = function (itemA, itemB) {                                                                                // 206\n      return itemA === itemB;                                                                                          // 207\n    };                                                                                                                 // 208\n                                                                                                                       // 209\n    var peq2 = function (propName) {                                                                                   // 210\n      return function (itemA, itemB) {                                                                                 // 211\n        return itemA[propName] === itemB[propName];                                                                    // 212\n      };                                                                                                               // 213\n    };                                                                                                                 // 214\n                                                                                                                       // 215\n    var ok = function () {                                                                                             // 216\n      return true;                                                                                                     // 217\n    };                                                                                                                 // 218\n                                                                                                                       // 219\n    var fail = function () {                                                                                           // 220\n      return false;                                                                                                    // 221\n    };                                                                                                                 // 222\n                                                                                                                       // 223\n    var not = function (f) {                                                                                           // 224\n      return function () {                                                                                             // 225\n        return !f.apply(f, arguments);                                                                                 // 226\n      };                                                                                                               // 227\n    };                                                                                                                 // 228\n                                                                                                                       // 229\n    var and = function (fA, fB) {                                                                                      // 230\n      return function (item) {                                                                                         // 231\n        return fA(item) && fB(item);                                                                                   // 232\n      };                                                                                                               // 233\n    };                                                                                                                 // 234\n                                                                                                                       // 235\n    var self = function (a) {                                                                                          // 236\n      return a;                                                                                                        // 237\n    };                                                                                                                 // 238\n                                                                                                                       // 239\n    var idCounter = 0;                                                                                                 // 240\n                                                                                                                       // 241\n    /**                                                                                                                // 242\n     * generate a globally-unique id                                                                                   // 243\n     *                                                                                                                 // 244\n     * @param {String} [prefix]                                                                                        // 245\n     */                                                                                                                // 246\n    var uniqueId = function (prefix) {                                                                                 // 247\n      var id = ++idCounter + '';                                                                                       // 248\n      return prefix ? prefix + id : id;                                                                                // 249\n    };                                                                                                                 // 250\n                                                                                                                       // 251\n    /**                                                                                                                // 252\n     * returns bnd (bounds) from rect                                                                                  // 253\n     *                                                                                                                 // 254\n     * - IE Compatability Issue: http://goo.gl/sRLOAo                                                                  // 255\n     * - Scroll Issue: http://goo.gl/sNjUc                                                                             // 256\n     *                                                                                                                 // 257\n     * @param {Rect} rect                                                                                              // 258\n     * @return {Object} bounds                                                                                         // 259\n     * @return {Number} bounds.top                                                                                     // 260\n     * @return {Number} bounds.left                                                                                    // 261\n     * @return {Number} bounds.width                                                                                   // 262\n     * @return {Number} bounds.height                                                                                  // 263\n     */                                                                                                                // 264\n    var rect2bnd = function (rect) {                                                                                   // 265\n      var $document = $(document);                                                                                     // 266\n      return {                                                                                                         // 267\n        top: rect.top + $document.scrollTop(),                                                                         // 268\n        left: rect.left + $document.scrollLeft(),                                                                      // 269\n        width: rect.right - rect.left,                                                                                 // 270\n        height: rect.bottom - rect.top                                                                                 // 271\n      };                                                                                                               // 272\n    };                                                                                                                 // 273\n                                                                                                                       // 274\n    /**                                                                                                                // 275\n     * returns a copy of the object where the keys have become the values and the values the keys.                     // 276\n     * @param {Object} obj                                                                                             // 277\n     * @return {Object}                                                                                                // 278\n     */                                                                                                                // 279\n    var invertObject = function (obj) {                                                                                // 280\n      var inverted = {};                                                                                               // 281\n      for (var key in obj) {                                                                                           // 282\n        if (obj.hasOwnProperty(key)) {                                                                                 // 283\n          inverted[obj[key]] = key;                                                                                    // 284\n        }                                                                                                              // 285\n      }                                                                                                                // 286\n      return inverted;                                                                                                 // 287\n    };                                                                                                                 // 288\n                                                                                                                       // 289\n    /**                                                                                                                // 290\n     * @param {String} namespace                                                                                       // 291\n     * @param {String} [prefix]                                                                                        // 292\n     * @return {String}                                                                                                // 293\n     */                                                                                                                // 294\n    var namespaceToCamel = function (namespace, prefix) {                                                              // 295\n      prefix = prefix || '';                                                                                           // 296\n      return prefix + namespace.split('.').map(function (name) {                                                       // 297\n        return name.substring(0, 1).toUpperCase() + name.substring(1);                                                 // 298\n      }).join('');                                                                                                     // 299\n    };                                                                                                                 // 300\n                                                                                                                       // 301\n    return {                                                                                                           // 302\n      eq: eq,                                                                                                          // 303\n      eq2: eq2,                                                                                                        // 304\n      peq2: peq2,                                                                                                      // 305\n      ok: ok,                                                                                                          // 306\n      fail: fail,                                                                                                      // 307\n      self: self,                                                                                                      // 308\n      not: not,                                                                                                        // 309\n      and: and,                                                                                                        // 310\n      uniqueId: uniqueId,                                                                                              // 311\n      rect2bnd: rect2bnd,                                                                                              // 312\n      invertObject: invertObject,                                                                                      // 313\n      namespaceToCamel: namespaceToCamel                                                                               // 314\n    };                                                                                                                 // 315\n  })();                                                                                                                // 316\n                                                                                                                       // 317\n  /**                                                                                                                  // 318\n   * @class core.list                                                                                                  // 319\n   *                                                                                                                   // 320\n   * list utils                                                                                                        // 321\n   *                                                                                                                   // 322\n   * @singleton                                                                                                        // 323\n   * @alternateClassName list                                                                                          // 324\n   */                                                                                                                  // 325\n  var list = (function () {                                                                                            // 326\n    /**                                                                                                                // 327\n     * returns the first item of an array.                                                                             // 328\n     *                                                                                                                 // 329\n     * @param {Array} array                                                                                            // 330\n     */                                                                                                                // 331\n    var head = function (array) {                                                                                      // 332\n      return array[0];                                                                                                 // 333\n    };                                                                                                                 // 334\n                                                                                                                       // 335\n    /**                                                                                                                // 336\n     * returns the last item of an array.                                                                              // 337\n     *                                                                                                                 // 338\n     * @param {Array} array                                                                                            // 339\n     */                                                                                                                // 340\n    var last = function (array) {                                                                                      // 341\n      return array[array.length - 1];                                                                                  // 342\n    };                                                                                                                 // 343\n                                                                                                                       // 344\n    /**                                                                                                                // 345\n     * returns everything but the last entry of the array.                                                             // 346\n     *                                                                                                                 // 347\n     * @param {Array} array                                                                                            // 348\n     */                                                                                                                // 349\n    var initial = function (array) {                                                                                   // 350\n      return array.slice(0, array.length - 1);                                                                         // 351\n    };                                                                                                                 // 352\n                                                                                                                       // 353\n    /**                                                                                                                // 354\n     * returns the rest of the items in an array.                                                                      // 355\n     *                                                                                                                 // 356\n     * @param {Array} array                                                                                            // 357\n     */                                                                                                                // 358\n    var tail = function (array) {                                                                                      // 359\n      return array.slice(1);                                                                                           // 360\n    };                                                                                                                 // 361\n                                                                                                                       // 362\n    /**                                                                                                                // 363\n     * returns item of array                                                                                           // 364\n     */                                                                                                                // 365\n    var find = function (array, pred) {                                                                                // 366\n      for (var idx = 0, len = array.length; idx < len; idx ++) {                                                       // 367\n        var item = array[idx];                                                                                         // 368\n        if (pred(item)) {                                                                                              // 369\n          return item;                                                                                                 // 370\n        }                                                                                                              // 371\n      }                                                                                                                // 372\n    };                                                                                                                 // 373\n                                                                                                                       // 374\n    /**                                                                                                                // 375\n     * returns true if all of the values in the array pass the predicate truth test.                                   // 376\n     */                                                                                                                // 377\n    var all = function (array, pred) {                                                                                 // 378\n      for (var idx = 0, len = array.length; idx < len; idx ++) {                                                       // 379\n        if (!pred(array[idx])) {                                                                                       // 380\n          return false;                                                                                                // 381\n        }                                                                                                              // 382\n      }                                                                                                                // 383\n      return true;                                                                                                     // 384\n    };                                                                                                                 // 385\n                                                                                                                       // 386\n    /**                                                                                                                // 387\n     * returns index of item                                                                                           // 388\n     */                                                                                                                // 389\n    var indexOf = function (array, item) {                                                                             // 390\n      return $.inArray(item, array);                                                                                   // 391\n    };                                                                                                                 // 392\n                                                                                                                       // 393\n    /**                                                                                                                // 394\n     * returns true if the value is present in the list.                                                               // 395\n     */                                                                                                                // 396\n    var contains = function (array, item) {                                                                            // 397\n      return indexOf(array, item) !== -1;                                                                              // 398\n    };                                                                                                                 // 399\n                                                                                                                       // 400\n    /**                                                                                                                // 401\n     * get sum from a list                                                                                             // 402\n     *                                                                                                                 // 403\n     * @param {Array} array - array                                                                                    // 404\n     * @param {Function} fn - iterator                                                                                 // 405\n     */                                                                                                                // 406\n    var sum = function (array, fn) {                                                                                   // 407\n      fn = fn || func.self;                                                                                            // 408\n      return array.reduce(function (memo, v) {                                                                         // 409\n        return memo + fn(v);                                                                                           // 410\n      }, 0);                                                                                                           // 411\n    };                                                                                                                 // 412\n                                                                                                                       // 413\n    /**                                                                                                                // 414\n     * returns a copy of the collection with array type.                                                               // 415\n     * @param {Collection} collection - collection eg) node.childNodes, ...                                            // 416\n     */                                                                                                                // 417\n    var from = function (collection) {                                                                                 // 418\n      var result = [], idx = -1, length = collection.length;                                                           // 419\n      while (++idx < length) {                                                                                         // 420\n        result[idx] = collection[idx];                                                                                 // 421\n      }                                                                                                                // 422\n      return result;                                                                                                   // 423\n    };                                                                                                                 // 424\n                                                                                                                       // 425\n    /**                                                                                                                // 426\n     * cluster elements by predicate function.                                                                         // 427\n     *                                                                                                                 // 428\n     * @param {Array} array - array                                                                                    // 429\n     * @param {Function} fn - predicate function for cluster rule                                                      // 430\n     * @param {Array[]}                                                                                                // 431\n     */                                                                                                                // 432\n    var clusterBy = function (array, fn) {                                                                             // 433\n      if (!array.length) { return []; }                                                                                // 434\n      var aTail = tail(array);                                                                                         // 435\n      return aTail.reduce(function (memo, v) {                                                                         // 436\n        var aLast = last(memo);                                                                                        // 437\n        if (fn(last(aLast), v)) {                                                                                      // 438\n          aLast[aLast.length] = v;                                                                                     // 439\n        } else {                                                                                                       // 440\n          memo[memo.length] = [v];                                                                                     // 441\n        }                                                                                                              // 442\n        return memo;                                                                                                   // 443\n      }, [[head(array)]]);                                                                                             // 444\n    };                                                                                                                 // 445\n                                                                                                                       // 446\n    /**                                                                                                                // 447\n     * returns a copy of the array with all falsy values removed                                                       // 448\n     *                                                                                                                 // 449\n     * @param {Array} array - array                                                                                    // 450\n     * @param {Function} fn - predicate function for cluster rule                                                      // 451\n     */                                                                                                                // 452\n    var compact = function (array) {                                                                                   // 453\n      var aResult = [];                                                                                                // 454\n      for (var idx = 0, len = array.length; idx < len; idx ++) {                                                       // 455\n        if (array[idx]) { aResult.push(array[idx]); }                                                                  // 456\n      }                                                                                                                // 457\n      return aResult;                                                                                                  // 458\n    };                                                                                                                 // 459\n                                                                                                                       // 460\n    /**                                                                                                                // 461\n     * produces a duplicate-free version of the array                                                                  // 462\n     *                                                                                                                 // 463\n     * @param {Array} array                                                                                            // 464\n     */                                                                                                                // 465\n    var unique = function (array) {                                                                                    // 466\n      var results = [];                                                                                                // 467\n                                                                                                                       // 468\n      for (var idx = 0, len = array.length; idx < len; idx ++) {                                                       // 469\n        if (!contains(results, array[idx])) {                                                                          // 470\n          results.push(array[idx]);                                                                                    // 471\n        }                                                                                                              // 472\n      }                                                                                                                // 473\n                                                                                                                       // 474\n      return results;                                                                                                  // 475\n    };                                                                                                                 // 476\n                                                                                                                       // 477\n    /**                                                                                                                // 478\n     * returns next item.                                                                                              // 479\n     * @param {Array} array                                                                                            // 480\n     */                                                                                                                // 481\n    var next = function (array, item) {                                                                                // 482\n      var idx = indexOf(array, item);                                                                                  // 483\n      if (idx === -1) { return null; }                                                                                 // 484\n                                                                                                                       // 485\n      return array[idx + 1];                                                                                           // 486\n    };                                                                                                                 // 487\n                                                                                                                       // 488\n    /**                                                                                                                // 489\n     * returns prev item.                                                                                              // 490\n     * @param {Array} array                                                                                            // 491\n     */                                                                                                                // 492\n    var prev = function (array, item) {                                                                                // 493\n      var idx = indexOf(array, item);                                                                                  // 494\n      if (idx === -1) { return null; }                                                                                 // 495\n                                                                                                                       // 496\n      return array[idx - 1];                                                                                           // 497\n    };                                                                                                                 // 498\n                                                                                                                       // 499\n    return { head: head, last: last, initial: initial, tail: tail,                                                     // 500\n             prev: prev, next: next, find: find, contains: contains,                                                   // 501\n             all: all, sum: sum, from: from,                                                                           // 502\n             clusterBy: clusterBy, compact: compact, unique: unique };                                                 // 503\n  })();                                                                                                                // 504\n                                                                                                                       // 505\n                                                                                                                       // 506\n  var NBSP_CHAR = String.fromCharCode(160);                                                                            // 507\n  var ZERO_WIDTH_NBSP_CHAR = '\\ufeff';                                                                                 // 508\n                                                                                                                       // 509\n  /**                                                                                                                  // 510\n   * @class core.dom                                                                                                   // 511\n   *                                                                                                                   // 512\n   * Dom functions                                                                                                     // 513\n   *                                                                                                                   // 514\n   * @singleton                                                                                                        // 515\n   * @alternateClassName dom                                                                                           // 516\n   */                                                                                                                  // 517\n  var dom = (function () {                                                                                             // 518\n    /**                                                                                                                // 519\n     * @method isEditable                                                                                              // 520\n     *                                                                                                                 // 521\n     * returns whether node is `note-editable` or not.                                                                 // 522\n     *                                                                                                                 // 523\n     * @param {Node} node                                                                                              // 524\n     * @return {Boolean}                                                                                               // 525\n     */                                                                                                                // 526\n    var isEditable = function (node) {                                                                                 // 527\n      return node && $(node).hasClass('note-editable');                                                                // 528\n    };                                                                                                                 // 529\n                                                                                                                       // 530\n    /**                                                                                                                // 531\n     * @method isControlSizing                                                                                         // 532\n     *                                                                                                                 // 533\n     * returns whether node is `note-control-sizing` or not.                                                           // 534\n     *                                                                                                                 // 535\n     * @param {Node} node                                                                                              // 536\n     * @return {Boolean}                                                                                               // 537\n     */                                                                                                                // 538\n    var isControlSizing = function (node) {                                                                            // 539\n      return node && $(node).hasClass('note-control-sizing');                                                          // 540\n    };                                                                                                                 // 541\n                                                                                                                       // 542\n    /**                                                                                                                // 543\n     * @method  buildLayoutInfo                                                                                        // 544\n     *                                                                                                                 // 545\n     * build layoutInfo from $editor(.note-editor)                                                                     // 546\n     *                                                                                                                 // 547\n     * @param {jQuery} $editor                                                                                         // 548\n     * @return {Object}                                                                                                // 549\n     * @return {Function} return.editor                                                                                // 550\n     * @return {Node} return.dropzone                                                                                  // 551\n     * @return {Node} return.toolbar                                                                                   // 552\n     * @return {Node} return.editable                                                                                  // 553\n     * @return {Node} return.codable                                                                                   // 554\n     * @return {Node} return.popover                                                                                   // 555\n     * @return {Node} return.handle                                                                                    // 556\n     * @return {Node} return.dialog                                                                                    // 557\n     */                                                                                                                // 558\n    var buildLayoutInfo = function ($editor) {                                                                         // 559\n      var makeFinder;                                                                                                  // 560\n                                                                                                                       // 561\n      // air mode                                                                                                      // 562\n      if ($editor.hasClass('note-air-editor')) {                                                                       // 563\n        var id = list.last($editor.attr('id').split('-'));                                                             // 564\n        makeFinder = function (sIdPrefix) {                                                                            // 565\n          return function () { return $(sIdPrefix + id); };                                                            // 566\n        };                                                                                                             // 567\n                                                                                                                       // 568\n        return {                                                                                                       // 569\n          editor: function () { return $editor; },                                                                     // 570\n          holder : function () { return $editor.data('holder'); },                                                     // 571\n          editable: function () { return $editor; },                                                                   // 572\n          popover: makeFinder('#note-popover-'),                                                                       // 573\n          handle: makeFinder('#note-handle-'),                                                                         // 574\n          dialog: makeFinder('#note-dialog-')                                                                          // 575\n        };                                                                                                             // 576\n                                                                                                                       // 577\n        // frame mode                                                                                                  // 578\n      } else {                                                                                                         // 579\n        makeFinder = function (className, $base) {                                                                     // 580\n          $base = $base || $editor;                                                                                    // 581\n          return function () { return $base.find(className); };                                                        // 582\n        };                                                                                                             // 583\n                                                                                                                       // 584\n        var options = $editor.data('options');                                                                         // 585\n        var $dialogHolder = (options && options.dialogsInBody) ? $(document.body) : null;                              // 586\n                                                                                                                       // 587\n        return {                                                                                                       // 588\n          editor: function () { return $editor; },                                                                     // 589\n          holder : function () { return $editor.data('holder'); },                                                     // 590\n          dropzone: makeFinder('.note-dropzone'),                                                                      // 591\n          toolbar: makeFinder('.note-toolbar'),                                                                        // 592\n          editable: makeFinder('.note-editable'),                                                                      // 593\n          codable: makeFinder('.note-codable'),                                                                        // 594\n          statusbar: makeFinder('.note-statusbar'),                                                                    // 595\n          popover: makeFinder('.note-popover'),                                                                        // 596\n          handle: makeFinder('.note-handle'),                                                                          // 597\n          dialog: makeFinder('.note-dialog', $dialogHolder)                                                            // 598\n        };                                                                                                             // 599\n      }                                                                                                                // 600\n    };                                                                                                                 // 601\n                                                                                                                       // 602\n    /**                                                                                                                // 603\n     * returns makeLayoutInfo from editor's descendant node.                                                           // 604\n     *                                                                                                                 // 605\n     * @private                                                                                                        // 606\n     * @param {Node} descendant                                                                                        // 607\n     * @return {Object}                                                                                                // 608\n     */                                                                                                                // 609\n    var makeLayoutInfo = function (descendant) {                                                                       // 610\n      var $target = $(descendant).closest('.note-editor, .note-air-editor, .note-air-layout');                         // 611\n                                                                                                                       // 612\n      if (!$target.length) {                                                                                           // 613\n        return null;                                                                                                   // 614\n      }                                                                                                                // 615\n                                                                                                                       // 616\n      var $editor;                                                                                                     // 617\n      if ($target.is('.note-editor, .note-air-editor')) {                                                              // 618\n        $editor = $target;                                                                                             // 619\n      } else {                                                                                                         // 620\n        $editor = $('#note-editor-' + list.last($target.attr('id').split('-')));                                       // 621\n      }                                                                                                                // 622\n                                                                                                                       // 623\n      return buildLayoutInfo($editor);                                                                                 // 624\n    };                                                                                                                 // 625\n                                                                                                                       // 626\n    /**                                                                                                                // 627\n     * @method makePredByNodeName                                                                                      // 628\n     *                                                                                                                 // 629\n     * returns predicate which judge whether nodeName is same                                                          // 630\n     *                                                                                                                 // 631\n     * @param {String} nodeName                                                                                        // 632\n     * @return {Function}                                                                                              // 633\n     */                                                                                                                // 634\n    var makePredByNodeName = function (nodeName) {                                                                     // 635\n      nodeName = nodeName.toUpperCase();                                                                               // 636\n      return function (node) {                                                                                         // 637\n        return node && node.nodeName.toUpperCase() === nodeName;                                                       // 638\n      };                                                                                                               // 639\n    };                                                                                                                 // 640\n                                                                                                                       // 641\n    /**                                                                                                                // 642\n     * @method isText                                                                                                  // 643\n     *                                                                                                                 // 644\n     *                                                                                                                 // 645\n     *                                                                                                                 // 646\n     * @param {Node} node                                                                                              // 647\n     * @return {Boolean} true if node's type is text(3)                                                                // 648\n     */                                                                                                                // 649\n    var isText = function (node) {                                                                                     // 650\n      return node && node.nodeType === 3;                                                                              // 651\n    };                                                                                                                 // 652\n                                                                                                                       // 653\n    /**                                                                                                                // 654\n     * ex) br, col, embed, hr, img, input, ...                                                                         // 655\n     * @see http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements                                     // 656\n     */                                                                                                                // 657\n    var isVoid = function (node) {                                                                                     // 658\n      return node && /^BR|^IMG|^HR|^IFRAME|^BUTTON/.test(node.nodeName.toUpperCase());                                 // 659\n    };                                                                                                                 // 660\n                                                                                                                       // 661\n    var isPara = function (node) {                                                                                     // 662\n      if (isEditable(node)) {                                                                                          // 663\n        return false;                                                                                                  // 664\n      }                                                                                                                // 665\n                                                                                                                       // 666\n      // Chrome(v31.0), FF(v25.0.1) use DIV for paragraph                                                              // 667\n      return node && /^DIV|^P|^LI|^H[1-7]/.test(node.nodeName.toUpperCase());                                          // 668\n    };                                                                                                                 // 669\n                                                                                                                       // 670\n    var isLi = makePredByNodeName('LI');                                                                               // 671\n                                                                                                                       // 672\n    var isPurePara = function (node) {                                                                                 // 673\n      return isPara(node) && !isLi(node);                                                                              // 674\n    };                                                                                                                 // 675\n                                                                                                                       // 676\n    var isTable = makePredByNodeName('TABLE');                                                                         // 677\n                                                                                                                       // 678\n    var isInline = function (node) {                                                                                   // 679\n      return !isBodyContainer(node) &&                                                                                 // 680\n             !isList(node) &&                                                                                          // 681\n             !isHr(node) &&                                                                                            // 682\n             !isPara(node) &&                                                                                          // 683\n             !isTable(node) &&                                                                                         // 684\n             !isBlockquote(node);                                                                                      // 685\n    };                                                                                                                 // 686\n                                                                                                                       // 687\n    var isList = function (node) {                                                                                     // 688\n      return node && /^UL|^OL/.test(node.nodeName.toUpperCase());                                                      // 689\n    };                                                                                                                 // 690\n                                                                                                                       // 691\n    var isHr = makePredByNodeName('HR');                                                                               // 692\n                                                                                                                       // 693\n    var isCell = function (node) {                                                                                     // 694\n      return node && /^TD|^TH/.test(node.nodeName.toUpperCase());                                                      // 695\n    };                                                                                                                 // 696\n                                                                                                                       // 697\n    var isBlockquote = makePredByNodeName('BLOCKQUOTE');                                                               // 698\n                                                                                                                       // 699\n    var isBodyContainer = function (node) {                                                                            // 700\n      return isCell(node) || isBlockquote(node) || isEditable(node);                                                   // 701\n    };                                                                                                                 // 702\n                                                                                                                       // 703\n    var isAnchor = makePredByNodeName('A');                                                                            // 704\n                                                                                                                       // 705\n    var isParaInline = function (node) {                                                                               // 706\n      return isInline(node) && !!ancestor(node, isPara);                                                               // 707\n    };                                                                                                                 // 708\n                                                                                                                       // 709\n    var isBodyInline = function (node) {                                                                               // 710\n      return isInline(node) && !ancestor(node, isPara);                                                                // 711\n    };                                                                                                                 // 712\n                                                                                                                       // 713\n    var isBody = makePredByNodeName('BODY');                                                                           // 714\n                                                                                                                       // 715\n    /**                                                                                                                // 716\n     * returns whether nodeB is closest sibling of nodeA                                                               // 717\n     *                                                                                                                 // 718\n     * @param {Node} nodeA                                                                                             // 719\n     * @param {Node} nodeB                                                                                             // 720\n     * @return {Boolean}                                                                                               // 721\n     */                                                                                                                // 722\n    var isClosestSibling = function (nodeA, nodeB) {                                                                   // 723\n      return nodeA.nextSibling === nodeB ||                                                                            // 724\n             nodeA.previousSibling === nodeB;                                                                          // 725\n    };                                                                                                                 // 726\n                                                                                                                       // 727\n    /**                                                                                                                // 728\n     * returns array of closest siblings with node                                                                     // 729\n     *                                                                                                                 // 730\n     * @param {Node} node                                                                                              // 731\n     * @param {function} [pred] - predicate function                                                                   // 732\n     * @return {Node[]}                                                                                                // 733\n     */                                                                                                                // 734\n    var withClosestSiblings = function (node, pred) {                                                                  // 735\n      pred = pred || func.ok;                                                                                          // 736\n                                                                                                                       // 737\n      var siblings = [];                                                                                               // 738\n      if (node.previousSibling && pred(node.previousSibling)) {                                                        // 739\n        siblings.push(node.previousSibling);                                                                           // 740\n      }                                                                                                                // 741\n      siblings.push(node);                                                                                             // 742\n      if (node.nextSibling && pred(node.nextSibling)) {                                                                // 743\n        siblings.push(node.nextSibling);                                                                               // 744\n      }                                                                                                                // 745\n      return siblings;                                                                                                 // 746\n    };                                                                                                                 // 747\n                                                                                                                       // 748\n    /**                                                                                                                // 749\n     * blank HTML for cursor position                                                                                  // 750\n     * - [workaround] old IE only works with &nbsp;                                                                    // 751\n     * - [workaround] IE11 and other browser works with bogus br                                                       // 752\n     */                                                                                                                // 753\n    var blankHTML = agent.isMSIE && agent.browserVersion < 11 ? '&nbsp;' : '<br>';                                     // 754\n                                                                                                                       // 755\n    /**                                                                                                                // 756\n     * @method nodeLength                                                                                              // 757\n     *                                                                                                                 // 758\n     * returns #text's text size or element's childNodes size                                                          // 759\n     *                                                                                                                 // 760\n     * @param {Node} node                                                                                              // 761\n     */                                                                                                                // 762\n    var nodeLength = function (node) {                                                                                 // 763\n      if (isText(node)) {                                                                                              // 764\n        return node.nodeValue.length;                                                                                  // 765\n      }                                                                                                                // 766\n                                                                                                                       // 767\n      return node.childNodes.length;                                                                                   // 768\n    };                                                                                                                 // 769\n                                                                                                                       // 770\n    /**                                                                                                                // 771\n     * returns whether node is empty or not.                                                                           // 772\n     *                                                                                                                 // 773\n     * @param {Node} node                                                                                              // 774\n     * @return {Boolean}                                                                                               // 775\n     */                                                                                                                // 776\n    var isEmpty = function (node) {                                                                                    // 777\n      var len = nodeLength(node);                                                                                      // 778\n                                                                                                                       // 779\n      if (len === 0) {                                                                                                 // 780\n        return true;                                                                                                   // 781\n      } else if (!isText(node) && len === 1 && node.innerHTML === blankHTML) {                                         // 782\n        // ex) <p><br></p>, <span><br></span>                                                                          // 783\n        return true;                                                                                                   // 784\n      } else if (list.all(node.childNodes, isText) && node.innerHTML === '') {                                         // 785\n        // ex) <p></p>, <span></span>                                                                                  // 786\n        return true;                                                                                                   // 787\n      }                                                                                                                // 788\n                                                                                                                       // 789\n      return false;                                                                                                    // 790\n    };                                                                                                                 // 791\n                                                                                                                       // 792\n    /**                                                                                                                // 793\n     * padding blankHTML if node is empty (for cursor position)                                                        // 794\n     */                                                                                                                // 795\n    var paddingBlankHTML = function (node) {                                                                           // 796\n      if (!isVoid(node) && !nodeLength(node)) {                                                                        // 797\n        node.innerHTML = blankHTML;                                                                                    // 798\n      }                                                                                                                // 799\n    };                                                                                                                 // 800\n                                                                                                                       // 801\n    /**                                                                                                                // 802\n     * find nearest ancestor predicate hit                                                                             // 803\n     *                                                                                                                 // 804\n     * @param {Node} node                                                                                              // 805\n     * @param {Function} pred - predicate function                                                                     // 806\n     */                                                                                                                // 807\n    var ancestor = function (node, pred) {                                                                             // 808\n      while (node) {                                                                                                   // 809\n        if (pred(node)) { return node; }                                                                               // 810\n        if (isEditable(node)) { break; }                                                                               // 811\n                                                                                                                       // 812\n        node = node.parentNode;                                                                                        // 813\n      }                                                                                                                // 814\n      return null;                                                                                                     // 815\n    };                                                                                                                 // 816\n                                                                                                                       // 817\n    /**                                                                                                                // 818\n     * find nearest ancestor only single child blood line and predicate hit                                            // 819\n     *                                                                                                                 // 820\n     * @param {Node} node                                                                                              // 821\n     * @param {Function} pred - predicate function                                                                     // 822\n     */                                                                                                                // 823\n    var singleChildAncestor = function (node, pred) {                                                                  // 824\n      node = node.parentNode;                                                                                          // 825\n                                                                                                                       // 826\n      while (node) {                                                                                                   // 827\n        if (nodeLength(node) !== 1) { break; }                                                                         // 828\n        if (pred(node)) { return node; }                                                                               // 829\n        if (isEditable(node)) { break; }                                                                               // 830\n                                                                                                                       // 831\n        node = node.parentNode;                                                                                        // 832\n      }                                                                                                                // 833\n      return null;                                                                                                     // 834\n    };                                                                                                                 // 835\n                                                                                                                       // 836\n    /**                                                                                                                // 837\n     * returns new array of ancestor nodes (until predicate hit).                                                      // 838\n     *                                                                                                                 // 839\n     * @param {Node} node                                                                                              // 840\n     * @param {Function} [optional] pred - predicate function                                                          // 841\n     */                                                                                                                // 842\n    var listAncestor = function (node, pred) {                                                                         // 843\n      pred = pred || func.fail;                                                                                        // 844\n                                                                                                                       // 845\n      var ancestors = [];                                                                                              // 846\n      ancestor(node, function (el) {                                                                                   // 847\n        if (!isEditable(el)) {                                                                                         // 848\n          ancestors.push(el);                                                                                          // 849\n        }                                                                                                              // 850\n                                                                                                                       // 851\n        return pred(el);                                                                                               // 852\n      });                                                                                                              // 853\n      return ancestors;                                                                                                // 854\n    };                                                                                                                 // 855\n                                                                                                                       // 856\n    /**                                                                                                                // 857\n     * find farthest ancestor predicate hit                                                                            // 858\n     */                                                                                                                // 859\n    var lastAncestor = function (node, pred) {                                                                         // 860\n      var ancestors = listAncestor(node);                                                                              // 861\n      return list.last(ancestors.filter(pred));                                                                        // 862\n    };                                                                                                                 // 863\n                                                                                                                       // 864\n    /**                                                                                                                // 865\n     * returns common ancestor node between two nodes.                                                                 // 866\n     *                                                                                                                 // 867\n     * @param {Node} nodeA                                                                                             // 868\n     * @param {Node} nodeB                                                                                             // 869\n     */                                                                                                                // 870\n    var commonAncestor = function (nodeA, nodeB) {                                                                     // 871\n      var ancestors = listAncestor(nodeA);                                                                             // 872\n      for (var n = nodeB; n; n = n.parentNode) {                                                                       // 873\n        if ($.inArray(n, ancestors) > -1) { return n; }                                                                // 874\n      }                                                                                                                // 875\n      return null; // difference document area                                                                         // 876\n    };                                                                                                                 // 877\n                                                                                                                       // 878\n    /**                                                                                                                // 879\n     * listing all previous siblings (until predicate hit).                                                            // 880\n     *                                                                                                                 // 881\n     * @param {Node} node                                                                                              // 882\n     * @param {Function} [optional] pred - predicate function                                                          // 883\n     */                                                                                                                // 884\n    var listPrev = function (node, pred) {                                                                             // 885\n      pred = pred || func.fail;                                                                                        // 886\n                                                                                                                       // 887\n      var nodes = [];                                                                                                  // 888\n      while (node) {                                                                                                   // 889\n        if (pred(node)) { break; }                                                                                     // 890\n        nodes.push(node);                                                                                              // 891\n        node = node.previousSibling;                                                                                   // 892\n      }                                                                                                                // 893\n      return nodes;                                                                                                    // 894\n    };                                                                                                                 // 895\n                                                                                                                       // 896\n    /**                                                                                                                // 897\n     * listing next siblings (until predicate hit).                                                                    // 898\n     *                                                                                                                 // 899\n     * @param {Node} node                                                                                              // 900\n     * @param {Function} [pred] - predicate function                                                                   // 901\n     */                                                                                                                // 902\n    var listNext = function (node, pred) {                                                                             // 903\n      pred = pred || func.fail;                                                                                        // 904\n                                                                                                                       // 905\n      var nodes = [];                                                                                                  // 906\n      while (node) {                                                                                                   // 907\n        if (pred(node)) { break; }                                                                                     // 908\n        nodes.push(node);                                                                                              // 909\n        node = node.nextSibling;                                                                                       // 910\n      }                                                                                                                // 911\n      return nodes;                                                                                                    // 912\n    };                                                                                                                 // 913\n                                                                                                                       // 914\n    /**                                                                                                                // 915\n     * listing descendant nodes                                                                                        // 916\n     *                                                                                                                 // 917\n     * @param {Node} node                                                                                              // 918\n     * @param {Function} [pred] - predicate function                                                                   // 919\n     */                                                                                                                // 920\n    var listDescendant = function (node, pred) {                                                                       // 921\n      var descendents = [];                                                                                            // 922\n      pred = pred || func.ok;                                                                                          // 923\n                                                                                                                       // 924\n      // start DFS(depth first search) with node                                                                       // 925\n      (function fnWalk(current) {                                                                                      // 926\n        if (node !== current && pred(current)) {                                                                       // 927\n          descendents.push(current);                                                                                   // 928\n        }                                                                                                              // 929\n        for (var idx = 0, len = current.childNodes.length; idx < len; idx++) {                                         // 930\n          fnWalk(current.childNodes[idx]);                                                                             // 931\n        }                                                                                                              // 932\n      })(node);                                                                                                        // 933\n                                                                                                                       // 934\n      return descendents;                                                                                              // 935\n    };                                                                                                                 // 936\n                                                                                                                       // 937\n    /**                                                                                                                // 938\n     * wrap node with new tag.                                                                                         // 939\n     *                                                                                                                 // 940\n     * @param {Node} node                                                                                              // 941\n     * @param {Node} tagName of wrapper                                                                                // 942\n     * @return {Node} - wrapper                                                                                        // 943\n     */                                                                                                                // 944\n    var wrap = function (node, wrapperName) {                                                                          // 945\n      var parent = node.parentNode;                                                                                    // 946\n      var wrapper = $('<' + wrapperName + '>')[0];                                                                     // 947\n                                                                                                                       // 948\n      parent.insertBefore(wrapper, node);                                                                              // 949\n      wrapper.appendChild(node);                                                                                       // 950\n                                                                                                                       // 951\n      return wrapper;                                                                                                  // 952\n    };                                                                                                                 // 953\n                                                                                                                       // 954\n    /**                                                                                                                // 955\n     * insert node after preceding                                                                                     // 956\n     *                                                                                                                 // 957\n     * @param {Node} node                                                                                              // 958\n     * @param {Node} preceding - predicate function                                                                    // 959\n     */                                                                                                                // 960\n    var insertAfter = function (node, preceding) {                                                                     // 961\n      var next = preceding.nextSibling, parent = preceding.parentNode;                                                 // 962\n      if (next) {                                                                                                      // 963\n        parent.insertBefore(node, next);                                                                               // 964\n      } else {                                                                                                         // 965\n        parent.appendChild(node);                                                                                      // 966\n      }                                                                                                                // 967\n      return node;                                                                                                     // 968\n    };                                                                                                                 // 969\n                                                                                                                       // 970\n    /**                                                                                                                // 971\n     * append elements.                                                                                                // 972\n     *                                                                                                                 // 973\n     * @param {Node} node                                                                                              // 974\n     * @param {Collection} aChild                                                                                      // 975\n     */                                                                                                                // 976\n    var appendChildNodes = function (node, aChild) {                                                                   // 977\n      $.each(aChild, function (idx, child) {                                                                           // 978\n        node.appendChild(child);                                                                                       // 979\n      });                                                                                                              // 980\n      return node;                                                                                                     // 981\n    };                                                                                                                 // 982\n                                                                                                                       // 983\n    /**                                                                                                                // 984\n     * returns whether boundaryPoint is left edge or not.                                                              // 985\n     *                                                                                                                 // 986\n     * @param {BoundaryPoint} point                                                                                    // 987\n     * @return {Boolean}                                                                                               // 988\n     */                                                                                                                // 989\n    var isLeftEdgePoint = function (point) {                                                                           // 990\n      return point.offset === 0;                                                                                       // 991\n    };                                                                                                                 // 992\n                                                                                                                       // 993\n    /**                                                                                                                // 994\n     * returns whether boundaryPoint is right edge or not.                                                             // 995\n     *                                                                                                                 // 996\n     * @param {BoundaryPoint} point                                                                                    // 997\n     * @return {Boolean}                                                                                               // 998\n     */                                                                                                                // 999\n    var isRightEdgePoint = function (point) {                                                                          // 1000\n      return point.offset === nodeLength(point.node);                                                                  // 1001\n    };                                                                                                                 // 1002\n                                                                                                                       // 1003\n    /**                                                                                                                // 1004\n     * returns whether boundaryPoint is edge or not.                                                                   // 1005\n     *                                                                                                                 // 1006\n     * @param {BoundaryPoint} point                                                                                    // 1007\n     * @return {Boolean}                                                                                               // 1008\n     */                                                                                                                // 1009\n    var isEdgePoint = function (point) {                                                                               // 1010\n      return isLeftEdgePoint(point) || isRightEdgePoint(point);                                                        // 1011\n    };                                                                                                                 // 1012\n                                                                                                                       // 1013\n    /**                                                                                                                // 1014\n     * returns wheter node is left edge of ancestor or not.                                                            // 1015\n     *                                                                                                                 // 1016\n     * @param {Node} node                                                                                              // 1017\n     * @param {Node} ancestor                                                                                          // 1018\n     * @return {Boolean}                                                                                               // 1019\n     */                                                                                                                // 1020\n    var isLeftEdgeOf = function (node, ancestor) {                                                                     // 1021\n      while (node && node !== ancestor) {                                                                              // 1022\n        if (position(node) !== 0) {                                                                                    // 1023\n          return false;                                                                                                // 1024\n        }                                                                                                              // 1025\n        node = node.parentNode;                                                                                        // 1026\n      }                                                                                                                // 1027\n                                                                                                                       // 1028\n      return true;                                                                                                     // 1029\n    };                                                                                                                 // 1030\n                                                                                                                       // 1031\n    /**                                                                                                                // 1032\n     * returns whether node is right edge of ancestor or not.                                                          // 1033\n     *                                                                                                                 // 1034\n     * @param {Node} node                                                                                              // 1035\n     * @param {Node} ancestor                                                                                          // 1036\n     * @return {Boolean}                                                                                               // 1037\n     */                                                                                                                // 1038\n    var isRightEdgeOf = function (node, ancestor) {                                                                    // 1039\n      while (node && node !== ancestor) {                                                                              // 1040\n        if (position(node) !== nodeLength(node.parentNode) - 1) {                                                      // 1041\n          return false;                                                                                                // 1042\n        }                                                                                                              // 1043\n        node = node.parentNode;                                                                                        // 1044\n      }                                                                                                                // 1045\n                                                                                                                       // 1046\n      return true;                                                                                                     // 1047\n    };                                                                                                                 // 1048\n                                                                                                                       // 1049\n    /**                                                                                                                // 1050\n     * returns whether point is left edge of ancestor or not.                                                          // 1051\n     * @param {BoundaryPoint} point                                                                                    // 1052\n     * @param {Node} ancestor                                                                                          // 1053\n     * @return {Boolean}                                                                                               // 1054\n     */                                                                                                                // 1055\n    var isLeftEdgePointOf = function (point, ancestor) {                                                               // 1056\n      return isLeftEdgePoint(point) && isLeftEdgeOf(point.node, ancestor);                                             // 1057\n    };                                                                                                                 // 1058\n                                                                                                                       // 1059\n    /**                                                                                                                // 1060\n     * returns whether point is right edge of ancestor or not.                                                         // 1061\n     * @param {BoundaryPoint} point                                                                                    // 1062\n     * @param {Node} ancestor                                                                                          // 1063\n     * @return {Boolean}                                                                                               // 1064\n     */                                                                                                                // 1065\n    var isRightEdgePointOf = function (point, ancestor) {                                                              // 1066\n      return isRightEdgePoint(point) && isRightEdgeOf(point.node, ancestor);                                           // 1067\n    };                                                                                                                 // 1068\n                                                                                                                       // 1069\n    /**                                                                                                                // 1070\n     * returns offset from parent.                                                                                     // 1071\n     *                                                                                                                 // 1072\n     * @param {Node} node                                                                                              // 1073\n     */                                                                                                                // 1074\n    var position = function (node) {                                                                                   // 1075\n      var offset = 0;                                                                                                  // 1076\n      while ((node = node.previousSibling)) {                                                                          // 1077\n        offset += 1;                                                                                                   // 1078\n      }                                                                                                                // 1079\n      return offset;                                                                                                   // 1080\n    };                                                                                                                 // 1081\n                                                                                                                       // 1082\n    var hasChildren = function (node) {                                                                                // 1083\n      return !!(node && node.childNodes && node.childNodes.length);                                                    // 1084\n    };                                                                                                                 // 1085\n                                                                                                                       // 1086\n    /**                                                                                                                // 1087\n     * returns previous boundaryPoint                                                                                  // 1088\n     *                                                                                                                 // 1089\n     * @param {BoundaryPoint} point                                                                                    // 1090\n     * @param {Boolean} isSkipInnerOffset                                                                              // 1091\n     * @return {BoundaryPoint}                                                                                         // 1092\n     */                                                                                                                // 1093\n    var prevPoint = function (point, isSkipInnerOffset) {                                                              // 1094\n      var node, offset;                                                                                                // 1095\n                                                                                                                       // 1096\n      if (point.offset === 0) {                                                                                        // 1097\n        if (isEditable(point.node)) {                                                                                  // 1098\n          return null;                                                                                                 // 1099\n        }                                                                                                              // 1100\n                                                                                                                       // 1101\n        node = point.node.parentNode;                                                                                  // 1102\n        offset = position(point.node);                                                                                 // 1103\n      } else if (hasChildren(point.node)) {                                                                            // 1104\n        node = point.node.childNodes[point.offset - 1];                                                                // 1105\n        offset = nodeLength(node);                                                                                     // 1106\n      } else {                                                                                                         // 1107\n        node = point.node;                                                                                             // 1108\n        offset = isSkipInnerOffset ? 0 : point.offset - 1;                                                             // 1109\n      }                                                                                                                // 1110\n                                                                                                                       // 1111\n      return {                                                                                                         // 1112\n        node: node,                                                                                                    // 1113\n        offset: offset                                                                                                 // 1114\n      };                                                                                                               // 1115\n    };                                                                                                                 // 1116\n                                                                                                                       // 1117\n    /**                                                                                                                // 1118\n     * returns next boundaryPoint                                                                                      // 1119\n     *                                                                                                                 // 1120\n     * @param {BoundaryPoint} point                                                                                    // 1121\n     * @param {Boolean} isSkipInnerOffset                                                                              // 1122\n     * @return {BoundaryPoint}                                                                                         // 1123\n     */                                                                                                                // 1124\n    var nextPoint = function (point, isSkipInnerOffset) {                                                              // 1125\n      var node, offset;                                                                                                // 1126\n                                                                                                                       // 1127\n      if (nodeLength(point.node) === point.offset) {                                                                   // 1128\n        if (isEditable(point.node)) {                                                                                  // 1129\n          return null;                                                                                                 // 1130\n        }                                                                                                              // 1131\n                                                                                                                       // 1132\n        node = point.node.parentNode;                                                                                  // 1133\n        offset = position(point.node) + 1;                                                                             // 1134\n      } else if (hasChildren(point.node)) {                                                                            // 1135\n        node = point.node.childNodes[point.offset];                                                                    // 1136\n        offset = 0;                                                                                                    // 1137\n      } else {                                                                                                         // 1138\n        node = point.node;                                                                                             // 1139\n        offset = isSkipInnerOffset ? nodeLength(point.node) : point.offset + 1;                                        // 1140\n      }                                                                                                                // 1141\n                                                                                                                       // 1142\n      return {                                                                                                         // 1143\n        node: node,                                                                                                    // 1144\n        offset: offset                                                                                                 // 1145\n      };                                                                                                               // 1146\n    };                                                                                                                 // 1147\n                                                                                                                       // 1148\n    /**                                                                                                                // 1149\n     * returns whether pointA and pointB is same or not.                                                               // 1150\n     *                                                                                                                 // 1151\n     * @param {BoundaryPoint} pointA                                                                                   // 1152\n     * @param {BoundaryPoint} pointB                                                                                   // 1153\n     * @return {Boolean}                                                                                               // 1154\n     */                                                                                                                // 1155\n    var isSamePoint = function (pointA, pointB) {                                                                      // 1156\n      return pointA.node === pointB.node && pointA.offset === pointB.offset;                                           // 1157\n    };                                                                                                                 // 1158\n                                                                                                                       // 1159\n    /**                                                                                                                // 1160\n     * returns whether point is visible (can set cursor) or not.                                                       // 1161\n     *                                                                                                                 // 1162\n     * @param {BoundaryPoint} point                                                                                    // 1163\n     * @return {Boolean}                                                                                               // 1164\n     */                                                                                                                // 1165\n    var isVisiblePoint = function (point) {                                                                            // 1166\n      if (isText(point.node) || !hasChildren(point.node) || isEmpty(point.node)) {                                     // 1167\n        return true;                                                                                                   // 1168\n      }                                                                                                                // 1169\n                                                                                                                       // 1170\n      var leftNode = point.node.childNodes[point.offset - 1];                                                          // 1171\n      var rightNode = point.node.childNodes[point.offset];                                                             // 1172\n      if ((!leftNode || isVoid(leftNode)) && (!rightNode || isVoid(rightNode))) {                                      // 1173\n        return true;                                                                                                   // 1174\n      }                                                                                                                // 1175\n                                                                                                                       // 1176\n      return false;                                                                                                    // 1177\n    };                                                                                                                 // 1178\n                                                                                                                       // 1179\n    /**                                                                                                                // 1180\n     * @method prevPointUtil                                                                                           // 1181\n     *                                                                                                                 // 1182\n     * @param {BoundaryPoint} point                                                                                    // 1183\n     * @param {Function} pred                                                                                          // 1184\n     * @return {BoundaryPoint}                                                                                         // 1185\n     */                                                                                                                // 1186\n    var prevPointUntil = function (point, pred) {                                                                      // 1187\n      while (point) {                                                                                                  // 1188\n        if (pred(point)) {                                                                                             // 1189\n          return point;                                                                                                // 1190\n        }                                                                                                              // 1191\n                                                                                                                       // 1192\n        point = prevPoint(point);                                                                                      // 1193\n      }                                                                                                                // 1194\n                                                                                                                       // 1195\n      return null;                                                                                                     // 1196\n    };                                                                                                                 // 1197\n                                                                                                                       // 1198\n    /**                                                                                                                // 1199\n     * @method nextPointUntil                                                                                          // 1200\n     *                                                                                                                 // 1201\n     * @param {BoundaryPoint} point                                                                                    // 1202\n     * @param {Function} pred                                                                                          // 1203\n     * @return {BoundaryPoint}                                                                                         // 1204\n     */                                                                                                                // 1205\n    var nextPointUntil = function (point, pred) {                                                                      // 1206\n      while (point) {                                                                                                  // 1207\n        if (pred(point)) {                                                                                             // 1208\n          return point;                                                                                                // 1209\n        }                                                                                                              // 1210\n                                                                                                                       // 1211\n        point = nextPoint(point);                                                                                      // 1212\n      }                                                                                                                // 1213\n                                                                                                                       // 1214\n      return null;                                                                                                     // 1215\n    };                                                                                                                 // 1216\n                                                                                                                       // 1217\n    /**                                                                                                                // 1218\n     * returns whether point has character or not.                                                                     // 1219\n     *                                                                                                                 // 1220\n     * @param {Point} point                                                                                            // 1221\n     * @return {Boolean}                                                                                               // 1222\n     */                                                                                                                // 1223\n    var isCharPoint = function (point) {                                                                               // 1224\n      if (!isText(point.node)) {                                                                                       // 1225\n        return false;                                                                                                  // 1226\n      }                                                                                                                // 1227\n                                                                                                                       // 1228\n      var ch = point.node.nodeValue.charAt(point.offset - 1);                                                          // 1229\n      return ch && (ch !== ' ' && ch !== NBSP_CHAR);                                                                   // 1230\n    };                                                                                                                 // 1231\n                                                                                                                       // 1232\n    /**                                                                                                                // 1233\n     * @method walkPoint                                                                                               // 1234\n     *                                                                                                                 // 1235\n     * @param {BoundaryPoint} startPoint                                                                               // 1236\n     * @param {BoundaryPoint} endPoint                                                                                 // 1237\n     * @param {Function} handler                                                                                       // 1238\n     * @param {Boolean} isSkipInnerOffset                                                                              // 1239\n     */                                                                                                                // 1240\n    var walkPoint = function (startPoint, endPoint, handler, isSkipInnerOffset) {                                      // 1241\n      var point = startPoint;                                                                                          // 1242\n                                                                                                                       // 1243\n      while (point) {                                                                                                  // 1244\n        handler(point);                                                                                                // 1245\n                                                                                                                       // 1246\n        if (isSamePoint(point, endPoint)) {                                                                            // 1247\n          break;                                                                                                       // 1248\n        }                                                                                                              // 1249\n                                                                                                                       // 1250\n        var isSkipOffset = isSkipInnerOffset &&                                                                        // 1251\n                           startPoint.node !== point.node &&                                                           // 1252\n                           endPoint.node !== point.node;                                                               // 1253\n        point = nextPoint(point, isSkipOffset);                                                                        // 1254\n      }                                                                                                                // 1255\n    };                                                                                                                 // 1256\n                                                                                                                       // 1257\n    /**                                                                                                                // 1258\n     * @method makeOffsetPath                                                                                          // 1259\n     *                                                                                                                 // 1260\n     * return offsetPath(array of offset) from ancestor                                                                // 1261\n     *                                                                                                                 // 1262\n     * @param {Node} ancestor - ancestor node                                                                          // 1263\n     * @param {Node} node                                                                                              // 1264\n     */                                                                                                                // 1265\n    var makeOffsetPath = function (ancestor, node) {                                                                   // 1266\n      var ancestors = listAncestor(node, func.eq(ancestor));                                                           // 1267\n      return ancestors.map(position).reverse();                                                                        // 1268\n    };                                                                                                                 // 1269\n                                                                                                                       // 1270\n    /**                                                                                                                // 1271\n     * @method fromOffsetPath                                                                                          // 1272\n     *                                                                                                                 // 1273\n     * return element from offsetPath(array of offset)                                                                 // 1274\n     *                                                                                                                 // 1275\n     * @param {Node} ancestor - ancestor node                                                                          // 1276\n     * @param {array} offsets - offsetPath                                                                             // 1277\n     */                                                                                                                // 1278\n    var fromOffsetPath = function (ancestor, offsets) {                                                                // 1279\n      var current = ancestor;                                                                                          // 1280\n      for (var i = 0, len = offsets.length; i < len; i++) {                                                            // 1281\n        if (current.childNodes.length <= offsets[i]) {                                                                 // 1282\n          current = current.childNodes[current.childNodes.length - 1];                                                 // 1283\n        } else {                                                                                                       // 1284\n          current = current.childNodes[offsets[i]];                                                                    // 1285\n        }                                                                                                              // 1286\n      }                                                                                                                // 1287\n      return current;                                                                                                  // 1288\n    };                                                                                                                 // 1289\n                                                                                                                       // 1290\n    /**                                                                                                                // 1291\n     * @method splitNode                                                                                               // 1292\n     *                                                                                                                 // 1293\n     * split element or #text                                                                                          // 1294\n     *                                                                                                                 // 1295\n     * @param {BoundaryPoint} point                                                                                    // 1296\n     * @param {Object} [options]                                                                                       // 1297\n     * @param {Boolean} [options.isSkipPaddingBlankHTML] - default: false                                              // 1298\n     * @param {Boolean} [options.isNotSplitEdgePoint] - default: false                                                 // 1299\n     * @return {Node} right node of boundaryPoint                                                                      // 1300\n     */                                                                                                                // 1301\n    var splitNode = function (point, options) {                                                                        // 1302\n      var isSkipPaddingBlankHTML = options && options.isSkipPaddingBlankHTML;                                          // 1303\n      var isNotSplitEdgePoint = options && options.isNotSplitEdgePoint;                                                // 1304\n                                                                                                                       // 1305\n      // edge case                                                                                                     // 1306\n      if (isEdgePoint(point) && (isText(point.node) || isNotSplitEdgePoint)) {                                         // 1307\n        if (isLeftEdgePoint(point)) {                                                                                  // 1308\n          return point.node;                                                                                           // 1309\n        } else if (isRightEdgePoint(point)) {                                                                          // 1310\n          return point.node.nextSibling;                                                                               // 1311\n        }                                                                                                              // 1312\n      }                                                                                                                // 1313\n                                                                                                                       // 1314\n      // split #text                                                                                                   // 1315\n      if (isText(point.node)) {                                                                                        // 1316\n        return point.node.splitText(point.offset);                                                                     // 1317\n      } else {                                                                                                         // 1318\n        var childNode = point.node.childNodes[point.offset];                                                           // 1319\n        var clone = insertAfter(point.node.cloneNode(false), point.node);                                              // 1320\n        appendChildNodes(clone, listNext(childNode));                                                                  // 1321\n                                                                                                                       // 1322\n        if (!isSkipPaddingBlankHTML) {                                                                                 // 1323\n          paddingBlankHTML(point.node);                                                                                // 1324\n          paddingBlankHTML(clone);                                                                                     // 1325\n        }                                                                                                              // 1326\n                                                                                                                       // 1327\n        return clone;                                                                                                  // 1328\n      }                                                                                                                // 1329\n    };                                                                                                                 // 1330\n                                                                                                                       // 1331\n    /**                                                                                                                // 1332\n     * @method splitTree                                                                                               // 1333\n     *                                                                                                                 // 1334\n     * split tree by point                                                                                             // 1335\n     *                                                                                                                 // 1336\n     * @param {Node} root - split root                                                                                 // 1337\n     * @param {BoundaryPoint} point                                                                                    // 1338\n     * @param {Object} [options]                                                                                       // 1339\n     * @param {Boolean} [options.isSkipPaddingBlankHTML] - default: false                                              // 1340\n     * @param {Boolean} [options.isNotSplitEdgePoint] - default: false                                                 // 1341\n     * @return {Node} right node of boundaryPoint                                                                      // 1342\n     */                                                                                                                // 1343\n    var splitTree = function (root, point, options) {                                                                  // 1344\n      // ex) [#text, <span>, <p>]                                                                                      // 1345\n      var ancestors = listAncestor(point.node, func.eq(root));                                                         // 1346\n                                                                                                                       // 1347\n      if (!ancestors.length) {                                                                                         // 1348\n        return null;                                                                                                   // 1349\n      } else if (ancestors.length === 1) {                                                                             // 1350\n        return splitNode(point, options);                                                                              // 1351\n      }                                                                                                                // 1352\n                                                                                                                       // 1353\n      return ancestors.reduce(function (node, parent) {                                                                // 1354\n        if (node === point.node) {                                                                                     // 1355\n          node = splitNode(point, options);                                                                            // 1356\n        }                                                                                                              // 1357\n                                                                                                                       // 1358\n        return splitNode({                                                                                             // 1359\n          node: parent,                                                                                                // 1360\n          offset: node ? dom.position(node) : nodeLength(parent)                                                       // 1361\n        }, options);                                                                                                   // 1362\n      });                                                                                                              // 1363\n    };                                                                                                                 // 1364\n                                                                                                                       // 1365\n    /**                                                                                                                // 1366\n     * split point                                                                                                     // 1367\n     *                                                                                                                 // 1368\n     * @param {Point} point                                                                                            // 1369\n     * @param {Boolean} isInline                                                                                       // 1370\n     * @return {Object}                                                                                                // 1371\n     */                                                                                                                // 1372\n    var splitPoint = function (point, isInline) {                                                                      // 1373\n      // find splitRoot, container                                                                                     // 1374\n      //  - inline: splitRoot is a child of paragraph                                                                  // 1375\n      //  - block: splitRoot is a child of bodyContainer                                                               // 1376\n      var pred = isInline ? isPara : isBodyContainer;                                                                  // 1377\n      var ancestors = listAncestor(point.node, pred);                                                                  // 1378\n      var topAncestor = list.last(ancestors) || point.node;                                                            // 1379\n                                                                                                                       // 1380\n      var splitRoot, container;                                                                                        // 1381\n      if (pred(topAncestor)) {                                                                                         // 1382\n        splitRoot = ancestors[ancestors.length - 2];                                                                   // 1383\n        container = topAncestor;                                                                                       // 1384\n      } else {                                                                                                         // 1385\n        splitRoot = topAncestor;                                                                                       // 1386\n        container = splitRoot.parentNode;                                                                              // 1387\n      }                                                                                                                // 1388\n                                                                                                                       // 1389\n      // if splitRoot is exists, split with splitTree                                                                  // 1390\n      var pivot = splitRoot && splitTree(splitRoot, point, {                                                           // 1391\n        isSkipPaddingBlankHTML: isInline,                                                                              // 1392\n        isNotSplitEdgePoint: isInline                                                                                  // 1393\n      });                                                                                                              // 1394\n                                                                                                                       // 1395\n      // if container is point.node, find pivot with point.offset                                                      // 1396\n      if (!pivot && container === point.node) {                                                                        // 1397\n        pivot = point.node.childNodes[point.offset];                                                                   // 1398\n      }                                                                                                                // 1399\n                                                                                                                       // 1400\n      return {                                                                                                         // 1401\n        rightNode: pivot,                                                                                              // 1402\n        container: container                                                                                           // 1403\n      };                                                                                                               // 1404\n    };                                                                                                                 // 1405\n                                                                                                                       // 1406\n    var create = function (nodeName) {                                                                                 // 1407\n      return document.createElement(nodeName);                                                                         // 1408\n    };                                                                                                                 // 1409\n                                                                                                                       // 1410\n    var createText = function (text) {                                                                                 // 1411\n      return document.createTextNode(text);                                                                            // 1412\n    };                                                                                                                 // 1413\n                                                                                                                       // 1414\n    /**                                                                                                                // 1415\n     * @method remove                                                                                                  // 1416\n     *                                                                                                                 // 1417\n     * remove node, (isRemoveChild: remove child or not)                                                               // 1418\n     *                                                                                                                 // 1419\n     * @param {Node} node                                                                                              // 1420\n     * @param {Boolean} isRemoveChild                                                                                  // 1421\n     */                                                                                                                // 1422\n    var remove = function (node, isRemoveChild) {                                                                      // 1423\n      if (!node || !node.parentNode) { return; }                                                                       // 1424\n      if (node.removeNode) { return node.removeNode(isRemoveChild); }                                                  // 1425\n                                                                                                                       // 1426\n      var parent = node.parentNode;                                                                                    // 1427\n      if (!isRemoveChild) {                                                                                            // 1428\n        var nodes = [];                                                                                                // 1429\n        var i, len;                                                                                                    // 1430\n        for (i = 0, len = node.childNodes.length; i < len; i++) {                                                      // 1431\n          nodes.push(node.childNodes[i]);                                                                              // 1432\n        }                                                                                                              // 1433\n                                                                                                                       // 1434\n        for (i = 0, len = nodes.length; i < len; i++) {                                                                // 1435\n          parent.insertBefore(nodes[i], node);                                                                         // 1436\n        }                                                                                                              // 1437\n      }                                                                                                                // 1438\n                                                                                                                       // 1439\n      parent.removeChild(node);                                                                                        // 1440\n    };                                                                                                                 // 1441\n                                                                                                                       // 1442\n    /**                                                                                                                // 1443\n     * @method removeWhile                                                                                             // 1444\n     *                                                                                                                 // 1445\n     * @param {Node} node                                                                                              // 1446\n     * @param {Function} pred                                                                                          // 1447\n     */                                                                                                                // 1448\n    var removeWhile = function (node, pred) {                                                                          // 1449\n      while (node) {                                                                                                   // 1450\n        if (isEditable(node) || !pred(node)) {                                                                         // 1451\n          break;                                                                                                       // 1452\n        }                                                                                                              // 1453\n                                                                                                                       // 1454\n        var parent = node.parentNode;                                                                                  // 1455\n        remove(node);                                                                                                  // 1456\n        node = parent;                                                                                                 // 1457\n      }                                                                                                                // 1458\n    };                                                                                                                 // 1459\n                                                                                                                       // 1460\n    /**                                                                                                                // 1461\n     * @method replace                                                                                                 // 1462\n     *                                                                                                                 // 1463\n     * replace node with provided nodeName                                                                             // 1464\n     *                                                                                                                 // 1465\n     * @param {Node} node                                                                                              // 1466\n     * @param {String} nodeName                                                                                        // 1467\n     * @return {Node} - new node                                                                                       // 1468\n     */                                                                                                                // 1469\n    var replace = function (node, nodeName) {                                                                          // 1470\n      if (node.nodeName.toUpperCase() === nodeName.toUpperCase()) {                                                    // 1471\n        return node;                                                                                                   // 1472\n      }                                                                                                                // 1473\n                                                                                                                       // 1474\n      var newNode = create(nodeName);                                                                                  // 1475\n                                                                                                                       // 1476\n      if (node.style.cssText) {                                                                                        // 1477\n        newNode.style.cssText = node.style.cssText;                                                                    // 1478\n      }                                                                                                                // 1479\n                                                                                                                       // 1480\n      appendChildNodes(newNode, list.from(node.childNodes));                                                           // 1481\n      insertAfter(newNode, node);                                                                                      // 1482\n      remove(node);                                                                                                    // 1483\n                                                                                                                       // 1484\n      return newNode;                                                                                                  // 1485\n    };                                                                                                                 // 1486\n                                                                                                                       // 1487\n    var isTextarea = makePredByNodeName('TEXTAREA');                                                                   // 1488\n                                                                                                                       // 1489\n    /**                                                                                                                // 1490\n     * @param {jQuery} $node                                                                                           // 1491\n     * @param {Boolean} [stripLinebreaks] - default: false                                                             // 1492\n     */                                                                                                                // 1493\n    var value = function ($node, stripLinebreaks) {                                                                    // 1494\n      var val = isTextarea($node[0]) ? $node.val() : $node.html();                                                     // 1495\n      if (stripLinebreaks) {                                                                                           // 1496\n        return val.replace(/[\\n\\r]/g, '');                                                                             // 1497\n      }                                                                                                                // 1498\n      return val;                                                                                                      // 1499\n    };                                                                                                                 // 1500\n                                                                                                                       // 1501\n    /**                                                                                                                // 1502\n     * @method html                                                                                                    // 1503\n     *                                                                                                                 // 1504\n     * get the HTML contents of node                                                                                   // 1505\n     *                                                                                                                 // 1506\n     * @param {jQuery} $node                                                                                           // 1507\n     * @param {Boolean} [isNewlineOnBlock]                                                                             // 1508\n     */                                                                                                                // 1509\n    var html = function ($node, isNewlineOnBlock) {                                                                    // 1510\n      var markup = value($node);                                                                                       // 1511\n                                                                                                                       // 1512\n      if (isNewlineOnBlock) {                                                                                          // 1513\n        var regexTag = /<(\\/?)(\\b(?!!)[^>\\s]*)(.*?)(\\s*\\/?>)/g;                                                        // 1514\n        markup = markup.replace(regexTag, function (match, endSlash, name) {                                           // 1515\n          name = name.toUpperCase();                                                                                   // 1516\n          var isEndOfInlineContainer = /^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(name) &&                                     // 1517\n                                       !!endSlash;                                                                     // 1518\n          var isBlockNode = /^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(name);                                    // 1519\n                                                                                                                       // 1520\n          return match + ((isEndOfInlineContainer || isBlockNode) ? '\\n' : '');                                        // 1521\n        });                                                                                                            // 1522\n        markup = $.trim(markup);                                                                                       // 1523\n      }                                                                                                                // 1524\n                                                                                                                       // 1525\n      return markup;                                                                                                   // 1526\n    };                                                                                                                 // 1527\n                                                                                                                       // 1528\n    return {                                                                                                           // 1529\n      /** @property {String} NBSP_CHAR */                                                                              // 1530\n      NBSP_CHAR: NBSP_CHAR,                                                                                            // 1531\n      /** @property {String} ZERO_WIDTH_NBSP_CHAR */                                                                   // 1532\n      ZERO_WIDTH_NBSP_CHAR: ZERO_WIDTH_NBSP_CHAR,                                                                      // 1533\n      /** @property {String} blank */                                                                                  // 1534\n      blank: blankHTML,                                                                                                // 1535\n      /** @property {String} emptyPara */                                                                              // 1536\n      emptyPara: '<p>' + blankHTML + '</p>',                                                                           // 1537\n      makePredByNodeName: makePredByNodeName,                                                                          // 1538\n      isEditable: isEditable,                                                                                          // 1539\n      isControlSizing: isControlSizing,                                                                                // 1540\n      buildLayoutInfo: buildLayoutInfo,                                                                                // 1541\n      makeLayoutInfo: makeLayoutInfo,                                                                                  // 1542\n      isText: isText,                                                                                                  // 1543\n      isVoid: isVoid,                                                                                                  // 1544\n      isPara: isPara,                                                                                                  // 1545\n      isPurePara: isPurePara,                                                                                          // 1546\n      isInline: isInline,                                                                                              // 1547\n      isBlock: func.not(isInline),                                                                                     // 1548\n      isBodyInline: isBodyInline,                                                                                      // 1549\n      isBody: isBody,                                                                                                  // 1550\n      isParaInline: isParaInline,                                                                                      // 1551\n      isList: isList,                                                                                                  // 1552\n      isTable: isTable,                                                                                                // 1553\n      isCell: isCell,                                                                                                  // 1554\n      isBlockquote: isBlockquote,                                                                                      // 1555\n      isBodyContainer: isBodyContainer,                                                                                // 1556\n      isAnchor: isAnchor,                                                                                              // 1557\n      isDiv: makePredByNodeName('DIV'),                                                                                // 1558\n      isLi: isLi,                                                                                                      // 1559\n      isBR: makePredByNodeName('BR'),                                                                                  // 1560\n      isSpan: makePredByNodeName('SPAN'),                                                                              // 1561\n      isB: makePredByNodeName('B'),                                                                                    // 1562\n      isU: makePredByNodeName('U'),                                                                                    // 1563\n      isS: makePredByNodeName('S'),                                                                                    // 1564\n      isI: makePredByNodeName('I'),                                                                                    // 1565\n      isImg: makePredByNodeName('IMG'),                                                                                // 1566\n      isTextarea: isTextarea,                                                                                          // 1567\n      isEmpty: isEmpty,                                                                                                // 1568\n      isEmptyAnchor: func.and(isAnchor, isEmpty),                                                                      // 1569\n      isClosestSibling: isClosestSibling,                                                                              // 1570\n      withClosestSiblings: withClosestSiblings,                                                                        // 1571\n      nodeLength: nodeLength,                                                                                          // 1572\n      isLeftEdgePoint: isLeftEdgePoint,                                                                                // 1573\n      isRightEdgePoint: isRightEdgePoint,                                                                              // 1574\n      isEdgePoint: isEdgePoint,                                                                                        // 1575\n      isLeftEdgeOf: isLeftEdgeOf,                                                                                      // 1576\n      isRightEdgeOf: isRightEdgeOf,                                                                                    // 1577\n      isLeftEdgePointOf: isLeftEdgePointOf,                                                                            // 1578\n      isRightEdgePointOf: isRightEdgePointOf,                                                                          // 1579\n      prevPoint: prevPoint,                                                                                            // 1580\n      nextPoint: nextPoint,                                                                                            // 1581\n      isSamePoint: isSamePoint,                                                                                        // 1582\n      isVisiblePoint: isVisiblePoint,                                                                                  // 1583\n      prevPointUntil: prevPointUntil,                                                                                  // 1584\n      nextPointUntil: nextPointUntil,                                                                                  // 1585\n      isCharPoint: isCharPoint,                                                                                        // 1586\n      walkPoint: walkPoint,                                                                                            // 1587\n      ancestor: ancestor,                                                                                              // 1588\n      singleChildAncestor: singleChildAncestor,                                                                        // 1589\n      listAncestor: listAncestor,                                                                                      // 1590\n      lastAncestor: lastAncestor,                                                                                      // 1591\n      listNext: listNext,                                                                                              // 1592\n      listPrev: listPrev,                                                                                              // 1593\n      listDescendant: listDescendant,                                                                                  // 1594\n      commonAncestor: commonAncestor,                                                                                  // 1595\n      wrap: wrap,                                                                                                      // 1596\n      insertAfter: insertAfter,                                                                                        // 1597\n      appendChildNodes: appendChildNodes,                                                                              // 1598\n      position: position,                                                                                              // 1599\n      hasChildren: hasChildren,                                                                                        // 1600\n      makeOffsetPath: makeOffsetPath,                                                                                  // 1601\n      fromOffsetPath: fromOffsetPath,                                                                                  // 1602\n      splitTree: splitTree,                                                                                            // 1603\n      splitPoint: splitPoint,                                                                                          // 1604\n      create: create,                                                                                                  // 1605\n      createText: createText,                                                                                          // 1606\n      remove: remove,                                                                                                  // 1607\n      removeWhile: removeWhile,                                                                                        // 1608\n      replace: replace,                                                                                                // 1609\n      html: html,                                                                                                      // 1610\n      value: value                                                                                                     // 1611\n    };                                                                                                                 // 1612\n  })();                                                                                                                // 1613\n                                                                                                                       // 1614\n                                                                                                                       // 1615\n  var range = (function () {                                                                                           // 1616\n                                                                                                                       // 1617\n    /**                                                                                                                // 1618\n     * return boundaryPoint from TextRange, inspired by Andy Na's HuskyRange.js                                        // 1619\n     *                                                                                                                 // 1620\n     * @param {TextRange} textRange                                                                                    // 1621\n     * @param {Boolean} isStart                                                                                        // 1622\n     * @return {BoundaryPoint}                                                                                         // 1623\n     *                                                                                                                 // 1624\n     * @see http://msdn.microsoft.com/en-us/library/ie/ms535872(v=vs.85).aspx                                          // 1625\n     */                                                                                                                // 1626\n    var textRangeToPoint = function (textRange, isStart) {                                                             // 1627\n      var container = textRange.parentElement(), offset;                                                               // 1628\n                                                                                                                       // 1629\n      var tester = document.body.createTextRange(), prevContainer;                                                     // 1630\n      var childNodes = list.from(container.childNodes);                                                                // 1631\n      for (offset = 0; offset < childNodes.length; offset++) {                                                         // 1632\n        if (dom.isText(childNodes[offset])) {                                                                          // 1633\n          continue;                                                                                                    // 1634\n        }                                                                                                              // 1635\n        tester.moveToElementText(childNodes[offset]);                                                                  // 1636\n        if (tester.compareEndPoints('StartToStart', textRange) >= 0) {                                                 // 1637\n          break;                                                                                                       // 1638\n        }                                                                                                              // 1639\n        prevContainer = childNodes[offset];                                                                            // 1640\n      }                                                                                                                // 1641\n                                                                                                                       // 1642\n      if (offset !== 0 && dom.isText(childNodes[offset - 1])) {                                                        // 1643\n        var textRangeStart = document.body.createTextRange(), curTextNode = null;                                      // 1644\n        textRangeStart.moveToElementText(prevContainer || container);                                                  // 1645\n        textRangeStart.collapse(!prevContainer);                                                                       // 1646\n        curTextNode = prevContainer ? prevContainer.nextSibling : container.firstChild;                                // 1647\n                                                                                                                       // 1648\n        var pointTester = textRange.duplicate();                                                                       // 1649\n        pointTester.setEndPoint('StartToStart', textRangeStart);                                                       // 1650\n        var textCount = pointTester.text.replace(/[\\r\\n]/g, '').length;                                                // 1651\n                                                                                                                       // 1652\n        while (textCount > curTextNode.nodeValue.length && curTextNode.nextSibling) {                                  // 1653\n          textCount -= curTextNode.nodeValue.length;                                                                   // 1654\n          curTextNode = curTextNode.nextSibling;                                                                       // 1655\n        }                                                                                                              // 1656\n                                                                                                                       // 1657\n        /* jshint ignore:start */                                                                                      // 1658\n        var dummy = curTextNode.nodeValue; // enforce IE to re-reference curTextNode, hack                             // 1659\n        /* jshint ignore:end */                                                                                        // 1660\n                                                                                                                       // 1661\n        if (isStart && curTextNode.nextSibling && dom.isText(curTextNode.nextSibling) &&                               // 1662\n            textCount === curTextNode.nodeValue.length) {                                                              // 1663\n          textCount -= curTextNode.nodeValue.length;                                                                   // 1664\n          curTextNode = curTextNode.nextSibling;                                                                       // 1665\n        }                                                                                                              // 1666\n                                                                                                                       // 1667\n        container = curTextNode;                                                                                       // 1668\n        offset = textCount;                                                                                            // 1669\n      }                                                                                                                // 1670\n                                                                                                                       // 1671\n      return {                                                                                                         // 1672\n        cont: container,                                                                                               // 1673\n        offset: offset                                                                                                 // 1674\n      };                                                                                                               // 1675\n    };                                                                                                                 // 1676\n                                                                                                                       // 1677\n    /**                                                                                                                // 1678\n     * return TextRange from boundary point (inspired by google closure-library)                                       // 1679\n     * @param {BoundaryPoint} point                                                                                    // 1680\n     * @return {TextRange}                                                                                             // 1681\n     */                                                                                                                // 1682\n    var pointToTextRange = function (point) {                                                                          // 1683\n      var textRangeInfo = function (container, offset) {                                                               // 1684\n        var node, isCollapseToStart;                                                                                   // 1685\n                                                                                                                       // 1686\n        if (dom.isText(container)) {                                                                                   // 1687\n          var prevTextNodes = dom.listPrev(container, func.not(dom.isText));                                           // 1688\n          var prevContainer = list.last(prevTextNodes).previousSibling;                                                // 1689\n          node =  prevContainer || container.parentNode;                                                               // 1690\n          offset += list.sum(list.tail(prevTextNodes), dom.nodeLength);                                                // 1691\n          isCollapseToStart = !prevContainer;                                                                          // 1692\n        } else {                                                                                                       // 1693\n          node = container.childNodes[offset] || container;                                                            // 1694\n          if (dom.isText(node)) {                                                                                      // 1695\n            return textRangeInfo(node, 0);                                                                             // 1696\n          }                                                                                                            // 1697\n                                                                                                                       // 1698\n          offset = 0;                                                                                                  // 1699\n          isCollapseToStart = false;                                                                                   // 1700\n        }                                                                                                              // 1701\n                                                                                                                       // 1702\n        return {                                                                                                       // 1703\n          node: node,                                                                                                  // 1704\n          collapseToStart: isCollapseToStart,                                                                          // 1705\n          offset: offset                                                                                               // 1706\n        };                                                                                                             // 1707\n      };                                                                                                               // 1708\n                                                                                                                       // 1709\n      var textRange = document.body.createTextRange();                                                                 // 1710\n      var info = textRangeInfo(point.node, point.offset);                                                              // 1711\n                                                                                                                       // 1712\n      textRange.moveToElementText(info.node);                                                                          // 1713\n      textRange.collapse(info.collapseToStart);                                                                        // 1714\n      textRange.moveStart('character', info.offset);                                                                   // 1715\n      return textRange;                                                                                                // 1716\n    };                                                                                                                 // 1717\n                                                                                                                       // 1718\n    /**                                                                                                                // 1719\n     * Wrapped Range                                                                                                   // 1720\n     *                                                                                                                 // 1721\n     * @constructor                                                                                                    // 1722\n     * @param {Node} sc - start container                                                                              // 1723\n     * @param {Number} so - start offset                                                                               // 1724\n     * @param {Node} ec - end container                                                                                // 1725\n     * @param {Number} eo - end offset                                                                                 // 1726\n     */                                                                                                                // 1727\n    var WrappedRange = function (sc, so, ec, eo) {                                                                     // 1728\n      this.sc = sc;                                                                                                    // 1729\n      this.so = so;                                                                                                    // 1730\n      this.ec = ec;                                                                                                    // 1731\n      this.eo = eo;                                                                                                    // 1732\n                                                                                                                       // 1733\n      // nativeRange: get nativeRange from sc, so, ec, eo                                                              // 1734\n      var nativeRange = function () {                                                                                  // 1735\n        if (agent.isW3CRangeSupport) {                                                                                 // 1736\n          var w3cRange = document.createRange();                                                                       // 1737\n          w3cRange.setStart(sc, so);                                                                                   // 1738\n          w3cRange.setEnd(ec, eo);                                                                                     // 1739\n                                                                                                                       // 1740\n          return w3cRange;                                                                                             // 1741\n        } else {                                                                                                       // 1742\n          var textRange = pointToTextRange({                                                                           // 1743\n            node: sc,                                                                                                  // 1744\n            offset: so                                                                                                 // 1745\n          });                                                                                                          // 1746\n                                                                                                                       // 1747\n          textRange.setEndPoint('EndToEnd', pointToTextRange({                                                         // 1748\n            node: ec,                                                                                                  // 1749\n            offset: eo                                                                                                 // 1750\n          }));                                                                                                         // 1751\n                                                                                                                       // 1752\n          return textRange;                                                                                            // 1753\n        }                                                                                                              // 1754\n      };                                                                                                               // 1755\n                                                                                                                       // 1756\n      this.getPoints = function () {                                                                                   // 1757\n        return {                                                                                                       // 1758\n          sc: sc,                                                                                                      // 1759\n          so: so,                                                                                                      // 1760\n          ec: ec,                                                                                                      // 1761\n          eo: eo                                                                                                       // 1762\n        };                                                                                                             // 1763\n      };                                                                                                               // 1764\n                                                                                                                       // 1765\n      this.getStartPoint = function () {                                                                               // 1766\n        return {                                                                                                       // 1767\n          node: sc,                                                                                                    // 1768\n          offset: so                                                                                                   // 1769\n        };                                                                                                             // 1770\n      };                                                                                                               // 1771\n                                                                                                                       // 1772\n      this.getEndPoint = function () {                                                                                 // 1773\n        return {                                                                                                       // 1774\n          node: ec,                                                                                                    // 1775\n          offset: eo                                                                                                   // 1776\n        };                                                                                                             // 1777\n      };                                                                                                               // 1778\n                                                                                                                       // 1779\n      /**                                                                                                              // 1780\n       * select update visible range                                                                                   // 1781\n       */                                                                                                              // 1782\n      this.select = function () {                                                                                      // 1783\n        var nativeRng = nativeRange();                                                                                 // 1784\n        if (agent.isW3CRangeSupport) {                                                                                 // 1785\n          var selection = document.getSelection();                                                                     // 1786\n          if (selection.rangeCount > 0) {                                                                              // 1787\n            selection.removeAllRanges();                                                                               // 1788\n          }                                                                                                            // 1789\n          selection.addRange(nativeRng);                                                                               // 1790\n        } else {                                                                                                       // 1791\n          nativeRng.select();                                                                                          // 1792\n        }                                                                                                              // 1793\n                                                                                                                       // 1794\n        return this;                                                                                                   // 1795\n      };                                                                                                               // 1796\n                                                                                                                       // 1797\n      /**                                                                                                              // 1798\n       * @return {WrappedRange}                                                                                        // 1799\n       */                                                                                                              // 1800\n      this.normalize = function () {                                                                                   // 1801\n                                                                                                                       // 1802\n        /**                                                                                                            // 1803\n         * @param {BoundaryPoint} point                                                                                // 1804\n         * @param {Boolean} isLeftToRight                                                                              // 1805\n         * @return {BoundaryPoint}                                                                                     // 1806\n         */                                                                                                            // 1807\n        var getVisiblePoint = function (point, isLeftToRight) {                                                        // 1808\n          if ((dom.isVisiblePoint(point) && !dom.isEdgePoint(point)) ||                                                // 1809\n              (dom.isVisiblePoint(point) && dom.isRightEdgePoint(point) && !isLeftToRight) ||                          // 1810\n              (dom.isVisiblePoint(point) && dom.isLeftEdgePoint(point) && isLeftToRight) ||                            // 1811\n              (dom.isVisiblePoint(point) && dom.isBlock(point.node) && dom.isEmpty(point.node))) {                     // 1812\n            return point;                                                                                              // 1813\n          }                                                                                                            // 1814\n                                                                                                                       // 1815\n          // point on block's edge                                                                                     // 1816\n          var block = dom.ancestor(point.node, dom.isBlock);                                                           // 1817\n          if (((dom.isLeftEdgePointOf(point, block) || dom.isVoid(dom.prevPoint(point).node)) && !isLeftToRight) ||    // 1818\n              ((dom.isRightEdgePointOf(point, block) || dom.isVoid(dom.nextPoint(point).node)) && isLeftToRight)) {    // 1819\n                                                                                                                       // 1820\n            // returns point already on visible point                                                                  // 1821\n            if (dom.isVisiblePoint(point)) {                                                                           // 1822\n              return point;                                                                                            // 1823\n            }                                                                                                          // 1824\n            // reverse direction                                                                                       // 1825\n            isLeftToRight = !isLeftToRight;                                                                            // 1826\n          }                                                                                                            // 1827\n                                                                                                                       // 1828\n          var nextPoint = isLeftToRight ? dom.nextPointUntil(dom.nextPoint(point), dom.isVisiblePoint) :               // 1829\n                                          dom.prevPointUntil(dom.prevPoint(point), dom.isVisiblePoint);                // 1830\n          return nextPoint || point;                                                                                   // 1831\n        };                                                                                                             // 1832\n                                                                                                                       // 1833\n        var endPoint = getVisiblePoint(this.getEndPoint(), false);                                                     // 1834\n        var startPoint = this.isCollapsed() ? endPoint : getVisiblePoint(this.getStartPoint(), true);                  // 1835\n                                                                                                                       // 1836\n        return new WrappedRange(                                                                                       // 1837\n          startPoint.node,                                                                                             // 1838\n          startPoint.offset,                                                                                           // 1839\n          endPoint.node,                                                                                               // 1840\n          endPoint.offset                                                                                              // 1841\n        );                                                                                                             // 1842\n      };                                                                                                               // 1843\n                                                                                                                       // 1844\n      /**                                                                                                              // 1845\n       * returns matched nodes on range                                                                                // 1846\n       *                                                                                                               // 1847\n       * @param {Function} [pred] - predicate function                                                                 // 1848\n       * @param {Object} [options]                                                                                     // 1849\n       * @param {Boolean} [options.includeAncestor]                                                                    // 1850\n       * @param {Boolean} [options.fullyContains]                                                                      // 1851\n       * @return {Node[]}                                                                                              // 1852\n       */                                                                                                              // 1853\n      this.nodes = function (pred, options) {                                                                          // 1854\n        pred = pred || func.ok;                                                                                        // 1855\n                                                                                                                       // 1856\n        var includeAncestor = options && options.includeAncestor;                                                      // 1857\n        var fullyContains = options && options.fullyContains;                                                          // 1858\n                                                                                                                       // 1859\n        // TODO compare points and sort                                                                                // 1860\n        var startPoint = this.getStartPoint();                                                                         // 1861\n        var endPoint = this.getEndPoint();                                                                             // 1862\n                                                                                                                       // 1863\n        var nodes = [];                                                                                                // 1864\n        var leftEdgeNodes = [];                                                                                        // 1865\n                                                                                                                       // 1866\n        dom.walkPoint(startPoint, endPoint, function (point) {                                                         // 1867\n          if (dom.isEditable(point.node)) {                                                                            // 1868\n            return;                                                                                                    // 1869\n          }                                                                                                            // 1870\n                                                                                                                       // 1871\n          var node;                                                                                                    // 1872\n          if (fullyContains) {                                                                                         // 1873\n            if (dom.isLeftEdgePoint(point)) {                                                                          // 1874\n              leftEdgeNodes.push(point.node);                                                                          // 1875\n            }                                                                                                          // 1876\n            if (dom.isRightEdgePoint(point) && list.contains(leftEdgeNodes, point.node)) {                             // 1877\n              node = point.node;                                                                                       // 1878\n            }                                                                                                          // 1879\n          } else if (includeAncestor) {                                                                                // 1880\n            node = dom.ancestor(point.node, pred);                                                                     // 1881\n          } else {                                                                                                     // 1882\n            node = point.node;                                                                                         // 1883\n          }                                                                                                            // 1884\n                                                                                                                       // 1885\n          if (node && pred(node)) {                                                                                    // 1886\n            nodes.push(node);                                                                                          // 1887\n          }                                                                                                            // 1888\n        }, true);                                                                                                      // 1889\n                                                                                                                       // 1890\n        return list.unique(nodes);                                                                                     // 1891\n      };                                                                                                               // 1892\n                                                                                                                       // 1893\n      /**                                                                                                              // 1894\n       * returns commonAncestor of range                                                                               // 1895\n       * @return {Element} - commonAncestor                                                                            // 1896\n       */                                                                                                              // 1897\n      this.commonAncestor = function () {                                                                              // 1898\n        return dom.commonAncestor(sc, ec);                                                                             // 1899\n      };                                                                                                               // 1900\n                                                                                                                       // 1901\n      /**                                                                                                              // 1902\n       * returns expanded range by pred                                                                                // 1903\n       *                                                                                                               // 1904\n       * @param {Function} pred - predicate function                                                                   // 1905\n       * @return {WrappedRange}                                                                                        // 1906\n       */                                                                                                              // 1907\n      this.expand = function (pred) {                                                                                  // 1908\n        var startAncestor = dom.ancestor(sc, pred);                                                                    // 1909\n        var endAncestor = dom.ancestor(ec, pred);                                                                      // 1910\n                                                                                                                       // 1911\n        if (!startAncestor && !endAncestor) {                                                                          // 1912\n          return new WrappedRange(sc, so, ec, eo);                                                                     // 1913\n        }                                                                                                              // 1914\n                                                                                                                       // 1915\n        var boundaryPoints = this.getPoints();                                                                         // 1916\n                                                                                                                       // 1917\n        if (startAncestor) {                                                                                           // 1918\n          boundaryPoints.sc = startAncestor;                                                                           // 1919\n          boundaryPoints.so = 0;                                                                                       // 1920\n        }                                                                                                              // 1921\n                                                                                                                       // 1922\n        if (endAncestor) {                                                                                             // 1923\n          boundaryPoints.ec = endAncestor;                                                                             // 1924\n          boundaryPoints.eo = dom.nodeLength(endAncestor);                                                             // 1925\n        }                                                                                                              // 1926\n                                                                                                                       // 1927\n        return new WrappedRange(                                                                                       // 1928\n          boundaryPoints.sc,                                                                                           // 1929\n          boundaryPoints.so,                                                                                           // 1930\n          boundaryPoints.ec,                                                                                           // 1931\n          boundaryPoints.eo                                                                                            // 1932\n        );                                                                                                             // 1933\n      };                                                                                                               // 1934\n                                                                                                                       // 1935\n      /**                                                                                                              // 1936\n       * @param {Boolean} isCollapseToStart                                                                            // 1937\n       * @return {WrappedRange}                                                                                        // 1938\n       */                                                                                                              // 1939\n      this.collapse = function (isCollapseToStart) {                                                                   // 1940\n        if (isCollapseToStart) {                                                                                       // 1941\n          return new WrappedRange(sc, so, sc, so);                                                                     // 1942\n        } else {                                                                                                       // 1943\n          return new WrappedRange(ec, eo, ec, eo);                                                                     // 1944\n        }                                                                                                              // 1945\n      };                                                                                                               // 1946\n                                                                                                                       // 1947\n      /**                                                                                                              // 1948\n       * splitText on range                                                                                            // 1949\n       */                                                                                                              // 1950\n      this.splitText = function () {                                                                                   // 1951\n        var isSameContainer = sc === ec;                                                                               // 1952\n        var boundaryPoints = this.getPoints();                                                                         // 1953\n                                                                                                                       // 1954\n        if (dom.isText(ec) && !dom.isEdgePoint(this.getEndPoint())) {                                                  // 1955\n          ec.splitText(eo);                                                                                            // 1956\n        }                                                                                                              // 1957\n                                                                                                                       // 1958\n        if (dom.isText(sc) && !dom.isEdgePoint(this.getStartPoint())) {                                                // 1959\n          boundaryPoints.sc = sc.splitText(so);                                                                        // 1960\n          boundaryPoints.so = 0;                                                                                       // 1961\n                                                                                                                       // 1962\n          if (isSameContainer) {                                                                                       // 1963\n            boundaryPoints.ec = boundaryPoints.sc;                                                                     // 1964\n            boundaryPoints.eo = eo - so;                                                                               // 1965\n          }                                                                                                            // 1966\n        }                                                                                                              // 1967\n                                                                                                                       // 1968\n        return new WrappedRange(                                                                                       // 1969\n          boundaryPoints.sc,                                                                                           // 1970\n          boundaryPoints.so,                                                                                           // 1971\n          boundaryPoints.ec,                                                                                           // 1972\n          boundaryPoints.eo                                                                                            // 1973\n        );                                                                                                             // 1974\n      };                                                                                                               // 1975\n                                                                                                                       // 1976\n      /**                                                                                                              // 1977\n       * delete contents on range                                                                                      // 1978\n       * @return {WrappedRange}                                                                                        // 1979\n       */                                                                                                              // 1980\n      this.deleteContents = function () {                                                                              // 1981\n        if (this.isCollapsed()) {                                                                                      // 1982\n          return this;                                                                                                 // 1983\n        }                                                                                                              // 1984\n                                                                                                                       // 1985\n        var rng = this.splitText();                                                                                    // 1986\n        var nodes = rng.nodes(null, {                                                                                  // 1987\n          fullyContains: true                                                                                          // 1988\n        });                                                                                                            // 1989\n                                                                                                                       // 1990\n        // find new cursor point                                                                                       // 1991\n        var point = dom.prevPointUntil(rng.getStartPoint(), function (point) {                                         // 1992\n          return !list.contains(nodes, point.node);                                                                    // 1993\n        });                                                                                                            // 1994\n                                                                                                                       // 1995\n        var emptyParents = [];                                                                                         // 1996\n        $.each(nodes, function (idx, node) {                                                                           // 1997\n          // find empty parents                                                                                        // 1998\n          var parent = node.parentNode;                                                                                // 1999\n          if (point.node !== parent && dom.nodeLength(parent) === 1) {                                                 // 2000\n            emptyParents.push(parent);                                                                                 // 2001\n          }                                                                                                            // 2002\n          dom.remove(node, false);                                                                                     // 2003\n        });                                                                                                            // 2004\n                                                                                                                       // 2005\n        // remove empty parents                                                                                        // 2006\n        $.each(emptyParents, function (idx, node) {                                                                    // 2007\n          dom.remove(node, false);                                                                                     // 2008\n        });                                                                                                            // 2009\n                                                                                                                       // 2010\n        return new WrappedRange(                                                                                       // 2011\n          point.node,                                                                                                  // 2012\n          point.offset,                                                                                                // 2013\n          point.node,                                                                                                  // 2014\n          point.offset                                                                                                 // 2015\n        ).normalize();                                                                                                 // 2016\n      };                                                                                                               // 2017\n                                                                                                                       // 2018\n      /**                                                                                                              // 2019\n       * makeIsOn: return isOn(pred) function                                                                          // 2020\n       */                                                                                                              // 2021\n      var makeIsOn = function (pred) {                                                                                 // 2022\n        return function () {                                                                                           // 2023\n          var ancestor = dom.ancestor(sc, pred);                                                                       // 2024\n          return !!ancestor && (ancestor === dom.ancestor(ec, pred));                                                  // 2025\n        };                                                                                                             // 2026\n      };                                                                                                               // 2027\n                                                                                                                       // 2028\n      // isOnEditable: judge whether range is on editable or not                                                       // 2029\n      this.isOnEditable = makeIsOn(dom.isEditable);                                                                    // 2030\n      // isOnList: judge whether range is on list node or not                                                          // 2031\n      this.isOnList = makeIsOn(dom.isList);                                                                            // 2032\n      // isOnAnchor: judge whether range is on anchor node or not                                                      // 2033\n      this.isOnAnchor = makeIsOn(dom.isAnchor);                                                                        // 2034\n      // isOnAnchor: judge whether range is on cell node or not                                                        // 2035\n      this.isOnCell = makeIsOn(dom.isCell);                                                                            // 2036\n                                                                                                                       // 2037\n      /**                                                                                                              // 2038\n       * @param {Function} pred                                                                                        // 2039\n       * @return {Boolean}                                                                                             // 2040\n       */                                                                                                              // 2041\n      this.isLeftEdgeOf = function (pred) {                                                                            // 2042\n        if (!dom.isLeftEdgePoint(this.getStartPoint())) {                                                              // 2043\n          return false;                                                                                                // 2044\n        }                                                                                                              // 2045\n                                                                                                                       // 2046\n        var node = dom.ancestor(this.sc, pred);                                                                        // 2047\n        return node && dom.isLeftEdgeOf(this.sc, node);                                                                // 2048\n      };                                                                                                               // 2049\n                                                                                                                       // 2050\n      /**                                                                                                              // 2051\n       * returns whether range was collapsed or not                                                                    // 2052\n       */                                                                                                              // 2053\n      this.isCollapsed = function () {                                                                                 // 2054\n        return sc === ec && so === eo;                                                                                 // 2055\n      };                                                                                                               // 2056\n                                                                                                                       // 2057\n      /**                                                                                                              // 2058\n       * wrap inline nodes which children of body with paragraph                                                       // 2059\n       *                                                                                                               // 2060\n       * @return {WrappedRange}                                                                                        // 2061\n       */                                                                                                              // 2062\n      this.wrapBodyInlineWithPara = function () {                                                                      // 2063\n        if (dom.isBodyContainer(sc) && dom.isEmpty(sc)) {                                                              // 2064\n          sc.innerHTML = dom.emptyPara;                                                                                // 2065\n          return new WrappedRange(sc.firstChild, 0, sc.firstChild, 0);                                                 // 2066\n        }                                                                                                              // 2067\n                                                                                                                       // 2068\n        /**                                                                                                            // 2069\n         * [workaround] firefox often create range on not visible point. so normalize here.                            // 2070\n         *  - firefox: |<p>text</p>|                                                                                   // 2071\n         *  - chrome: <p>|text|</p>                                                                                    // 2072\n         */                                                                                                            // 2073\n        var rng = this.normalize();                                                                                    // 2074\n        if (dom.isParaInline(sc) || dom.isPara(sc)) {                                                                  // 2075\n          return rng;                                                                                                  // 2076\n        }                                                                                                              // 2077\n                                                                                                                       // 2078\n        // find inline top ancestor                                                                                    // 2079\n        var topAncestor;                                                                                               // 2080\n        if (dom.isInline(rng.sc)) {                                                                                    // 2081\n          var ancestors = dom.listAncestor(rng.sc, func.not(dom.isInline));                                            // 2082\n          topAncestor = list.last(ancestors);                                                                          // 2083\n          if (!dom.isInline(topAncestor)) {                                                                            // 2084\n            topAncestor = ancestors[ancestors.length - 2] || rng.sc.childNodes[rng.so];                                // 2085\n          }                                                                                                            // 2086\n        } else {                                                                                                       // 2087\n          topAncestor = rng.sc.childNodes[rng.so > 0 ? rng.so - 1 : 0];                                                // 2088\n        }                                                                                                              // 2089\n                                                                                                                       // 2090\n        // siblings not in paragraph                                                                                   // 2091\n        var inlineSiblings = dom.listPrev(topAncestor, dom.isParaInline).reverse();                                    // 2092\n        inlineSiblings = inlineSiblings.concat(dom.listNext(topAncestor.nextSibling, dom.isParaInline));               // 2093\n                                                                                                                       // 2094\n        // wrap with paragraph                                                                                         // 2095\n        if (inlineSiblings.length) {                                                                                   // 2096\n          var para = dom.wrap(list.head(inlineSiblings), 'p');                                                         // 2097\n          dom.appendChildNodes(para, list.tail(inlineSiblings));                                                       // 2098\n        }                                                                                                              // 2099\n                                                                                                                       // 2100\n        return this.normalize();                                                                                       // 2101\n      };                                                                                                               // 2102\n                                                                                                                       // 2103\n      /**                                                                                                              // 2104\n       * insert node at current cursor                                                                                 // 2105\n       *                                                                                                               // 2106\n       * @param {Node} node                                                                                            // 2107\n       * @return {Node}                                                                                                // 2108\n       */                                                                                                              // 2109\n      this.insertNode = function (node) {                                                                              // 2110\n        var rng = this.wrapBodyInlineWithPara().deleteContents();                                                      // 2111\n        var info = dom.splitPoint(rng.getStartPoint(), dom.isInline(node));                                            // 2112\n                                                                                                                       // 2113\n        if (info.rightNode) {                                                                                          // 2114\n          info.rightNode.parentNode.insertBefore(node, info.rightNode);                                                // 2115\n        } else {                                                                                                       // 2116\n          info.container.appendChild(node);                                                                            // 2117\n        }                                                                                                              // 2118\n                                                                                                                       // 2119\n        return node;                                                                                                   // 2120\n      };                                                                                                               // 2121\n                                                                                                                       // 2122\n      /**                                                                                                              // 2123\n       * insert html at current cursor                                                                                 // 2124\n       */                                                                                                              // 2125\n      this.pasteHTML = function (markup) {                                                                             // 2126\n        var contentsContainer = $('<div></div>').html(markup)[0];                                                      // 2127\n        var childNodes = list.from(contentsContainer.childNodes);                                                      // 2128\n                                                                                                                       // 2129\n        var rng = this.wrapBodyInlineWithPara().deleteContents();                                                      // 2130\n                                                                                                                       // 2131\n        return childNodes.reverse().map(function (childNode) {                                                         // 2132\n          return rng.insertNode(childNode);                                                                            // 2133\n        }).reverse();                                                                                                  // 2134\n      };                                                                                                               // 2135\n                                                                                                                       // 2136\n      /**                                                                                                              // 2137\n       * returns text in range                                                                                         // 2138\n       *                                                                                                               // 2139\n       * @return {String}                                                                                              // 2140\n       */                                                                                                              // 2141\n      this.toString = function () {                                                                                    // 2142\n        var nativeRng = nativeRange();                                                                                 // 2143\n        return agent.isW3CRangeSupport ? nativeRng.toString() : nativeRng.text;                                        // 2144\n      };                                                                                                               // 2145\n                                                                                                                       // 2146\n      /**                                                                                                              // 2147\n       * returns range for word before cursor                                                                          // 2148\n       *                                                                                                               // 2149\n       * @param {Boolean} [findAfter] - find after cursor, default: false                                              // 2150\n       * @return {WrappedRange}                                                                                        // 2151\n       */                                                                                                              // 2152\n      this.getWordRange = function (findAfter) {                                                                       // 2153\n        var endPoint = this.getEndPoint();                                                                             // 2154\n                                                                                                                       // 2155\n        if (!dom.isCharPoint(endPoint)) {                                                                              // 2156\n          return this;                                                                                                 // 2157\n        }                                                                                                              // 2158\n                                                                                                                       // 2159\n        var startPoint = dom.prevPointUntil(endPoint, function (point) {                                               // 2160\n          return !dom.isCharPoint(point);                                                                              // 2161\n        });                                                                                                            // 2162\n                                                                                                                       // 2163\n        if (findAfter) {                                                                                               // 2164\n          endPoint = dom.nextPointUntil(endPoint, function (point) {                                                   // 2165\n            return !dom.isCharPoint(point);                                                                            // 2166\n          });                                                                                                          // 2167\n        }                                                                                                              // 2168\n                                                                                                                       // 2169\n        return new WrappedRange(                                                                                       // 2170\n          startPoint.node,                                                                                             // 2171\n          startPoint.offset,                                                                                           // 2172\n          endPoint.node,                                                                                               // 2173\n          endPoint.offset                                                                                              // 2174\n        );                                                                                                             // 2175\n      };                                                                                                               // 2176\n                                                                                                                       // 2177\n      /**                                                                                                              // 2178\n       * create offsetPath bookmark                                                                                    // 2179\n       *                                                                                                               // 2180\n       * @param {Node} editable                                                                                        // 2181\n       */                                                                                                              // 2182\n      this.bookmark = function (editable) {                                                                            // 2183\n        return {                                                                                                       // 2184\n          s: {                                                                                                         // 2185\n            path: dom.makeOffsetPath(editable, sc),                                                                    // 2186\n            offset: so                                                                                                 // 2187\n          },                                                                                                           // 2188\n          e: {                                                                                                         // 2189\n            path: dom.makeOffsetPath(editable, ec),                                                                    // 2190\n            offset: eo                                                                                                 // 2191\n          }                                                                                                            // 2192\n        };                                                                                                             // 2193\n      };                                                                                                               // 2194\n                                                                                                                       // 2195\n      /**                                                                                                              // 2196\n       * create offsetPath bookmark base on paragraph                                                                  // 2197\n       *                                                                                                               // 2198\n       * @param {Node[]} paras                                                                                         // 2199\n       */                                                                                                              // 2200\n      this.paraBookmark = function (paras) {                                                                           // 2201\n        return {                                                                                                       // 2202\n          s: {                                                                                                         // 2203\n            path: list.tail(dom.makeOffsetPath(list.head(paras), sc)),                                                 // 2204\n            offset: so                                                                                                 // 2205\n          },                                                                                                           // 2206\n          e: {                                                                                                         // 2207\n            path: list.tail(dom.makeOffsetPath(list.last(paras), ec)),                                                 // 2208\n            offset: eo                                                                                                 // 2209\n          }                                                                                                            // 2210\n        };                                                                                                             // 2211\n      };                                                                                                               // 2212\n                                                                                                                       // 2213\n      /**                                                                                                              // 2214\n       * getClientRects                                                                                                // 2215\n       * @return {Rect[]}                                                                                              // 2216\n       */                                                                                                              // 2217\n      this.getClientRects = function () {                                                                              // 2218\n        var nativeRng = nativeRange();                                                                                 // 2219\n        return nativeRng.getClientRects();                                                                             // 2220\n      };                                                                                                               // 2221\n    };                                                                                                                 // 2222\n                                                                                                                       // 2223\n  /**                                                                                                                  // 2224\n   * @class core.range                                                                                                 // 2225\n   *                                                                                                                   // 2226\n   * Data structure                                                                                                    // 2227\n   *  * BoundaryPoint: a point of dom tree                                                                             // 2228\n   *  * BoundaryPoints: two boundaryPoints corresponding to the start and the end of the Range                         // 2229\n   *                                                                                                                   // 2230\n   * See to http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Position                        // 2231\n   *                                                                                                                   // 2232\n   * @singleton                                                                                                        // 2233\n   * @alternateClassName range                                                                                         // 2234\n   */                                                                                                                  // 2235\n    return {                                                                                                           // 2236\n      /**                                                                                                              // 2237\n       * @method                                                                                                       // 2238\n       *                                                                                                               // 2239\n       * create Range Object From arguments or Browser Selection                                                       // 2240\n       *                                                                                                               // 2241\n       * @param {Node} sc - start container                                                                            // 2242\n       * @param {Number} so - start offset                                                                             // 2243\n       * @param {Node} ec - end container                                                                              // 2244\n       * @param {Number} eo - end offset                                                                               // 2245\n       * @return {WrappedRange}                                                                                        // 2246\n       */                                                                                                              // 2247\n      create : function (sc, so, ec, eo) {                                                                             // 2248\n        if (!arguments.length) { // from Browser Selection                                                             // 2249\n          if (agent.isW3CRangeSupport) {                                                                               // 2250\n            var selection = document.getSelection();                                                                   // 2251\n            if (!selection || selection.rangeCount === 0) {                                                            // 2252\n              return null;                                                                                             // 2253\n            } else if (dom.isBody(selection.anchorNode)) {                                                             // 2254\n              // Firefox: returns entire body as range on initialization. We won't never need it.                      // 2255\n              return null;                                                                                             // 2256\n            }                                                                                                          // 2257\n                                                                                                                       // 2258\n            var nativeRng = selection.getRangeAt(0);                                                                   // 2259\n            sc = nativeRng.startContainer;                                                                             // 2260\n            so = nativeRng.startOffset;                                                                                // 2261\n            ec = nativeRng.endContainer;                                                                               // 2262\n            eo = nativeRng.endOffset;                                                                                  // 2263\n          } else { // IE8: TextRange                                                                                   // 2264\n            var textRange = document.selection.createRange();                                                          // 2265\n            var textRangeEnd = textRange.duplicate();                                                                  // 2266\n            textRangeEnd.collapse(false);                                                                              // 2267\n            var textRangeStart = textRange;                                                                            // 2268\n            textRangeStart.collapse(true);                                                                             // 2269\n                                                                                                                       // 2270\n            var startPoint = textRangeToPoint(textRangeStart, true),                                                   // 2271\n            endPoint = textRangeToPoint(textRangeEnd, false);                                                          // 2272\n                                                                                                                       // 2273\n            // same visible point case: range was collapsed.                                                           // 2274\n            if (dom.isText(startPoint.node) && dom.isLeftEdgePoint(startPoint) &&                                      // 2275\n                dom.isTextNode(endPoint.node) && dom.isRightEdgePoint(endPoint) &&                                     // 2276\n                endPoint.node.nextSibling === startPoint.node) {                                                       // 2277\n              startPoint = endPoint;                                                                                   // 2278\n            }                                                                                                          // 2279\n                                                                                                                       // 2280\n            sc = startPoint.cont;                                                                                      // 2281\n            so = startPoint.offset;                                                                                    // 2282\n            ec = endPoint.cont;                                                                                        // 2283\n            eo = endPoint.offset;                                                                                      // 2284\n          }                                                                                                            // 2285\n        } else if (arguments.length === 2) { //collapsed                                                               // 2286\n          ec = sc;                                                                                                     // 2287\n          eo = so;                                                                                                     // 2288\n        }                                                                                                              // 2289\n        return new WrappedRange(sc, so, ec, eo);                                                                       // 2290\n      },                                                                                                               // 2291\n                                                                                                                       // 2292\n      /**                                                                                                              // 2293\n       * @method                                                                                                       // 2294\n       *                                                                                                               // 2295\n       * create WrappedRange from node                                                                                 // 2296\n       *                                                                                                               // 2297\n       * @param {Node} node                                                                                            // 2298\n       * @return {WrappedRange}                                                                                        // 2299\n       */                                                                                                              // 2300\n      createFromNode: function (node) {                                                                                // 2301\n        var sc = node;                                                                                                 // 2302\n        var so = 0;                                                                                                    // 2303\n        var ec = node;                                                                                                 // 2304\n        var eo = dom.nodeLength(ec);                                                                                   // 2305\n                                                                                                                       // 2306\n        // browsers can't target a picture or void node                                                                // 2307\n        if (dom.isVoid(sc)) {                                                                                          // 2308\n          so = dom.listPrev(sc).length - 1;                                                                            // 2309\n          sc = sc.parentNode;                                                                                          // 2310\n        }                                                                                                              // 2311\n        if (dom.isBR(ec)) {                                                                                            // 2312\n          eo = dom.listPrev(ec).length - 1;                                                                            // 2313\n          ec = ec.parentNode;                                                                                          // 2314\n        } else if (dom.isVoid(ec)) {                                                                                   // 2315\n          eo = dom.listPrev(ec).length;                                                                                // 2316\n          ec = ec.parentNode;                                                                                          // 2317\n        }                                                                                                              // 2318\n                                                                                                                       // 2319\n        return this.create(sc, so, ec, eo);                                                                            // 2320\n      },                                                                                                               // 2321\n                                                                                                                       // 2322\n      /**                                                                                                              // 2323\n       * create WrappedRange from node after position                                                                  // 2324\n       *                                                                                                               // 2325\n       * @param {Node} node                                                                                            // 2326\n       * @return {WrappedRange}                                                                                        // 2327\n       */                                                                                                              // 2328\n      createFromNodeBefore: function (node) {                                                                          // 2329\n        return this.createFromNode(node).collapse(true);                                                               // 2330\n      },                                                                                                               // 2331\n                                                                                                                       // 2332\n      /**                                                                                                              // 2333\n       * create WrappedRange from node after position                                                                  // 2334\n       *                                                                                                               // 2335\n       * @param {Node} node                                                                                            // 2336\n       * @return {WrappedRange}                                                                                        // 2337\n       */                                                                                                              // 2338\n      createFromNodeAfter: function (node) {                                                                           // 2339\n        return this.createFromNode(node).collapse();                                                                   // 2340\n      },                                                                                                               // 2341\n                                                                                                                       // 2342\n      /**                                                                                                              // 2343\n       * @method                                                                                                       // 2344\n       *                                                                                                               // 2345\n       * create WrappedRange from bookmark                                                                             // 2346\n       *                                                                                                               // 2347\n       * @param {Node} editable                                                                                        // 2348\n       * @param {Object} bookmark                                                                                      // 2349\n       * @return {WrappedRange}                                                                                        // 2350\n       */                                                                                                              // 2351\n      createFromBookmark : function (editable, bookmark) {                                                             // 2352\n        var sc = dom.fromOffsetPath(editable, bookmark.s.path);                                                        // 2353\n        var so = bookmark.s.offset;                                                                                    // 2354\n        var ec = dom.fromOffsetPath(editable, bookmark.e.path);                                                        // 2355\n        var eo = bookmark.e.offset;                                                                                    // 2356\n        return new WrappedRange(sc, so, ec, eo);                                                                       // 2357\n      },                                                                                                               // 2358\n                                                                                                                       // 2359\n      /**                                                                                                              // 2360\n       * @method                                                                                                       // 2361\n       *                                                                                                               // 2362\n       * create WrappedRange from paraBookmark                                                                         // 2363\n       *                                                                                                               // 2364\n       * @param {Object} bookmark                                                                                      // 2365\n       * @param {Node[]} paras                                                                                         // 2366\n       * @return {WrappedRange}                                                                                        // 2367\n       */                                                                                                              // 2368\n      createFromParaBookmark: function (bookmark, paras) {                                                             // 2369\n        var so = bookmark.s.offset;                                                                                    // 2370\n        var eo = bookmark.e.offset;                                                                                    // 2371\n        var sc = dom.fromOffsetPath(list.head(paras), bookmark.s.path);                                                // 2372\n        var ec = dom.fromOffsetPath(list.last(paras), bookmark.e.path);                                                // 2373\n                                                                                                                       // 2374\n        return new WrappedRange(sc, so, ec, eo);                                                                       // 2375\n      }                                                                                                                // 2376\n    };                                                                                                                 // 2377\n  })();                                                                                                                // 2378\n                                                                                                                       // 2379\n  /**                                                                                                                  // 2380\n   * @class defaults                                                                                                   // 2381\n   *                                                                                                                   // 2382\n   * @singleton                                                                                                        // 2383\n   */                                                                                                                  // 2384\n  var defaults = {                                                                                                     // 2385\n    /** @property */                                                                                                   // 2386\n    version: '0.6.16',                                                                                                 // 2387\n                                                                                                                       // 2388\n    /**                                                                                                                // 2389\n     *                                                                                                                 // 2390\n     * for event options, reference to EventHandler.attach                                                             // 2391\n     *                                                                                                                 // 2392\n     * @property {Object} options                                                                                      // 2393\n     * @property {String/Number} [options.width=null] set editor width                                                 // 2394\n     * @property {String/Number} [options.height=null] set editor height, ex) 300                                      // 2395\n     * @property {String/Number} options.minHeight set minimum height of editor                                        // 2396\n     * @property {String/Number} options.maxHeight                                                                     // 2397\n     * @property {String/Number} options.focus                                                                         // 2398\n     * @property {Number} options.tabsize                                                                              // 2399\n     * @property {Boolean} options.styleWithSpan                                                                       // 2400\n     * @property {Object} options.codemirror                                                                           // 2401\n     * @property {Object} [options.codemirror.mode='text/html']                                                        // 2402\n     * @property {Object} [options.codemirror.htmlMode=true]                                                           // 2403\n     * @property {Object} [options.codemirror.lineNumbers=true]                                                        // 2404\n     * @property {String} [options.lang=en-US] language 'en-US', 'ko-KR', ...                                          // 2405\n     * @property {String} [options.direction=null] text direction, ex) 'rtl'                                           // 2406\n     * @property {Array} [options.toolbar]                                                                             // 2407\n     * @property {Boolean} [options.airMode=false]                                                                     // 2408\n     * @property {Array} [options.airPopover]                                                                          // 2409\n     * @property {Fucntion} [options.onInit] initialize                                                                // 2410\n     * @property {Fucntion} [options.onsubmit]                                                                         // 2411\n     */                                                                                                                // 2412\n    options: {                                                                                                         // 2413\n      width: null,                  // set editor width                                                                // 2414\n      height: null,                 // set editor height, ex) 300                                                      // 2415\n                                                                                                                       // 2416\n      minHeight: null,              // set minimum height of editor                                                    // 2417\n      maxHeight: null,              // set maximum height of editor                                                    // 2418\n                                                                                                                       // 2419\n      focus: false,                 // set focus to editable area after initializing summernote                        // 2420\n                                                                                                                       // 2421\n      tabsize: 4,                   // size of tab ex) 2 or 4                                                          // 2422\n      styleWithSpan: true,          // style with span (Chrome and FF only)                                            // 2423\n                                                                                                                       // 2424\n      disableLinkTarget: false,     // hide link Target Checkbox                                                       // 2425\n      disableDragAndDrop: false,    // disable drag and drop event                                                     // 2426\n      disableResizeEditor: false,   // disable resizing editor                                                         // 2427\n      disableResizeImage: false,    // disable resizing image                                                          // 2428\n                                                                                                                       // 2429\n      shortcuts: true,              // enable keyboard shortcuts                                                       // 2430\n                                                                                                                       // 2431\n      textareaAutoSync: true,       // enable textarea auto sync                                                       // 2432\n                                                                                                                       // 2433\n      placeholder: false,           // enable placeholder text                                                         // 2434\n      prettifyHtml: true,           // enable prettifying html while toggling codeview                                 // 2435\n                                                                                                                       // 2436\n      iconPrefix: 'fa fa-',         // prefix for css icon classes                                                     // 2437\n                                                                                                                       // 2438\n      icons: {                                                                                                         // 2439\n        font: {                                                                                                        // 2440\n          bold: 'bold',                                                                                                // 2441\n          italic: 'italic',                                                                                            // 2442\n          underline: 'underline',                                                                                      // 2443\n          clear: 'eraser',                                                                                             // 2444\n          height: 'text-height',                                                                                       // 2445\n          strikethrough: 'strikethrough',                                                                              // 2446\n          superscript: 'superscript',                                                                                  // 2447\n          subscript: 'subscript'                                                                                       // 2448\n        },                                                                                                             // 2449\n        image: {                                                                                                       // 2450\n          image: 'picture-o',                                                                                          // 2451\n          floatLeft: 'align-left',                                                                                     // 2452\n          floatRight: 'align-right',                                                                                   // 2453\n          floatNone: 'align-justify',                                                                                  // 2454\n          shapeRounded: 'square',                                                                                      // 2455\n          shapeCircle: 'circle-o',                                                                                     // 2456\n          shapeThumbnail: 'picture-o',                                                                                 // 2457\n          shapeNone: 'times',                                                                                          // 2458\n          remove: 'trash-o'                                                                                            // 2459\n        },                                                                                                             // 2460\n        link: {                                                                                                        // 2461\n          link: 'link',                                                                                                // 2462\n          unlink: 'unlink',                                                                                            // 2463\n          edit: 'edit'                                                                                                 // 2464\n        },                                                                                                             // 2465\n        table: {                                                                                                       // 2466\n          table: 'table'                                                                                               // 2467\n        },                                                                                                             // 2468\n        hr: {                                                                                                          // 2469\n          insert: 'minus'                                                                                              // 2470\n        },                                                                                                             // 2471\n        style: {                                                                                                       // 2472\n          style: 'magic'                                                                                               // 2473\n        },                                                                                                             // 2474\n        lists: {                                                                                                       // 2475\n          unordered: 'list-ul',                                                                                        // 2476\n          ordered: 'list-ol'                                                                                           // 2477\n        },                                                                                                             // 2478\n        options: {                                                                                                     // 2479\n          help: 'question',                                                                                            // 2480\n          fullscreen: 'arrows-alt',                                                                                    // 2481\n          codeview: 'code'                                                                                             // 2482\n        },                                                                                                             // 2483\n        paragraph: {                                                                                                   // 2484\n          paragraph: 'align-left',                                                                                     // 2485\n          outdent: 'outdent',                                                                                          // 2486\n          indent: 'indent',                                                                                            // 2487\n          left: 'align-left',                                                                                          // 2488\n          center: 'align-center',                                                                                      // 2489\n          right: 'align-right',                                                                                        // 2490\n          justify: 'align-justify'                                                                                     // 2491\n        },                                                                                                             // 2492\n        color: {                                                                                                       // 2493\n          recent: 'font'                                                                                               // 2494\n        },                                                                                                             // 2495\n        history: {                                                                                                     // 2496\n          undo: 'undo',                                                                                                // 2497\n          redo: 'repeat'                                                                                               // 2498\n        },                                                                                                             // 2499\n        misc: {                                                                                                        // 2500\n          check: 'check'                                                                                               // 2501\n        }                                                                                                              // 2502\n      },                                                                                                               // 2503\n                                                                                                                       // 2504\n      dialogsInBody: false,          // false will add dialogs into editor                                             // 2505\n                                                                                                                       // 2506\n      codemirror: {                 // codemirror options                                                              // 2507\n        mode: 'text/html',                                                                                             // 2508\n        htmlMode: true,                                                                                                // 2509\n        lineNumbers: true                                                                                              // 2510\n      },                                                                                                               // 2511\n                                                                                                                       // 2512\n      // language                                                                                                      // 2513\n      lang: 'en-US',                // language 'en-US', 'ko-KR', ...                                                  // 2514\n      direction: null,              // text direction, ex) 'rtl'                                                       // 2515\n                                                                                                                       // 2516\n      // toolbar                                                                                                       // 2517\n      toolbar: [                                                                                                       // 2518\n        ['style', ['style']],                                                                                          // 2519\n        ['font', ['bold', 'italic', 'underline', 'clear']],                                                            // 2520\n        // ['font', ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'clear']],            // 2521\n        ['fontname', ['fontname']],                                                                                    // 2522\n        ['fontsize', ['fontsize']],                                                                                    // 2523\n        ['color', ['color']],                                                                                          // 2524\n        ['para', ['ul', 'ol', 'paragraph']],                                                                           // 2525\n        ['height', ['height']],                                                                                        // 2526\n        ['table', ['table']],                                                                                          // 2527\n        ['insert', ['link', 'picture', 'hr']],                                                                         // 2528\n        ['view', ['fullscreen', 'codeview']],                                                                          // 2529\n        ['help', ['help']]                                                                                             // 2530\n      ],                                                                                                               // 2531\n                                                                                                                       // 2532\n      plugin : { },                                                                                                    // 2533\n                                                                                                                       // 2534\n      // air mode: inline editor                                                                                       // 2535\n      airMode: false,                                                                                                  // 2536\n      // airPopover: [                                                                                                 // 2537\n      //   ['style', ['style']],                                                                                       // 2538\n      //   ['font', ['bold', 'italic', 'underline', 'clear']],                                                         // 2539\n      //   ['fontname', ['fontname']],                                                                                 // 2540\n      //   ['color', ['color']],                                                                                       // 2541\n      //   ['para', ['ul', 'ol', 'paragraph']],                                                                        // 2542\n      //   ['height', ['height']],                                                                                     // 2543\n      //   ['table', ['table']],                                                                                       // 2544\n      //   ['insert', ['link', 'picture']],                                                                            // 2545\n      //   ['help', ['help']]                                                                                          // 2546\n      // ],                                                                                                            // 2547\n      airPopover: [                                                                                                    // 2548\n        ['color', ['color']],                                                                                          // 2549\n        ['font', ['bold', 'underline', 'clear']],                                                                      // 2550\n        ['para', ['ul', 'paragraph']],                                                                                 // 2551\n        ['table', ['table']],                                                                                          // 2552\n        ['insert', ['link', 'picture']]                                                                                // 2553\n      ],                                                                                                               // 2554\n                                                                                                                       // 2555\n      // style tag                                                                                                     // 2556\n      styleTags: ['p', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],                                       // 2557\n                                                                                                                       // 2558\n      // default fontName                                                                                              // 2559\n      defaultFontName: 'Helvetica Neue',                                                                               // 2560\n                                                                                                                       // 2561\n      // fontName                                                                                                      // 2562\n      fontNames: [                                                                                                     // 2563\n        'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New',                                                        // 2564\n        'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande',                                                      // 2565\n        'Tahoma', 'Times New Roman', 'Verdana'                                                                         // 2566\n      ],                                                                                                               // 2567\n      fontNamesIgnoreCheck: [],                                                                                        // 2568\n                                                                                                                       // 2569\n      fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36'],                                                 // 2570\n                                                                                                                       // 2571\n      // pallete colors(n x n)                                                                                         // 2572\n      colors: [                                                                                                        // 2573\n        ['#000000', '#424242', '#636363', '#9C9C94', '#CEC6CE', '#EFEFEF', '#F7F7F7', '#FFFFFF'],                      // 2574\n        ['#FF0000', '#FF9C00', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#9C00FF', '#FF00FF'],                      // 2575\n        ['#F7C6CE', '#FFE7CE', '#FFEFC6', '#D6EFD6', '#CEDEE7', '#CEE7F7', '#D6D6E7', '#E7D6DE'],                      // 2576\n        ['#E79C9C', '#FFC69C', '#FFE79C', '#B5D6A5', '#A5C6CE', '#9CC6EF', '#B5A5D6', '#D6A5BD'],                      // 2577\n        ['#E76363', '#F7AD6B', '#FFD663', '#94BD7B', '#73A5AD', '#6BADDE', '#8C7BC6', '#C67BA5'],                      // 2578\n        ['#CE0000', '#E79439', '#EFC631', '#6BA54A', '#4A7B8C', '#3984C6', '#634AA5', '#A54A7B'],                      // 2579\n        ['#9C0000', '#B56308', '#BD9400', '#397B21', '#104A5A', '#085294', '#311873', '#731842'],                      // 2580\n        ['#630000', '#7B3900', '#846300', '#295218', '#083139', '#003163', '#21104A', '#4A1031']                       // 2581\n      ],                                                                                                               // 2582\n                                                                                                                       // 2583\n      // lineHeight                                                                                                    // 2584\n      lineHeights: ['1.0', '1.2', '1.4', '1.5', '1.6', '1.8', '2.0', '3.0'],                                           // 2585\n                                                                                                                       // 2586\n      // insertTable max size                                                                                          // 2587\n      insertTableMaxSize: {                                                                                            // 2588\n        col: 10,                                                                                                       // 2589\n        row: 10                                                                                                        // 2590\n      },                                                                                                               // 2591\n                                                                                                                       // 2592\n      // image                                                                                                         // 2593\n      maximumImageFileSize: null, // size in bytes, null = no limit                                                    // 2594\n                                                                                                                       // 2595\n      // callbacks                                                                                                     // 2596\n      oninit: null,             // initialize                                                                          // 2597\n      onfocus: null,            // editable has focus                                                                  // 2598\n      onblur: null,             // editable out of focus                                                               // 2599\n      onenter: null,            // enter key pressed                                                                   // 2600\n      onkeyup: null,            // keyup                                                                               // 2601\n      onkeydown: null,          // keydown                                                                             // 2602\n      onImageUpload: null,      // imageUpload                                                                         // 2603\n      onImageUploadError: null, // imageUploadError                                                                    // 2604\n      onMediaDelete: null,      // media delete                                                                        // 2605\n      onToolbarClick: null,                                                                                            // 2606\n      onsubmit: null,                                                                                                  // 2607\n                                                                                                                       // 2608\n      /**                                                                                                              // 2609\n       * manipulate link address when user create link                                                                 // 2610\n       * @param {String} sLinkUrl                                                                                      // 2611\n       * @return {String}                                                                                              // 2612\n       */                                                                                                              // 2613\n      onCreateLink: function (sLinkUrl) {                                                                              // 2614\n        if (sLinkUrl.indexOf('@') !== -1 && sLinkUrl.indexOf(':') === -1) {                                            // 2615\n          sLinkUrl =  'mailto:' + sLinkUrl;                                                                            // 2616\n        }                                                                                                              // 2617\n                                                                                                                       // 2618\n        return sLinkUrl;                                                                                               // 2619\n      },                                                                                                               // 2620\n                                                                                                                       // 2621\n      keyMap: {                                                                                                        // 2622\n        pc: {                                                                                                          // 2623\n          'ENTER': 'insertParagraph',                                                                                  // 2624\n          'CTRL+Z': 'undo',                                                                                            // 2625\n          'CTRL+Y': 'redo',                                                                                            // 2626\n          'TAB': 'tab',                                                                                                // 2627\n          'SHIFT+TAB': 'untab',                                                                                        // 2628\n          'CTRL+B': 'bold',                                                                                            // 2629\n          'CTRL+I': 'italic',                                                                                          // 2630\n          'CTRL+U': 'underline',                                                                                       // 2631\n          'CTRL+SHIFT+S': 'strikethrough',                                                                             // 2632\n          'CTRL+BACKSLASH': 'removeFormat',                                                                            // 2633\n          'CTRL+SHIFT+L': 'justifyLeft',                                                                               // 2634\n          'CTRL+SHIFT+E': 'justifyCenter',                                                                             // 2635\n          'CTRL+SHIFT+R': 'justifyRight',                                                                              // 2636\n          'CTRL+SHIFT+J': 'justifyFull',                                                                               // 2637\n          'CTRL+SHIFT+NUM7': 'insertUnorderedList',                                                                    // 2638\n          'CTRL+SHIFT+NUM8': 'insertOrderedList',                                                                      // 2639\n          'CTRL+LEFTBRACKET': 'outdent',                                                                               // 2640\n          'CTRL+RIGHTBRACKET': 'indent',                                                                               // 2641\n          'CTRL+NUM0': 'formatPara',                                                                                   // 2642\n          'CTRL+NUM1': 'formatH1',                                                                                     // 2643\n          'CTRL+NUM2': 'formatH2',                                                                                     // 2644\n          'CTRL+NUM3': 'formatH3',                                                                                     // 2645\n          'CTRL+NUM4': 'formatH4',                                                                                     // 2646\n          'CTRL+NUM5': 'formatH5',                                                                                     // 2647\n          'CTRL+NUM6': 'formatH6',                                                                                     // 2648\n          'CTRL+ENTER': 'insertHorizontalRule',                                                                        // 2649\n          'CTRL+K': 'showLinkDialog'                                                                                   // 2650\n        },                                                                                                             // 2651\n                                                                                                                       // 2652\n        mac: {                                                                                                         // 2653\n          'ENTER': 'insertParagraph',                                                                                  // 2654\n          'CMD+Z': 'undo',                                                                                             // 2655\n          'CMD+SHIFT+Z': 'redo',                                                                                       // 2656\n          'TAB': 'tab',                                                                                                // 2657\n          'SHIFT+TAB': 'untab',                                                                                        // 2658\n          'CMD+B': 'bold',                                                                                             // 2659\n          'CMD+I': 'italic',                                                                                           // 2660\n          'CMD+U': 'underline',                                                                                        // 2661\n          'CMD+SHIFT+S': 'strikethrough',                                                                              // 2662\n          'CMD+BACKSLASH': 'removeFormat',                                                                             // 2663\n          'CMD+SHIFT+L': 'justifyLeft',                                                                                // 2664\n          'CMD+SHIFT+E': 'justifyCenter',                                                                              // 2665\n          'CMD+SHIFT+R': 'justifyRight',                                                                               // 2666\n          'CMD+SHIFT+J': 'justifyFull',                                                                                // 2667\n          'CMD+SHIFT+NUM7': 'insertUnorderedList',                                                                     // 2668\n          'CMD+SHIFT+NUM8': 'insertOrderedList',                                                                       // 2669\n          'CMD+LEFTBRACKET': 'outdent',                                                                                // 2670\n          'CMD+RIGHTBRACKET': 'indent',                                                                                // 2671\n          'CMD+NUM0': 'formatPara',                                                                                    // 2672\n          'CMD+NUM1': 'formatH1',                                                                                      // 2673\n          'CMD+NUM2': 'formatH2',                                                                                      // 2674\n          'CMD+NUM3': 'formatH3',                                                                                      // 2675\n          'CMD+NUM4': 'formatH4',                                                                                      // 2676\n          'CMD+NUM5': 'formatH5',                                                                                      // 2677\n          'CMD+NUM6': 'formatH6',                                                                                      // 2678\n          'CMD+ENTER': 'insertHorizontalRule',                                                                         // 2679\n          'CMD+K': 'showLinkDialog'                                                                                    // 2680\n        }                                                                                                              // 2681\n      }                                                                                                                // 2682\n    },                                                                                                                 // 2683\n                                                                                                                       // 2684\n    // default language: en-US                                                                                         // 2685\n    lang: {                                                                                                            // 2686\n      'en-US': {                                                                                                       // 2687\n        font: {                                                                                                        // 2688\n          bold: 'Bold',                                                                                                // 2689\n          italic: 'Italic',                                                                                            // 2690\n          underline: 'Underline',                                                                                      // 2691\n          clear: 'Remove Font Style',                                                                                  // 2692\n          height: 'Line Height',                                                                                       // 2693\n          name: 'Font Family',                                                                                         // 2694\n          strikethrough: 'Strikethrough',                                                                              // 2695\n          subscript: 'Subscript',                                                                                      // 2696\n          superscript: 'Superscript',                                                                                  // 2697\n          size: 'Font Size'                                                                                            // 2698\n        },                                                                                                             // 2699\n        image: {                                                                                                       // 2700\n          image: 'Picture',                                                                                            // 2701\n          insert: 'Insert Image',                                                                                      // 2702\n          resizeFull: 'Resize Full',                                                                                   // 2703\n          resizeHalf: 'Resize Half',                                                                                   // 2704\n          resizeQuarter: 'Resize Quarter',                                                                             // 2705\n          floatLeft: 'Float Left',                                                                                     // 2706\n          floatRight: 'Float Right',                                                                                   // 2707\n          floatNone: 'Float None',                                                                                     // 2708\n          shapeRounded: 'Shape: Rounded',                                                                              // 2709\n          shapeCircle: 'Shape: Circle',                                                                                // 2710\n          shapeThumbnail: 'Shape: Thumbnail',                                                                          // 2711\n          shapeNone: 'Shape: None',                                                                                    // 2712\n          dragImageHere: 'Drag image or text here',                                                                    // 2713\n          dropImage: 'Drop image or Text',                                                                             // 2714\n          selectFromFiles: 'Select from files',                                                                        // 2715\n          maximumFileSize: 'Maximum file size',                                                                        // 2716\n          maximumFileSizeError: 'Maximum file size exceeded.',                                                         // 2717\n          url: 'Image URL',                                                                                            // 2718\n          remove: 'Remove Image'                                                                                       // 2719\n        },                                                                                                             // 2720\n        link: {                                                                                                        // 2721\n          link: 'Link',                                                                                                // 2722\n          insert: 'Insert Link',                                                                                       // 2723\n          unlink: 'Unlink',                                                                                            // 2724\n          edit: 'Edit',                                                                                                // 2725\n          textToDisplay: 'Text to display',                                                                            // 2726\n          url: 'To what URL should this link go?',                                                                     // 2727\n          openInNewWindow: 'Open in new window'                                                                        // 2728\n        },                                                                                                             // 2729\n        table: {                                                                                                       // 2730\n          table: 'Table'                                                                                               // 2731\n        },                                                                                                             // 2732\n        hr: {                                                                                                          // 2733\n          insert: 'Insert Horizontal Rule'                                                                             // 2734\n        },                                                                                                             // 2735\n        style: {                                                                                                       // 2736\n          style: 'Style',                                                                                              // 2737\n          normal: 'Normal',                                                                                            // 2738\n          blockquote: 'Quote',                                                                                         // 2739\n          pre: 'Code',                                                                                                 // 2740\n          h1: 'Header 1',                                                                                              // 2741\n          h2: 'Header 2',                                                                                              // 2742\n          h3: 'Header 3',                                                                                              // 2743\n          h4: 'Header 4',                                                                                              // 2744\n          h5: 'Header 5',                                                                                              // 2745\n          h6: 'Header 6'                                                                                               // 2746\n        },                                                                                                             // 2747\n        lists: {                                                                                                       // 2748\n          unordered: 'Unordered list',                                                                                 // 2749\n          ordered: 'Ordered list'                                                                                      // 2750\n        },                                                                                                             // 2751\n        options: {                                                                                                     // 2752\n          help: 'Help',                                                                                                // 2753\n          fullscreen: 'Full Screen',                                                                                   // 2754\n          codeview: 'Code View'                                                                                        // 2755\n        },                                                                                                             // 2756\n        paragraph: {                                                                                                   // 2757\n          paragraph: 'Paragraph',                                                                                      // 2758\n          outdent: 'Outdent',                                                                                          // 2759\n          indent: 'Indent',                                                                                            // 2760\n          left: 'Align left',                                                                                          // 2761\n          center: 'Align center',                                                                                      // 2762\n          right: 'Align right',                                                                                        // 2763\n          justify: 'Justify full'                                                                                      // 2764\n        },                                                                                                             // 2765\n        color: {                                                                                                       // 2766\n          recent: 'Recent Color',                                                                                      // 2767\n          more: 'More Color',                                                                                          // 2768\n          background: 'Background Color',                                                                              // 2769\n          foreground: 'Foreground Color',                                                                              // 2770\n          transparent: 'Transparent',                                                                                  // 2771\n          setTransparent: 'Set transparent',                                                                           // 2772\n          reset: 'Reset',                                                                                              // 2773\n          resetToDefault: 'Reset to default'                                                                           // 2774\n        },                                                                                                             // 2775\n        shortcut: {                                                                                                    // 2776\n          shortcuts: 'Keyboard shortcuts',                                                                             // 2777\n          close: 'Close',                                                                                              // 2778\n          textFormatting: 'Text formatting',                                                                           // 2779\n          action: 'Action',                                                                                            // 2780\n          paragraphFormatting: 'Paragraph formatting',                                                                 // 2781\n          documentStyle: 'Document Style',                                                                             // 2782\n          extraKeys: 'Extra keys'                                                                                      // 2783\n        },                                                                                                             // 2784\n        history: {                                                                                                     // 2785\n          undo: 'Undo',                                                                                                // 2786\n          redo: 'Redo'                                                                                                 // 2787\n        }                                                                                                              // 2788\n      }                                                                                                                // 2789\n    }                                                                                                                  // 2790\n  };                                                                                                                   // 2791\n                                                                                                                       // 2792\n  /**                                                                                                                  // 2793\n   * @class core.async                                                                                                 // 2794\n   *                                                                                                                   // 2795\n   * Async functions which returns `Promise`                                                                           // 2796\n   *                                                                                                                   // 2797\n   * @singleton                                                                                                        // 2798\n   * @alternateClassName async                                                                                         // 2799\n   */                                                                                                                  // 2800\n  var async = (function () {                                                                                           // 2801\n    /**                                                                                                                // 2802\n     * @method readFileAsDataURL                                                                                       // 2803\n     *                                                                                                                 // 2804\n     * read contents of file as representing URL                                                                       // 2805\n     *                                                                                                                 // 2806\n     * @param {File} file                                                                                              // 2807\n     * @return {Promise} - then: sDataUrl                                                                              // 2808\n     */                                                                                                                // 2809\n    var readFileAsDataURL = function (file) {                                                                          // 2810\n      return $.Deferred(function (deferred) {                                                                          // 2811\n        $.extend(new FileReader(), {                                                                                   // 2812\n          onload: function (e) {                                                                                       // 2813\n            var sDataURL = e.target.result;                                                                            // 2814\n            deferred.resolve(sDataURL);                                                                                // 2815\n          },                                                                                                           // 2816\n          onerror: function () {                                                                                       // 2817\n            deferred.reject(this);                                                                                     // 2818\n          }                                                                                                            // 2819\n        }).readAsDataURL(file);                                                                                        // 2820\n      }).promise();                                                                                                    // 2821\n    };                                                                                                                 // 2822\n                                                                                                                       // 2823\n    /**                                                                                                                // 2824\n     * @method createImage                                                                                             // 2825\n     *                                                                                                                 // 2826\n     * create `<image>` from url string                                                                                // 2827\n     *                                                                                                                 // 2828\n     * @param {String} sUrl                                                                                            // 2829\n     * @param {String} filename                                                                                        // 2830\n     * @return {Promise} - then: $image                                                                                // 2831\n     */                                                                                                                // 2832\n    var createImage = function (sUrl, filename) {                                                                      // 2833\n      return $.Deferred(function (deferred) {                                                                          // 2834\n        var $img = $('<img>');                                                                                         // 2835\n                                                                                                                       // 2836\n        $img.one('load', function () {                                                                                 // 2837\n          $img.off('error abort');                                                                                     // 2838\n          deferred.resolve($img);                                                                                      // 2839\n        }).one('error abort', function () {                                                                            // 2840\n          $img.off('load').detach();                                                                                   // 2841\n          deferred.reject($img);                                                                                       // 2842\n        }).css({                                                                                                       // 2843\n          display: 'none'                                                                                              // 2844\n        }).appendTo(document.body).attr({                                                                              // 2845\n          'src': sUrl,                                                                                                 // 2846\n          'data-filename': filename                                                                                    // 2847\n        });                                                                                                            // 2848\n      }).promise();                                                                                                    // 2849\n    };                                                                                                                 // 2850\n                                                                                                                       // 2851\n    return {                                                                                                           // 2852\n      readFileAsDataURL: readFileAsDataURL,                                                                            // 2853\n      createImage: createImage                                                                                         // 2854\n    };                                                                                                                 // 2855\n  })();                                                                                                                // 2856\n                                                                                                                       // 2857\n  /**                                                                                                                  // 2858\n   * @class core.key                                                                                                   // 2859\n   *                                                                                                                   // 2860\n   * Object for keycodes.                                                                                              // 2861\n   *                                                                                                                   // 2862\n   * @singleton                                                                                                        // 2863\n   * @alternateClassName key                                                                                           // 2864\n   */                                                                                                                  // 2865\n  var key = (function () {                                                                                             // 2866\n    var keyMap = {                                                                                                     // 2867\n      'BACKSPACE': 8,                                                                                                  // 2868\n      'TAB': 9,                                                                                                        // 2869\n      'ENTER': 13,                                                                                                     // 2870\n      'SPACE': 32,                                                                                                     // 2871\n                                                                                                                       // 2872\n      // Number: 0-9                                                                                                   // 2873\n      'NUM0': 48,                                                                                                      // 2874\n      'NUM1': 49,                                                                                                      // 2875\n      'NUM2': 50,                                                                                                      // 2876\n      'NUM3': 51,                                                                                                      // 2877\n      'NUM4': 52,                                                                                                      // 2878\n      'NUM5': 53,                                                                                                      // 2879\n      'NUM6': 54,                                                                                                      // 2880\n      'NUM7': 55,                                                                                                      // 2881\n      'NUM8': 56,                                                                                                      // 2882\n                                                                                                                       // 2883\n      // Alphabet: a-z                                                                                                 // 2884\n      'B': 66,                                                                                                         // 2885\n      'E': 69,                                                                                                         // 2886\n      'I': 73,                                                                                                         // 2887\n      'J': 74,                                                                                                         // 2888\n      'K': 75,                                                                                                         // 2889\n      'L': 76,                                                                                                         // 2890\n      'R': 82,                                                                                                         // 2891\n      'S': 83,                                                                                                         // 2892\n      'U': 85,                                                                                                         // 2893\n      'V': 86,                                                                                                         // 2894\n      'Y': 89,                                                                                                         // 2895\n      'Z': 90,                                                                                                         // 2896\n                                                                                                                       // 2897\n      'SLASH': 191,                                                                                                    // 2898\n      'LEFTBRACKET': 219,                                                                                              // 2899\n      'BACKSLASH': 220,                                                                                                // 2900\n      'RIGHTBRACKET': 221                                                                                              // 2901\n    };                                                                                                                 // 2902\n                                                                                                                       // 2903\n    return {                                                                                                           // 2904\n      /**                                                                                                              // 2905\n       * @method isEdit                                                                                                // 2906\n       *                                                                                                               // 2907\n       * @param {Number} keyCode                                                                                       // 2908\n       * @return {Boolean}                                                                                             // 2909\n       */                                                                                                              // 2910\n      isEdit: function (keyCode) {                                                                                     // 2911\n        return list.contains([8, 9, 13, 32], keyCode);                                                                 // 2912\n      },                                                                                                               // 2913\n      /**                                                                                                              // 2914\n       * @method isMove                                                                                                // 2915\n       *                                                                                                               // 2916\n       * @param {Number} keyCode                                                                                       // 2917\n       * @return {Boolean}                                                                                             // 2918\n       */                                                                                                              // 2919\n      isMove: function (keyCode) {                                                                                     // 2920\n        return list.contains([37, 38, 39, 40], keyCode);                                                               // 2921\n      },                                                                                                               // 2922\n      /**                                                                                                              // 2923\n       * @property {Object} nameFromCode                                                                               // 2924\n       * @property {String} nameFromCode.8 \"BACKSPACE\"                                                                 // 2925\n       */                                                                                                              // 2926\n      nameFromCode: func.invertObject(keyMap),                                                                         // 2927\n      code: keyMap                                                                                                     // 2928\n    };                                                                                                                 // 2929\n  })();                                                                                                                // 2930\n                                                                                                                       // 2931\n  /**                                                                                                                  // 2932\n   * @class editing.History                                                                                            // 2933\n   *                                                                                                                   // 2934\n   * Editor History                                                                                                    // 2935\n   *                                                                                                                   // 2936\n   */                                                                                                                  // 2937\n  var History = function ($editable) {                                                                                 // 2938\n    var stack = [], stackOffset = -1;                                                                                  // 2939\n    var editable = $editable[0];                                                                                       // 2940\n                                                                                                                       // 2941\n    var makeSnapshot = function () {                                                                                   // 2942\n      var rng = range.create();                                                                                        // 2943\n      var emptyBookmark = {s: {path: [], offset: 0}, e: {path: [], offset: 0}};                                        // 2944\n                                                                                                                       // 2945\n      return {                                                                                                         // 2946\n        contents: $editable.html(),                                                                                    // 2947\n        bookmark: (rng ? rng.bookmark(editable) : emptyBookmark)                                                       // 2948\n      };                                                                                                               // 2949\n    };                                                                                                                 // 2950\n                                                                                                                       // 2951\n    var applySnapshot = function (snapshot) {                                                                          // 2952\n      if (snapshot.contents !== null) {                                                                                // 2953\n        $editable.html(snapshot.contents);                                                                             // 2954\n      }                                                                                                                // 2955\n      if (snapshot.bookmark !== null) {                                                                                // 2956\n        range.createFromBookmark(editable, snapshot.bookmark).select();                                                // 2957\n      }                                                                                                                // 2958\n    };                                                                                                                 // 2959\n                                                                                                                       // 2960\n    /**                                                                                                                // 2961\n     * undo                                                                                                            // 2962\n     */                                                                                                                // 2963\n    this.undo = function () {                                                                                          // 2964\n      // Create snap shot if not yet recorded                                                                          // 2965\n      if ($editable.html() !== stack[stackOffset].contents) {                                                          // 2966\n        this.recordUndo();                                                                                             // 2967\n      }                                                                                                                // 2968\n                                                                                                                       // 2969\n      if (0 < stackOffset) {                                                                                           // 2970\n        stackOffset--;                                                                                                 // 2971\n        applySnapshot(stack[stackOffset]);                                                                             // 2972\n      }                                                                                                                // 2973\n    };                                                                                                                 // 2974\n                                                                                                                       // 2975\n    /**                                                                                                                // 2976\n     * redo                                                                                                            // 2977\n     */                                                                                                                // 2978\n    this.redo = function () {                                                                                          // 2979\n      if (stack.length - 1 > stackOffset) {                                                                            // 2980\n        stackOffset++;                                                                                                 // 2981\n        applySnapshot(stack[stackOffset]);                                                                             // 2982\n      }                                                                                                                // 2983\n    };                                                                                                                 // 2984\n                                                                                                                       // 2985\n    /**                                                                                                                // 2986\n     * recorded undo                                                                                                   // 2987\n     */                                                                                                                // 2988\n    this.recordUndo = function () {                                                                                    // 2989\n      stackOffset++;                                                                                                   // 2990\n                                                                                                                       // 2991\n      // Wash out stack after stackOffset                                                                              // 2992\n      if (stack.length > stackOffset) {                                                                                // 2993\n        stack = stack.slice(0, stackOffset);                                                                           // 2994\n      }                                                                                                                // 2995\n                                                                                                                       // 2996\n      // Create new snapshot and push it to the end                                                                    // 2997\n      stack.push(makeSnapshot());                                                                                      // 2998\n    };                                                                                                                 // 2999\n                                                                                                                       // 3000\n    // Create first undo stack                                                                                         // 3001\n    this.recordUndo();                                                                                                 // 3002\n  };                                                                                                                   // 3003\n                                                                                                                       // 3004\n  /**                                                                                                                  // 3005\n   * @class editing.Style                                                                                              // 3006\n   *                                                                                                                   // 3007\n   * Style                                                                                                             // 3008\n   *                                                                                                                   // 3009\n   */                                                                                                                  // 3010\n  var Style = function () {                                                                                            // 3011\n    /**                                                                                                                // 3012\n     * @method jQueryCSS                                                                                               // 3013\n     *                                                                                                                 // 3014\n     * [workaround] for old jQuery                                                                                     // 3015\n     * passing an array of style properties to .css()                                                                  // 3016\n     * will result in an object of property-value pairs.                                                               // 3017\n     * (compability with version < 1.9)                                                                                // 3018\n     *                                                                                                                 // 3019\n     * @private                                                                                                        // 3020\n     * @param  {jQuery} $obj                                                                                           // 3021\n     * @param  {Array} propertyNames - An array of one or more CSS properties.                                         // 3022\n     * @return {Object}                                                                                                // 3023\n     */                                                                                                                // 3024\n    var jQueryCSS = function ($obj, propertyNames) {                                                                   // 3025\n      if (agent.jqueryVersion < 1.9) {                                                                                 // 3026\n        var result = {};                                                                                               // 3027\n        $.each(propertyNames, function (idx, propertyName) {                                                           // 3028\n          result[propertyName] = $obj.css(propertyName);                                                               // 3029\n        });                                                                                                            // 3030\n        return result;                                                                                                 // 3031\n      }                                                                                                                // 3032\n      return $obj.css.call($obj, propertyNames);                                                                       // 3033\n    };                                                                                                                 // 3034\n                                                                                                                       // 3035\n    /**                                                                                                                // 3036\n     * returns style object from node                                                                                  // 3037\n     *                                                                                                                 // 3038\n     * @param {jQuery} $node                                                                                           // 3039\n     * @return {Object}                                                                                                // 3040\n     */                                                                                                                // 3041\n    this.fromNode = function ($node) {                                                                                 // 3042\n      var properties = ['font-family', 'font-size', 'text-align', 'list-style-type', 'line-height'];                   // 3043\n      var styleInfo = jQueryCSS($node, properties) || {};                                                              // 3044\n      styleInfo['font-size'] = parseInt(styleInfo['font-size'], 10);                                                   // 3045\n      return styleInfo;                                                                                                // 3046\n    };                                                                                                                 // 3047\n                                                                                                                       // 3048\n    /**                                                                                                                // 3049\n     * paragraph level style                                                                                           // 3050\n     *                                                                                                                 // 3051\n     * @param {WrappedRange} rng                                                                                       // 3052\n     * @param {Object} styleInfo                                                                                       // 3053\n     */                                                                                                                // 3054\n    this.stylePara = function (rng, styleInfo) {                                                                       // 3055\n      $.each(rng.nodes(dom.isPara, {                                                                                   // 3056\n        includeAncestor: true                                                                                          // 3057\n      }), function (idx, para) {                                                                                       // 3058\n        $(para).css(styleInfo);                                                                                        // 3059\n      });                                                                                                              // 3060\n    };                                                                                                                 // 3061\n                                                                                                                       // 3062\n    /**                                                                                                                // 3063\n     * insert and returns styleNodes on range.                                                                         // 3064\n     *                                                                                                                 // 3065\n     * @param {WrappedRange} rng                                                                                       // 3066\n     * @param {Object} [options] - options for styleNodes                                                              // 3067\n     * @param {String} [options.nodeName] - default: `SPAN`                                                            // 3068\n     * @param {Boolean} [options.expandClosestSibling] - default: `false`                                              // 3069\n     * @param {Boolean} [options.onlyPartialContains] - default: `false`                                               // 3070\n     * @return {Node[]}                                                                                                // 3071\n     */                                                                                                                // 3072\n    this.styleNodes = function (rng, options) {                                                                        // 3073\n      rng = rng.splitText();                                                                                           // 3074\n                                                                                                                       // 3075\n      var nodeName = options && options.nodeName || 'SPAN';                                                            // 3076\n      var expandClosestSibling = !!(options && options.expandClosestSibling);                                          // 3077\n      var onlyPartialContains = !!(options && options.onlyPartialContains);                                            // 3078\n                                                                                                                       // 3079\n      if (rng.isCollapsed()) {                                                                                         // 3080\n        return [rng.insertNode(dom.create(nodeName))];                                                                 // 3081\n      }                                                                                                                // 3082\n                                                                                                                       // 3083\n      var pred = dom.makePredByNodeName(nodeName);                                                                     // 3084\n      var nodes = rng.nodes(dom.isText, {                                                                              // 3085\n        fullyContains: true                                                                                            // 3086\n      }).map(function (text) {                                                                                         // 3087\n        return dom.singleChildAncestor(text, pred) || dom.wrap(text, nodeName);                                        // 3088\n      });                                                                                                              // 3089\n                                                                                                                       // 3090\n      if (expandClosestSibling) {                                                                                      // 3091\n        if (onlyPartialContains) {                                                                                     // 3092\n          var nodesInRange = rng.nodes();                                                                              // 3093\n          // compose with partial contains predication                                                                 // 3094\n          pred = func.and(pred, function (node) {                                                                      // 3095\n            return list.contains(nodesInRange, node);                                                                  // 3096\n          });                                                                                                          // 3097\n        }                                                                                                              // 3098\n                                                                                                                       // 3099\n        return nodes.map(function (node) {                                                                             // 3100\n          var siblings = dom.withClosestSiblings(node, pred);                                                          // 3101\n          var head = list.head(siblings);                                                                              // 3102\n          var tails = list.tail(siblings);                                                                             // 3103\n          $.each(tails, function (idx, elem) {                                                                         // 3104\n            dom.appendChildNodes(head, elem.childNodes);                                                               // 3105\n            dom.remove(elem);                                                                                          // 3106\n          });                                                                                                          // 3107\n          return list.head(siblings);                                                                                  // 3108\n        });                                                                                                            // 3109\n      } else {                                                                                                         // 3110\n        return nodes;                                                                                                  // 3111\n      }                                                                                                                // 3112\n    };                                                                                                                 // 3113\n                                                                                                                       // 3114\n    /**                                                                                                                // 3115\n     * get current style on cursor                                                                                     // 3116\n     *                                                                                                                 // 3117\n     * @param {WrappedRange} rng                                                                                       // 3118\n     * @return {Object} - object contains style properties.                                                            // 3119\n     */                                                                                                                // 3120\n    this.current = function (rng) {                                                                                    // 3121\n      var $cont = $(dom.isText(rng.sc) ? rng.sc.parentNode : rng.sc);                                                  // 3122\n      var styleInfo = this.fromNode($cont);                                                                            // 3123\n                                                                                                                       // 3124\n      // document.queryCommandState for toggle state                                                                   // 3125\n      styleInfo['font-bold'] = document.queryCommandState('bold') ? 'bold' : 'normal';                                 // 3126\n      styleInfo['font-italic'] = document.queryCommandState('italic') ? 'italic' : 'normal';                           // 3127\n      styleInfo['font-underline'] = document.queryCommandState('underline') ? 'underline' : 'normal';                  // 3128\n      styleInfo['font-strikethrough'] = document.queryCommandState('strikeThrough') ? 'strikethrough' : 'normal';      // 3129\n      styleInfo['font-superscript'] = document.queryCommandState('superscript') ? 'superscript' : 'normal';            // 3130\n      styleInfo['font-subscript'] = document.queryCommandState('subscript') ? 'subscript' : 'normal';                  // 3131\n                                                                                                                       // 3132\n      // list-style-type to list-style(unordered, ordered)                                                             // 3133\n      if (!rng.isOnList()) {                                                                                           // 3134\n        styleInfo['list-style'] = 'none';                                                                              // 3135\n      } else {                                                                                                         // 3136\n        var aOrderedType = ['circle', 'disc', 'disc-leading-zero', 'square'];                                          // 3137\n        var isUnordered = $.inArray(styleInfo['list-style-type'], aOrderedType) > -1;                                  // 3138\n        styleInfo['list-style'] = isUnordered ? 'unordered' : 'ordered';                                               // 3139\n      }                                                                                                                // 3140\n                                                                                                                       // 3141\n      var para = dom.ancestor(rng.sc, dom.isPara);                                                                     // 3142\n      if (para && para.style['line-height']) {                                                                         // 3143\n        styleInfo['line-height'] = para.style.lineHeight;                                                              // 3144\n      } else {                                                                                                         // 3145\n        var lineHeight = parseInt(styleInfo['line-height'], 10) / parseInt(styleInfo['font-size'], 10);                // 3146\n        styleInfo['line-height'] = lineHeight.toFixed(1);                                                              // 3147\n      }                                                                                                                // 3148\n                                                                                                                       // 3149\n      styleInfo.anchor = rng.isOnAnchor() && dom.ancestor(rng.sc, dom.isAnchor);                                       // 3150\n      styleInfo.ancestors = dom.listAncestor(rng.sc, dom.isEditable);                                                  // 3151\n      styleInfo.range = rng;                                                                                           // 3152\n                                                                                                                       // 3153\n      return styleInfo;                                                                                                // 3154\n    };                                                                                                                 // 3155\n  };                                                                                                                   // 3156\n                                                                                                                       // 3157\n                                                                                                                       // 3158\n  /**                                                                                                                  // 3159\n   * @class editing.Bullet                                                                                             // 3160\n   *                                                                                                                   // 3161\n   * @alternateClassName Bullet                                                                                        // 3162\n   */                                                                                                                  // 3163\n  var Bullet = function () {                                                                                           // 3164\n    /**                                                                                                                // 3165\n     * @method insertOrderedList                                                                                       // 3166\n     *                                                                                                                 // 3167\n     * toggle ordered list                                                                                             // 3168\n     *                                                                                                                 // 3169\n     * @type command                                                                                                   // 3170\n     */                                                                                                                // 3171\n    this.insertOrderedList = function () {                                                                             // 3172\n      this.toggleList('OL');                                                                                           // 3173\n    };                                                                                                                 // 3174\n                                                                                                                       // 3175\n    /**                                                                                                                // 3176\n     * @method insertUnorderedList                                                                                     // 3177\n     *                                                                                                                 // 3178\n     * toggle unordered list                                                                                           // 3179\n     *                                                                                                                 // 3180\n     * @type command                                                                                                   // 3181\n     */                                                                                                                // 3182\n    this.insertUnorderedList = function () {                                                                           // 3183\n      this.toggleList('UL');                                                                                           // 3184\n    };                                                                                                                 // 3185\n                                                                                                                       // 3186\n    /**                                                                                                                // 3187\n     * @method indent                                                                                                  // 3188\n     *                                                                                                                 // 3189\n     * indent                                                                                                          // 3190\n     *                                                                                                                 // 3191\n     * @type command                                                                                                   // 3192\n     */                                                                                                                // 3193\n    this.indent = function () {                                                                                        // 3194\n      var self = this;                                                                                                 // 3195\n      var rng = range.create().wrapBodyInlineWithPara();                                                               // 3196\n                                                                                                                       // 3197\n      var paras = rng.nodes(dom.isPara, { includeAncestor: true });                                                    // 3198\n      var clustereds = list.clusterBy(paras, func.peq2('parentNode'));                                                 // 3199\n                                                                                                                       // 3200\n      $.each(clustereds, function (idx, paras) {                                                                       // 3201\n        var head = list.head(paras);                                                                                   // 3202\n        if (dom.isLi(head)) {                                                                                          // 3203\n          self.wrapList(paras, head.parentNode.nodeName);                                                              // 3204\n        } else {                                                                                                       // 3205\n          $.each(paras, function (idx, para) {                                                                         // 3206\n            $(para).css('marginLeft', function (idx, val) {                                                            // 3207\n              return (parseInt(val, 10) || 0) + 25;                                                                    // 3208\n            });                                                                                                        // 3209\n          });                                                                                                          // 3210\n        }                                                                                                              // 3211\n      });                                                                                                              // 3212\n                                                                                                                       // 3213\n      rng.select();                                                                                                    // 3214\n    };                                                                                                                 // 3215\n                                                                                                                       // 3216\n    /**                                                                                                                // 3217\n     * @method outdent                                                                                                 // 3218\n     *                                                                                                                 // 3219\n     * outdent                                                                                                         // 3220\n     *                                                                                                                 // 3221\n     * @type command                                                                                                   // 3222\n     */                                                                                                                // 3223\n    this.outdent = function () {                                                                                       // 3224\n      var self = this;                                                                                                 // 3225\n      var rng = range.create().wrapBodyInlineWithPara();                                                               // 3226\n                                                                                                                       // 3227\n      var paras = rng.nodes(dom.isPara, { includeAncestor: true });                                                    // 3228\n      var clustereds = list.clusterBy(paras, func.peq2('parentNode'));                                                 // 3229\n                                                                                                                       // 3230\n      $.each(clustereds, function (idx, paras) {                                                                       // 3231\n        var head = list.head(paras);                                                                                   // 3232\n        if (dom.isLi(head)) {                                                                                          // 3233\n          self.releaseList([paras]);                                                                                   // 3234\n        } else {                                                                                                       // 3235\n          $.each(paras, function (idx, para) {                                                                         // 3236\n            $(para).css('marginLeft', function (idx, val) {                                                            // 3237\n              val = (parseInt(val, 10) || 0);                                                                          // 3238\n              return val > 25 ? val - 25 : '';                                                                         // 3239\n            });                                                                                                        // 3240\n          });                                                                                                          // 3241\n        }                                                                                                              // 3242\n      });                                                                                                              // 3243\n                                                                                                                       // 3244\n      rng.select();                                                                                                    // 3245\n    };                                                                                                                 // 3246\n                                                                                                                       // 3247\n    /**                                                                                                                // 3248\n     * @method toggleList                                                                                              // 3249\n     *                                                                                                                 // 3250\n     * toggle list                                                                                                     // 3251\n     *                                                                                                                 // 3252\n     * @param {String} listName - OL or UL                                                                             // 3253\n     */                                                                                                                // 3254\n    this.toggleList = function (listName) {                                                                            // 3255\n      var self = this;                                                                                                 // 3256\n      var rng = range.create().wrapBodyInlineWithPara();                                                               // 3257\n                                                                                                                       // 3258\n      var paras = rng.nodes(dom.isPara, { includeAncestor: true });                                                    // 3259\n      var bookmark = rng.paraBookmark(paras);                                                                          // 3260\n      var clustereds = list.clusterBy(paras, func.peq2('parentNode'));                                                 // 3261\n                                                                                                                       // 3262\n      // paragraph to list                                                                                             // 3263\n      if (list.find(paras, dom.isPurePara)) {                                                                          // 3264\n        var wrappedParas = [];                                                                                         // 3265\n        $.each(clustereds, function (idx, paras) {                                                                     // 3266\n          wrappedParas = wrappedParas.concat(self.wrapList(paras, listName));                                          // 3267\n        });                                                                                                            // 3268\n        paras = wrappedParas;                                                                                          // 3269\n      // list to paragraph or change list style                                                                        // 3270\n      } else {                                                                                                         // 3271\n        var diffLists = rng.nodes(dom.isList, {                                                                        // 3272\n          includeAncestor: true                                                                                        // 3273\n        }).filter(function (listNode) {                                                                                // 3274\n          return !$.nodeName(listNode, listName);                                                                      // 3275\n        });                                                                                                            // 3276\n                                                                                                                       // 3277\n        if (diffLists.length) {                                                                                        // 3278\n          $.each(diffLists, function (idx, listNode) {                                                                 // 3279\n            dom.replace(listNode, listName);                                                                           // 3280\n          });                                                                                                          // 3281\n        } else {                                                                                                       // 3282\n          paras = this.releaseList(clustereds, true);                                                                  // 3283\n        }                                                                                                              // 3284\n      }                                                                                                                // 3285\n                                                                                                                       // 3286\n      range.createFromParaBookmark(bookmark, paras).select();                                                          // 3287\n    };                                                                                                                 // 3288\n                                                                                                                       // 3289\n    /**                                                                                                                // 3290\n     * @method wrapList                                                                                                // 3291\n     *                                                                                                                 // 3292\n     * @param {Node[]} paras                                                                                           // 3293\n     * @param {String} listName                                                                                        // 3294\n     * @return {Node[]}                                                                                                // 3295\n     */                                                                                                                // 3296\n    this.wrapList = function (paras, listName) {                                                                       // 3297\n      var head = list.head(paras);                                                                                     // 3298\n      var last = list.last(paras);                                                                                     // 3299\n                                                                                                                       // 3300\n      var prevList = dom.isList(head.previousSibling) && head.previousSibling;                                         // 3301\n      var nextList = dom.isList(last.nextSibling) && last.nextSibling;                                                 // 3302\n                                                                                                                       // 3303\n      var listNode = prevList || dom.insertAfter(dom.create(listName || 'UL'), last);                                  // 3304\n                                                                                                                       // 3305\n      // P to LI                                                                                                       // 3306\n      paras = paras.map(function (para) {                                                                              // 3307\n        return dom.isPurePara(para) ? dom.replace(para, 'LI') : para;                                                  // 3308\n      });                                                                                                              // 3309\n                                                                                                                       // 3310\n      // append to list(<ul>, <ol>)                                                                                    // 3311\n      dom.appendChildNodes(listNode, paras);                                                                           // 3312\n                                                                                                                       // 3313\n      if (nextList) {                                                                                                  // 3314\n        dom.appendChildNodes(listNode, list.from(nextList.childNodes));                                                // 3315\n        dom.remove(nextList);                                                                                          // 3316\n      }                                                                                                                // 3317\n                                                                                                                       // 3318\n      return paras;                                                                                                    // 3319\n    };                                                                                                                 // 3320\n                                                                                                                       // 3321\n    /**                                                                                                                // 3322\n     * @method releaseList                                                                                             // 3323\n     *                                                                                                                 // 3324\n     * @param {Array[]} clustereds                                                                                     // 3325\n     * @param {Boolean} isEscapseToBody                                                                                // 3326\n     * @return {Node[]}                                                                                                // 3327\n     */                                                                                                                // 3328\n    this.releaseList = function (clustereds, isEscapseToBody) {                                                        // 3329\n      var releasedParas = [];                                                                                          // 3330\n                                                                                                                       // 3331\n      $.each(clustereds, function (idx, paras) {                                                                       // 3332\n        var head = list.head(paras);                                                                                   // 3333\n        var last = list.last(paras);                                                                                   // 3334\n                                                                                                                       // 3335\n        var headList = isEscapseToBody ? dom.lastAncestor(head, dom.isList) :                                          // 3336\n                                         head.parentNode;                                                              // 3337\n        var lastList = headList.childNodes.length > 1 ? dom.splitTree(headList, {                                      // 3338\n          node: last.parentNode,                                                                                       // 3339\n          offset: dom.position(last) + 1                                                                               // 3340\n        }, {                                                                                                           // 3341\n          isSkipPaddingBlankHTML: true                                                                                 // 3342\n        }) : null;                                                                                                     // 3343\n                                                                                                                       // 3344\n        var middleList = dom.splitTree(headList, {                                                                     // 3345\n          node: head.parentNode,                                                                                       // 3346\n          offset: dom.position(head)                                                                                   // 3347\n        }, {                                                                                                           // 3348\n          isSkipPaddingBlankHTML: true                                                                                 // 3349\n        });                                                                                                            // 3350\n                                                                                                                       // 3351\n        paras = isEscapseToBody ? dom.listDescendant(middleList, dom.isLi) :                                           // 3352\n                                  list.from(middleList.childNodes).filter(dom.isLi);                                   // 3353\n                                                                                                                       // 3354\n        // LI to P                                                                                                     // 3355\n        if (isEscapseToBody || !dom.isList(headList.parentNode)) {                                                     // 3356\n          paras = paras.map(function (para) {                                                                          // 3357\n            return dom.replace(para, 'P');                                                                             // 3358\n          });                                                                                                          // 3359\n        }                                                                                                              // 3360\n                                                                                                                       // 3361\n        $.each(list.from(paras).reverse(), function (idx, para) {                                                      // 3362\n          dom.insertAfter(para, headList);                                                                             // 3363\n        });                                                                                                            // 3364\n                                                                                                                       // 3365\n        // remove empty lists                                                                                          // 3366\n        var rootLists = list.compact([headList, middleList, lastList]);                                                // 3367\n        $.each(rootLists, function (idx, rootList) {                                                                   // 3368\n          var listNodes = [rootList].concat(dom.listDescendant(rootList, dom.isList));                                 // 3369\n          $.each(listNodes.reverse(), function (idx, listNode) {                                                       // 3370\n            if (!dom.nodeLength(listNode)) {                                                                           // 3371\n              dom.remove(listNode, true);                                                                              // 3372\n            }                                                                                                          // 3373\n          });                                                                                                          // 3374\n        });                                                                                                            // 3375\n                                                                                                                       // 3376\n        releasedParas = releasedParas.concat(paras);                                                                   // 3377\n      });                                                                                                              // 3378\n                                                                                                                       // 3379\n      return releasedParas;                                                                                            // 3380\n    };                                                                                                                 // 3381\n  };                                                                                                                   // 3382\n                                                                                                                       // 3383\n                                                                                                                       // 3384\n  /**                                                                                                                  // 3385\n   * @class editing.Typing                                                                                             // 3386\n   *                                                                                                                   // 3387\n   * Typing                                                                                                            // 3388\n   *                                                                                                                   // 3389\n   */                                                                                                                  // 3390\n  var Typing = function () {                                                                                           // 3391\n                                                                                                                       // 3392\n    // a Bullet instance to toggle lists off                                                                           // 3393\n    var bullet = new Bullet();                                                                                         // 3394\n                                                                                                                       // 3395\n    /**                                                                                                                // 3396\n     * insert tab                                                                                                      // 3397\n     *                                                                                                                 // 3398\n     * @param {jQuery} $editable                                                                                       // 3399\n     * @param {WrappedRange} rng                                                                                       // 3400\n     * @param {Number} tabsize                                                                                         // 3401\n     */                                                                                                                // 3402\n    this.insertTab = function ($editable, rng, tabsize) {                                                              // 3403\n      var tab = dom.createText(new Array(tabsize + 1).join(dom.NBSP_CHAR));                                            // 3404\n      rng = rng.deleteContents();                                                                                      // 3405\n      rng.insertNode(tab, true);                                                                                       // 3406\n                                                                                                                       // 3407\n      rng = range.create(tab, tabsize);                                                                                // 3408\n      rng.select();                                                                                                    // 3409\n    };                                                                                                                 // 3410\n                                                                                                                       // 3411\n    /**                                                                                                                // 3412\n     * insert paragraph                                                                                                // 3413\n     */                                                                                                                // 3414\n    this.insertParagraph = function () {                                                                               // 3415\n      var rng = range.create();                                                                                        // 3416\n                                                                                                                       // 3417\n      // deleteContents on range.                                                                                      // 3418\n      rng = rng.deleteContents();                                                                                      // 3419\n                                                                                                                       // 3420\n      // Wrap range if it needs to be wrapped by paragraph                                                             // 3421\n      rng = rng.wrapBodyInlineWithPara();                                                                              // 3422\n                                                                                                                       // 3423\n      // finding paragraph                                                                                             // 3424\n      var splitRoot = dom.ancestor(rng.sc, dom.isPara);                                                                // 3425\n                                                                                                                       // 3426\n      var nextPara;                                                                                                    // 3427\n      // on paragraph: split paragraph                                                                                 // 3428\n      if (splitRoot) {                                                                                                 // 3429\n        // if it is an empty line with li                                                                              // 3430\n        if (dom.isEmpty(splitRoot) && dom.isLi(splitRoot)) {                                                           // 3431\n          // disable UL/OL and escape!                                                                                 // 3432\n          bullet.toggleList(splitRoot.parentNode.nodeName);                                                            // 3433\n          return;                                                                                                      // 3434\n        // if new line has content (not a line break)                                                                  // 3435\n        } else {                                                                                                       // 3436\n          nextPara = dom.splitTree(splitRoot, rng.getStartPoint());                                                    // 3437\n                                                                                                                       // 3438\n          var emptyAnchors = dom.listDescendant(splitRoot, dom.isEmptyAnchor);                                         // 3439\n          emptyAnchors = emptyAnchors.concat(dom.listDescendant(nextPara, dom.isEmptyAnchor));                         // 3440\n                                                                                                                       // 3441\n          $.each(emptyAnchors, function (idx, anchor) {                                                                // 3442\n            dom.remove(anchor);                                                                                        // 3443\n          });                                                                                                          // 3444\n        }                                                                                                              // 3445\n      // no paragraph: insert empty paragraph                                                                          // 3446\n      } else {                                                                                                         // 3447\n        var next = rng.sc.childNodes[rng.so];                                                                          // 3448\n        nextPara = $(dom.emptyPara)[0];                                                                                // 3449\n        if (next) {                                                                                                    // 3450\n          rng.sc.insertBefore(nextPara, next);                                                                         // 3451\n        } else {                                                                                                       // 3452\n          rng.sc.appendChild(nextPara);                                                                                // 3453\n        }                                                                                                              // 3454\n      }                                                                                                                // 3455\n                                                                                                                       // 3456\n      range.create(nextPara, 0).normalize().select();                                                                  // 3457\n                                                                                                                       // 3458\n    };                                                                                                                 // 3459\n                                                                                                                       // 3460\n  };                                                                                                                   // 3461\n                                                                                                                       // 3462\n  /**                                                                                                                  // 3463\n   * @class editing.Table                                                                                              // 3464\n   *                                                                                                                   // 3465\n   * Table                                                                                                             // 3466\n   *                                                                                                                   // 3467\n   */                                                                                                                  // 3468\n  var Table = function () {                                                                                            // 3469\n    /**                                                                                                                // 3470\n     * handle tab key                                                                                                  // 3471\n     *                                                                                                                 // 3472\n     * @param {WrappedRange} rng                                                                                       // 3473\n     * @param {Boolean} isShift                                                                                        // 3474\n     */                                                                                                                // 3475\n    this.tab = function (rng, isShift) {                                                                               // 3476\n      var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);                                                       // 3477\n      var table = dom.ancestor(cell, dom.isTable);                                                                     // 3478\n      var cells = dom.listDescendant(table, dom.isCell);                                                               // 3479\n                                                                                                                       // 3480\n      var nextCell = list[isShift ? 'prev' : 'next'](cells, cell);                                                     // 3481\n      if (nextCell) {                                                                                                  // 3482\n        range.create(nextCell, 0).select();                                                                            // 3483\n      }                                                                                                                // 3484\n    };                                                                                                                 // 3485\n                                                                                                                       // 3486\n    /**                                                                                                                // 3487\n     * create empty table element                                                                                      // 3488\n     *                                                                                                                 // 3489\n     * @param {Number} rowCount                                                                                        // 3490\n     * @param {Number} colCount                                                                                        // 3491\n     * @return {Node}                                                                                                  // 3492\n     */                                                                                                                // 3493\n    this.createTable = function (colCount, rowCount) {                                                                 // 3494\n      var tds = [], tdHTML;                                                                                            // 3495\n      for (var idxCol = 0; idxCol < colCount; idxCol++) {                                                              // 3496\n        tds.push('<td>' + dom.blank + '</td>');                                                                        // 3497\n      }                                                                                                                // 3498\n      tdHTML = tds.join('');                                                                                           // 3499\n                                                                                                                       // 3500\n      var trs = [], trHTML;                                                                                            // 3501\n      for (var idxRow = 0; idxRow < rowCount; idxRow++) {                                                              // 3502\n        trs.push('<tr>' + tdHTML + '</tr>');                                                                           // 3503\n      }                                                                                                                // 3504\n      trHTML = trs.join('');                                                                                           // 3505\n      return $('<table class=\"table table-bordered\">' + trHTML + '</table>')[0];                                       // 3506\n    };                                                                                                                 // 3507\n  };                                                                                                                   // 3508\n                                                                                                                       // 3509\n                                                                                                                       // 3510\n  var KEY_BOGUS = 'bogus';                                                                                             // 3511\n                                                                                                                       // 3512\n  /**                                                                                                                  // 3513\n   * @class editing.Editor                                                                                             // 3514\n   *                                                                                                                   // 3515\n   * Editor                                                                                                            // 3516\n   *                                                                                                                   // 3517\n   */                                                                                                                  // 3518\n  var Editor = function (handler) {                                                                                    // 3519\n                                                                                                                       // 3520\n    var self = this;                                                                                                   // 3521\n    var style = new Style();                                                                                           // 3522\n    var table = new Table();                                                                                           // 3523\n    var typing = new Typing();                                                                                         // 3524\n    var bullet = new Bullet();                                                                                         // 3525\n                                                                                                                       // 3526\n    /**                                                                                                                // 3527\n     * @method createRange                                                                                             // 3528\n     *                                                                                                                 // 3529\n     * create range                                                                                                    // 3530\n     *                                                                                                                 // 3531\n     * @param {jQuery} $editable                                                                                       // 3532\n     * @return {WrappedRange}                                                                                          // 3533\n     */                                                                                                                // 3534\n    this.createRange = function ($editable) {                                                                          // 3535\n      this.focus($editable);                                                                                           // 3536\n      return range.create();                                                                                           // 3537\n    };                                                                                                                 // 3538\n                                                                                                                       // 3539\n    /**                                                                                                                // 3540\n     * @method saveRange                                                                                               // 3541\n     *                                                                                                                 // 3542\n     * save current range                                                                                              // 3543\n     *                                                                                                                 // 3544\n     * @param {jQuery} $editable                                                                                       // 3545\n     * @param {Boolean} [thenCollapse=false]                                                                           // 3546\n     */                                                                                                                // 3547\n    this.saveRange = function ($editable, thenCollapse) {                                                              // 3548\n      this.focus($editable);                                                                                           // 3549\n      $editable.data('range', range.create());                                                                         // 3550\n      if (thenCollapse) {                                                                                              // 3551\n        range.create().collapse().select();                                                                            // 3552\n      }                                                                                                                // 3553\n    };                                                                                                                 // 3554\n                                                                                                                       // 3555\n    /**                                                                                                                // 3556\n     * @method saveRange                                                                                               // 3557\n     *                                                                                                                 // 3558\n     * save current node list to $editable.data('childNodes')                                                          // 3559\n     *                                                                                                                 // 3560\n     * @param {jQuery} $editable                                                                                       // 3561\n     */                                                                                                                // 3562\n    this.saveNode = function ($editable) {                                                                             // 3563\n      // copy child node reference                                                                                     // 3564\n      var copy = [];                                                                                                   // 3565\n      for (var key  = 0, len = $editable[0].childNodes.length; key < len; key++) {                                     // 3566\n        copy.push($editable[0].childNodes[key]);                                                                       // 3567\n      }                                                                                                                // 3568\n      $editable.data('childNodes', copy);                                                                              // 3569\n    };                                                                                                                 // 3570\n                                                                                                                       // 3571\n    /**                                                                                                                // 3572\n     * @method restoreRange                                                                                            // 3573\n     *                                                                                                                 // 3574\n     * restore lately range                                                                                            // 3575\n     *                                                                                                                 // 3576\n     * @param {jQuery} $editable                                                                                       // 3577\n     */                                                                                                                // 3578\n    this.restoreRange = function ($editable) {                                                                         // 3579\n      var rng = $editable.data('range');                                                                               // 3580\n      if (rng) {                                                                                                       // 3581\n        rng.select();                                                                                                  // 3582\n        this.focus($editable);                                                                                         // 3583\n      }                                                                                                                // 3584\n    };                                                                                                                 // 3585\n                                                                                                                       // 3586\n    /**                                                                                                                // 3587\n     * @method restoreNode                                                                                             // 3588\n     *                                                                                                                 // 3589\n     * restore lately node list                                                                                        // 3590\n     *                                                                                                                 // 3591\n     * @param {jQuery} $editable                                                                                       // 3592\n     */                                                                                                                // 3593\n    this.restoreNode = function ($editable) {                                                                          // 3594\n      $editable.html('');                                                                                              // 3595\n      var child = $editable.data('childNodes');                                                                        // 3596\n      for (var index = 0, len = child.length; index < len; index++) {                                                  // 3597\n        $editable[0].appendChild(child[index]);                                                                        // 3598\n      }                                                                                                                // 3599\n    };                                                                                                                 // 3600\n                                                                                                                       // 3601\n    /**                                                                                                                // 3602\n     * @method currentStyle                                                                                            // 3603\n     *                                                                                                                 // 3604\n     * current style                                                                                                   // 3605\n     *                                                                                                                 // 3606\n     * @param {Node} target                                                                                            // 3607\n     * @return {Object|Boolean} unfocus                                                                                // 3608\n     */                                                                                                                // 3609\n    this.currentStyle = function (target) {                                                                            // 3610\n      var rng = range.create();                                                                                        // 3611\n      var styleInfo =  rng && rng.isOnEditable() ? style.current(rng.normalize()) : {};                                // 3612\n      if (dom.isImg(target)) {                                                                                         // 3613\n        styleInfo.image = target;                                                                                      // 3614\n      }                                                                                                                // 3615\n      return styleInfo;                                                                                                // 3616\n    };                                                                                                                 // 3617\n                                                                                                                       // 3618\n    /**                                                                                                                // 3619\n     * style from node                                                                                                 // 3620\n     *                                                                                                                 // 3621\n     * @param {jQuery} $node                                                                                           // 3622\n     * @return {Object}                                                                                                // 3623\n     */                                                                                                                // 3624\n    this.styleFromNode = function ($node) {                                                                            // 3625\n      return style.fromNode($node);                                                                                    // 3626\n    };                                                                                                                 // 3627\n                                                                                                                       // 3628\n    var triggerOnBeforeChange = function ($editable) {                                                                 // 3629\n      var $holder = dom.makeLayoutInfo($editable).holder();                                                            // 3630\n      handler.bindCustomEvent(                                                                                         // 3631\n        $holder, $editable.data('callbacks'), 'before.command'                                                         // 3632\n      )($editable.html(), $editable);                                                                                  // 3633\n    };                                                                                                                 // 3634\n                                                                                                                       // 3635\n    var triggerOnChange = function ($editable) {                                                                       // 3636\n      var $holder = dom.makeLayoutInfo($editable).holder();                                                            // 3637\n      handler.bindCustomEvent(                                                                                         // 3638\n        $holder, $editable.data('callbacks'), 'change'                                                                 // 3639\n      )($editable.html(), $editable);                                                                                  // 3640\n    };                                                                                                                 // 3641\n                                                                                                                       // 3642\n    /**                                                                                                                // 3643\n     * @method undo                                                                                                    // 3644\n     * undo                                                                                                            // 3645\n     * @param {jQuery} $editable                                                                                       // 3646\n     */                                                                                                                // 3647\n    this.undo = function ($editable) {                                                                                 // 3648\n      triggerOnBeforeChange($editable);                                                                                // 3649\n      $editable.data('NoteHistory').undo();                                                                            // 3650\n      triggerOnChange($editable);                                                                                      // 3651\n    };                                                                                                                 // 3652\n                                                                                                                       // 3653\n    /**                                                                                                                // 3654\n     * @method redo                                                                                                    // 3655\n     * redo                                                                                                            // 3656\n     * @param {jQuery} $editable                                                                                       // 3657\n     */                                                                                                                // 3658\n    this.redo = function ($editable) {                                                                                 // 3659\n      triggerOnBeforeChange($editable);                                                                                // 3660\n      $editable.data('NoteHistory').redo();                                                                            // 3661\n      triggerOnChange($editable);                                                                                      // 3662\n    };                                                                                                                 // 3663\n                                                                                                                       // 3664\n    /**                                                                                                                // 3665\n     * @method beforeCommand                                                                                           // 3666\n     * before command                                                                                                  // 3667\n     * @param {jQuery} $editable                                                                                       // 3668\n     */                                                                                                                // 3669\n    var beforeCommand = this.beforeCommand = function ($editable) {                                                    // 3670\n      triggerOnBeforeChange($editable);                                                                                // 3671\n      // keep focus on editable before command execution                                                               // 3672\n      self.focus($editable);                                                                                           // 3673\n    };                                                                                                                 // 3674\n                                                                                                                       // 3675\n    /**                                                                                                                // 3676\n     * @method afterCommand                                                                                            // 3677\n     * after command                                                                                                   // 3678\n     * @param {jQuery} $editable                                                                                       // 3679\n     * @param {Boolean} isPreventTrigger                                                                               // 3680\n     */                                                                                                                // 3681\n    var afterCommand = this.afterCommand = function ($editable, isPreventTrigger) {                                    // 3682\n      $editable.data('NoteHistory').recordUndo();                                                                      // 3683\n      if (!isPreventTrigger) {                                                                                         // 3684\n        triggerOnChange($editable);                                                                                    // 3685\n      }                                                                                                                // 3686\n    };                                                                                                                 // 3687\n                                                                                                                       // 3688\n    /**                                                                                                                // 3689\n     * @method bold                                                                                                    // 3690\n     * @param {jQuery} $editable                                                                                       // 3691\n     * @param {Mixed} value                                                                                            // 3692\n     */                                                                                                                // 3693\n                                                                                                                       // 3694\n    /**                                                                                                                // 3695\n     * @method italic                                                                                                  // 3696\n     * @param {jQuery} $editable                                                                                       // 3697\n     * @param {Mixed} value                                                                                            // 3698\n     */                                                                                                                // 3699\n                                                                                                                       // 3700\n    /**                                                                                                                // 3701\n     * @method underline                                                                                               // 3702\n     * @param {jQuery} $editable                                                                                       // 3703\n     * @param {Mixed} value                                                                                            // 3704\n     */                                                                                                                // 3705\n                                                                                                                       // 3706\n    /**                                                                                                                // 3707\n     * @method strikethrough                                                                                           // 3708\n     * @param {jQuery} $editable                                                                                       // 3709\n     * @param {Mixed} value                                                                                            // 3710\n     */                                                                                                                // 3711\n                                                                                                                       // 3712\n    /**                                                                                                                // 3713\n     * @method formatBlock                                                                                             // 3714\n     * @param {jQuery} $editable                                                                                       // 3715\n     * @param {Mixed} value                                                                                            // 3716\n     */                                                                                                                // 3717\n                                                                                                                       // 3718\n    /**                                                                                                                // 3719\n     * @method superscript                                                                                             // 3720\n     * @param {jQuery} $editable                                                                                       // 3721\n     * @param {Mixed} value                                                                                            // 3722\n     */                                                                                                                // 3723\n                                                                                                                       // 3724\n    /**                                                                                                                // 3725\n     * @method subscript                                                                                               // 3726\n     * @param {jQuery} $editable                                                                                       // 3727\n     * @param {Mixed} value                                                                                            // 3728\n     */                                                                                                                // 3729\n                                                                                                                       // 3730\n    /**                                                                                                                // 3731\n     * @method justifyLeft                                                                                             // 3732\n     * @param {jQuery} $editable                                                                                       // 3733\n     * @param {Mixed} value                                                                                            // 3734\n     */                                                                                                                // 3735\n                                                                                                                       // 3736\n    /**                                                                                                                // 3737\n     * @method justifyCenter                                                                                           // 3738\n     * @param {jQuery} $editable                                                                                       // 3739\n     * @param {Mixed} value                                                                                            // 3740\n     */                                                                                                                // 3741\n                                                                                                                       // 3742\n    /**                                                                                                                // 3743\n     * @method justifyRight                                                                                            // 3744\n     * @param {jQuery} $editable                                                                                       // 3745\n     * @param {Mixed} value                                                                                            // 3746\n     */                                                                                                                // 3747\n                                                                                                                       // 3748\n    /**                                                                                                                // 3749\n     * @method justifyFull                                                                                             // 3750\n     * @param {jQuery} $editable                                                                                       // 3751\n     * @param {Mixed} value                                                                                            // 3752\n     */                                                                                                                // 3753\n                                                                                                                       // 3754\n    /**                                                                                                                // 3755\n     * @method formatBlock                                                                                             // 3756\n     * @param {jQuery} $editable                                                                                       // 3757\n     * @param {Mixed} value                                                                                            // 3758\n     */                                                                                                                // 3759\n                                                                                                                       // 3760\n    /**                                                                                                                // 3761\n     * @method removeFormat                                                                                            // 3762\n     * @param {jQuery} $editable                                                                                       // 3763\n     * @param {Mixed} value                                                                                            // 3764\n     */                                                                                                                // 3765\n                                                                                                                       // 3766\n    /**                                                                                                                // 3767\n     * @method backColor                                                                                               // 3768\n     * @param {jQuery} $editable                                                                                       // 3769\n     * @param {Mixed} value                                                                                            // 3770\n     */                                                                                                                // 3771\n                                                                                                                       // 3772\n    /**                                                                                                                // 3773\n     * @method foreColor                                                                                               // 3774\n     * @param {jQuery} $editable                                                                                       // 3775\n     * @param {Mixed} value                                                                                            // 3776\n     */                                                                                                                // 3777\n                                                                                                                       // 3778\n    /**                                                                                                                // 3779\n     * @method insertHorizontalRule                                                                                    // 3780\n     * @param {jQuery} $editable                                                                                       // 3781\n     * @param {Mixed} value                                                                                            // 3782\n     */                                                                                                                // 3783\n                                                                                                                       // 3784\n    /**                                                                                                                // 3785\n     * @method fontName                                                                                                // 3786\n     *                                                                                                                 // 3787\n     * change font name                                                                                                // 3788\n     *                                                                                                                 // 3789\n     * @param {jQuery} $editable                                                                                       // 3790\n     * @param {Mixed} value                                                                                            // 3791\n     */                                                                                                                // 3792\n                                                                                                                       // 3793\n    /* jshint ignore:start */                                                                                          // 3794\n    // native commands(with execCommand), generate function for execCommand                                            // 3795\n    var commands = ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript',                        // 3796\n                    'justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull',                                     // 3797\n                    'formatBlock', 'removeFormat',                                                                     // 3798\n                    'backColor', 'foreColor', 'fontName'];                                                             // 3799\n                                                                                                                       // 3800\n    for (var idx = 0, len = commands.length; idx < len; idx ++) {                                                      // 3801\n      this[commands[idx]] = (function (sCmd) {                                                                         // 3802\n        return function ($editable, value) {                                                                           // 3803\n          beforeCommand($editable);                                                                                    // 3804\n                                                                                                                       // 3805\n          document.execCommand(sCmd, false, value);                                                                    // 3806\n                                                                                                                       // 3807\n          afterCommand($editable, true);                                                                               // 3808\n        };                                                                                                             // 3809\n      })(commands[idx]);                                                                                               // 3810\n    }                                                                                                                  // 3811\n    /* jshint ignore:end */                                                                                            // 3812\n                                                                                                                       // 3813\n    /**                                                                                                                // 3814\n     * @method tab                                                                                                     // 3815\n     *                                                                                                                 // 3816\n     * handle tab key                                                                                                  // 3817\n     *                                                                                                                 // 3818\n     * @param {jQuery} $editable                                                                                       // 3819\n     * @param {Object} options                                                                                         // 3820\n     */                                                                                                                // 3821\n    this.tab = function ($editable, options) {                                                                         // 3822\n      var rng = this.createRange($editable);                                                                           // 3823\n      if (rng.isCollapsed() && rng.isOnCell()) {                                                                       // 3824\n        table.tab(rng);                                                                                                // 3825\n      } else {                                                                                                         // 3826\n        beforeCommand($editable);                                                                                      // 3827\n        typing.insertTab($editable, rng, options.tabsize);                                                             // 3828\n        afterCommand($editable);                                                                                       // 3829\n      }                                                                                                                // 3830\n    };                                                                                                                 // 3831\n                                                                                                                       // 3832\n    /**                                                                                                                // 3833\n     * @method untab                                                                                                   // 3834\n     *                                                                                                                 // 3835\n     * handle shift+tab key                                                                                            // 3836\n     *                                                                                                                 // 3837\n     */                                                                                                                // 3838\n    this.untab = function ($editable) {                                                                                // 3839\n      var rng = this.createRange($editable);                                                                           // 3840\n      if (rng.isCollapsed() && rng.isOnCell()) {                                                                       // 3841\n        table.tab(rng, true);                                                                                          // 3842\n      }                                                                                                                // 3843\n    };                                                                                                                 // 3844\n                                                                                                                       // 3845\n    /**                                                                                                                // 3846\n     * @method insertParagraph                                                                                         // 3847\n     *                                                                                                                 // 3848\n     * insert paragraph                                                                                                // 3849\n     *                                                                                                                 // 3850\n     * @param {Node} $editable                                                                                         // 3851\n     */                                                                                                                // 3852\n    this.insertParagraph = function ($editable) {                                                                      // 3853\n      beforeCommand($editable);                                                                                        // 3854\n      typing.insertParagraph($editable);                                                                               // 3855\n      afterCommand($editable);                                                                                         // 3856\n    };                                                                                                                 // 3857\n                                                                                                                       // 3858\n    /**                                                                                                                // 3859\n     * @method insertOrderedList                                                                                       // 3860\n     *                                                                                                                 // 3861\n     * @param {jQuery} $editable                                                                                       // 3862\n     */                                                                                                                // 3863\n    this.insertOrderedList = function ($editable) {                                                                    // 3864\n      beforeCommand($editable);                                                                                        // 3865\n      bullet.insertOrderedList($editable);                                                                             // 3866\n      afterCommand($editable);                                                                                         // 3867\n    };                                                                                                                 // 3868\n                                                                                                                       // 3869\n    /**                                                                                                                // 3870\n     * @param {jQuery} $editable                                                                                       // 3871\n     */                                                                                                                // 3872\n    this.insertUnorderedList = function ($editable) {                                                                  // 3873\n      beforeCommand($editable);                                                                                        // 3874\n      bullet.insertUnorderedList($editable);                                                                           // 3875\n      afterCommand($editable);                                                                                         // 3876\n    };                                                                                                                 // 3877\n                                                                                                                       // 3878\n    /**                                                                                                                // 3879\n     * @param {jQuery} $editable                                                                                       // 3880\n     */                                                                                                                // 3881\n    this.indent = function ($editable) {                                                                               // 3882\n      beforeCommand($editable);                                                                                        // 3883\n      bullet.indent($editable);                                                                                        // 3884\n      afterCommand($editable);                                                                                         // 3885\n    };                                                                                                                 // 3886\n                                                                                                                       // 3887\n    /**                                                                                                                // 3888\n     * @param {jQuery} $editable                                                                                       // 3889\n     */                                                                                                                // 3890\n    this.outdent = function ($editable) {                                                                              // 3891\n      beforeCommand($editable);                                                                                        // 3892\n      bullet.outdent($editable);                                                                                       // 3893\n      afterCommand($editable);                                                                                         // 3894\n    };                                                                                                                 // 3895\n                                                                                                                       // 3896\n    /**                                                                                                                // 3897\n     * insert image                                                                                                    // 3898\n     *                                                                                                                 // 3899\n     * @param {jQuery} $editable                                                                                       // 3900\n     * @param {String} sUrl                                                                                            // 3901\n     */                                                                                                                // 3902\n    this.insertImage = function ($editable, sUrl, filename) {                                                          // 3903\n      async.createImage(sUrl, filename).then(function ($image) {                                                       // 3904\n        beforeCommand($editable);                                                                                      // 3905\n        $image.css({                                                                                                   // 3906\n          display: '',                                                                                                 // 3907\n          width: Math.min($editable.width(), $image.width())                                                           // 3908\n        });                                                                                                            // 3909\n        range.create().insertNode($image[0]);                                                                          // 3910\n        range.createFromNodeAfter($image[0]).select();                                                                 // 3911\n        afterCommand($editable);                                                                                       // 3912\n      }).fail(function () {                                                                                            // 3913\n        var $holder = dom.makeLayoutInfo($editable).holder();                                                          // 3914\n        handler.bindCustomEvent(                                                                                       // 3915\n          $holder, $editable.data('callbacks'), 'image.upload.error'                                                   // 3916\n        )();                                                                                                           // 3917\n      });                                                                                                              // 3918\n    };                                                                                                                 // 3919\n                                                                                                                       // 3920\n    /**                                                                                                                // 3921\n     * @method insertNode                                                                                              // 3922\n     * insert node                                                                                                     // 3923\n     * @param {Node} $editable                                                                                         // 3924\n     * @param {Node} node                                                                                              // 3925\n     */                                                                                                                // 3926\n    this.insertNode = function ($editable, node) {                                                                     // 3927\n      beforeCommand($editable);                                                                                        // 3928\n      range.create().insertNode(node);                                                                                 // 3929\n      range.createFromNodeAfter(node).select();                                                                        // 3930\n      afterCommand($editable);                                                                                         // 3931\n    };                                                                                                                 // 3932\n                                                                                                                       // 3933\n    /**                                                                                                                // 3934\n     * insert text                                                                                                     // 3935\n     * @param {Node} $editable                                                                                         // 3936\n     * @param {String} text                                                                                            // 3937\n     */                                                                                                                // 3938\n    this.insertText = function ($editable, text) {                                                                     // 3939\n      beforeCommand($editable);                                                                                        // 3940\n      var textNode = range.create().insertNode(dom.createText(text));                                                  // 3941\n      range.create(textNode, dom.nodeLength(textNode)).select();                                                       // 3942\n      afterCommand($editable);                                                                                         // 3943\n    };                                                                                                                 // 3944\n                                                                                                                       // 3945\n    /**                                                                                                                // 3946\n     * paste HTML                                                                                                      // 3947\n     * @param {Node} $editable                                                                                         // 3948\n     * @param {String} markup                                                                                          // 3949\n     */                                                                                                                // 3950\n    this.pasteHTML = function ($editable, markup) {                                                                    // 3951\n      beforeCommand($editable);                                                                                        // 3952\n      var contents = range.create().pasteHTML(markup);                                                                 // 3953\n      range.createFromNodeAfter(list.last(contents)).select();                                                         // 3954\n      afterCommand($editable);                                                                                         // 3955\n    };                                                                                                                 // 3956\n                                                                                                                       // 3957\n    /**                                                                                                                // 3958\n     * formatBlock                                                                                                     // 3959\n     *                                                                                                                 // 3960\n     * @param {jQuery} $editable                                                                                       // 3961\n     * @param {String} tagName                                                                                         // 3962\n     */                                                                                                                // 3963\n    this.formatBlock = function ($editable, tagName) {                                                                 // 3964\n      beforeCommand($editable);                                                                                        // 3965\n      // [workaround] for MSIE, IE need `<`                                                                            // 3966\n      tagName = agent.isMSIE ? '<' + tagName + '>' : tagName;                                                          // 3967\n      document.execCommand('FormatBlock', false, tagName);                                                             // 3968\n      afterCommand($editable);                                                                                         // 3969\n    };                                                                                                                 // 3970\n                                                                                                                       // 3971\n    this.formatPara = function ($editable) {                                                                           // 3972\n      beforeCommand($editable);                                                                                        // 3973\n      this.formatBlock($editable, 'P');                                                                                // 3974\n      afterCommand($editable);                                                                                         // 3975\n    };                                                                                                                 // 3976\n                                                                                                                       // 3977\n    /* jshint ignore:start */                                                                                          // 3978\n    for (var idx = 1; idx <= 6; idx ++) {                                                                              // 3979\n      this['formatH' + idx] = function (idx) {                                                                         // 3980\n        return function ($editable) {                                                                                  // 3981\n          this.formatBlock($editable, 'H' + idx);                                                                      // 3982\n        };                                                                                                             // 3983\n      }(idx);                                                                                                          // 3984\n    };                                                                                                                 // 3985\n    /* jshint ignore:end */                                                                                            // 3986\n                                                                                                                       // 3987\n    /**                                                                                                                // 3988\n     * fontSize                                                                                                        // 3989\n     *                                                                                                                 // 3990\n     * @param {jQuery} $editable                                                                                       // 3991\n     * @param {String} value - px                                                                                      // 3992\n     */                                                                                                                // 3993\n    this.fontSize = function ($editable, value) {                                                                      // 3994\n      var rng = range.create();                                                                                        // 3995\n                                                                                                                       // 3996\n      if (rng.isCollapsed()) {                                                                                         // 3997\n        var spans = style.styleNodes(rng);                                                                             // 3998\n        var firstSpan = list.head(spans);                                                                              // 3999\n                                                                                                                       // 4000\n        $(spans).css({                                                                                                 // 4001\n          'font-size': value + 'px'                                                                                    // 4002\n        });                                                                                                            // 4003\n                                                                                                                       // 4004\n        // [workaround] added styled bogus span for style                                                              // 4005\n        //  - also bogus character needed for cursor position                                                          // 4006\n        if (firstSpan && !dom.nodeLength(firstSpan)) {                                                                 // 4007\n          firstSpan.innerHTML = dom.ZERO_WIDTH_NBSP_CHAR;                                                              // 4008\n          range.createFromNodeAfter(firstSpan.firstChild).select();                                                    // 4009\n          $editable.data(KEY_BOGUS, firstSpan);                                                                        // 4010\n        }                                                                                                              // 4011\n      } else {                                                                                                         // 4012\n        beforeCommand($editable);                                                                                      // 4013\n        $(style.styleNodes(rng)).css({                                                                                 // 4014\n          'font-size': value + 'px'                                                                                    // 4015\n        });                                                                                                            // 4016\n        afterCommand($editable);                                                                                       // 4017\n      }                                                                                                                // 4018\n    };                                                                                                                 // 4019\n                                                                                                                       // 4020\n    /**                                                                                                                // 4021\n     * insert horizontal rule                                                                                          // 4022\n     * @param {jQuery} $editable                                                                                       // 4023\n     */                                                                                                                // 4024\n    this.insertHorizontalRule = function ($editable) {                                                                 // 4025\n      beforeCommand($editable);                                                                                        // 4026\n                                                                                                                       // 4027\n      var rng = range.create();                                                                                        // 4028\n      var hrNode = rng.insertNode($('<HR/>')[0]);                                                                      // 4029\n      if (hrNode.nextSibling) {                                                                                        // 4030\n        range.create(hrNode.nextSibling, 0).normalize().select();                                                      // 4031\n      }                                                                                                                // 4032\n                                                                                                                       // 4033\n      afterCommand($editable);                                                                                         // 4034\n    };                                                                                                                 // 4035\n                                                                                                                       // 4036\n    /**                                                                                                                // 4037\n     * remove bogus node and character                                                                                 // 4038\n     */                                                                                                                // 4039\n    this.removeBogus = function ($editable) {                                                                          // 4040\n      var bogusNode = $editable.data(KEY_BOGUS);                                                                       // 4041\n      if (!bogusNode) {                                                                                                // 4042\n        return;                                                                                                        // 4043\n      }                                                                                                                // 4044\n                                                                                                                       // 4045\n      var textNode = list.find(list.from(bogusNode.childNodes), dom.isText);                                           // 4046\n                                                                                                                       // 4047\n      var bogusCharIdx = textNode.nodeValue.indexOf(dom.ZERO_WIDTH_NBSP_CHAR);                                         // 4048\n      if (bogusCharIdx !== -1) {                                                                                       // 4049\n        textNode.deleteData(bogusCharIdx, 1);                                                                          // 4050\n      }                                                                                                                // 4051\n                                                                                                                       // 4052\n      if (dom.isEmpty(bogusNode)) {                                                                                    // 4053\n        dom.remove(bogusNode);                                                                                         // 4054\n      }                                                                                                                // 4055\n                                                                                                                       // 4056\n      $editable.removeData(KEY_BOGUS);                                                                                 // 4057\n    };                                                                                                                 // 4058\n                                                                                                                       // 4059\n    /**                                                                                                                // 4060\n     * lineHeight                                                                                                      // 4061\n     * @param {jQuery} $editable                                                                                       // 4062\n     * @param {String} value                                                                                           // 4063\n     */                                                                                                                // 4064\n    this.lineHeight = function ($editable, value) {                                                                    // 4065\n      beforeCommand($editable);                                                                                        // 4066\n      style.stylePara(range.create(), {                                                                                // 4067\n        lineHeight: value                                                                                              // 4068\n      });                                                                                                              // 4069\n      afterCommand($editable);                                                                                         // 4070\n    };                                                                                                                 // 4071\n                                                                                                                       // 4072\n    /**                                                                                                                // 4073\n     * unlink                                                                                                          // 4074\n     *                                                                                                                 // 4075\n     * @type command                                                                                                   // 4076\n     *                                                                                                                 // 4077\n     * @param {jQuery} $editable                                                                                       // 4078\n     */                                                                                                                // 4079\n    this.unlink = function ($editable) {                                                                               // 4080\n      var rng = this.createRange($editable);                                                                           // 4081\n      if (rng.isOnAnchor()) {                                                                                          // 4082\n        var anchor = dom.ancestor(rng.sc, dom.isAnchor);                                                               // 4083\n        rng = range.createFromNode(anchor);                                                                            // 4084\n        rng.select();                                                                                                  // 4085\n                                                                                                                       // 4086\n        beforeCommand($editable);                                                                                      // 4087\n        document.execCommand('unlink');                                                                                // 4088\n        afterCommand($editable);                                                                                       // 4089\n      }                                                                                                                // 4090\n    };                                                                                                                 // 4091\n                                                                                                                       // 4092\n    /**                                                                                                                // 4093\n     * create link (command)                                                                                           // 4094\n     *                                                                                                                 // 4095\n     * @param {jQuery} $editable                                                                                       // 4096\n     * @param {Object} linkInfo                                                                                        // 4097\n     * @param {Object} options                                                                                         // 4098\n     */                                                                                                                // 4099\n    this.createLink = function ($editable, linkInfo, options) {                                                        // 4100\n      var linkUrl = linkInfo.url;                                                                                      // 4101\n      var linkText = linkInfo.text;                                                                                    // 4102\n      var isNewWindow = linkInfo.isNewWindow;                                                                          // 4103\n      var rng = linkInfo.range || this.createRange($editable);                                                         // 4104\n      var isTextChanged = rng.toString() !== linkText;                                                                 // 4105\n                                                                                                                       // 4106\n      options = options || dom.makeLayoutInfo($editable).editor().data('options');                                     // 4107\n                                                                                                                       // 4108\n      beforeCommand($editable);                                                                                        // 4109\n                                                                                                                       // 4110\n      if (options.onCreateLink) {                                                                                      // 4111\n        linkUrl = options.onCreateLink(linkUrl);                                                                       // 4112\n      }                                                                                                                // 4113\n                                                                                                                       // 4114\n      var anchors = [];                                                                                                // 4115\n      if (isTextChanged) {                                                                                             // 4116\n        // Create a new link when text changed.                                                                        // 4117\n        var anchor = rng.insertNode($('<A>' + linkText + '</A>')[0]);                                                  // 4118\n        anchors.push(anchor);                                                                                          // 4119\n      } else {                                                                                                         // 4120\n        anchors = style.styleNodes(rng, {                                                                              // 4121\n          nodeName: 'A',                                                                                               // 4122\n          expandClosestSibling: true,                                                                                  // 4123\n          onlyPartialContains: true                                                                                    // 4124\n        });                                                                                                            // 4125\n      }                                                                                                                // 4126\n                                                                                                                       // 4127\n      $.each(anchors, function (idx, anchor) {                                                                         // 4128\n        $(anchor).attr('href', linkUrl);                                                                               // 4129\n        if (isNewWindow) {                                                                                             // 4130\n          $(anchor).attr('target', '_blank');                                                                          // 4131\n        } else {                                                                                                       // 4132\n          $(anchor).removeAttr('target');                                                                              // 4133\n        }                                                                                                              // 4134\n      });                                                                                                              // 4135\n                                                                                                                       // 4136\n      var startRange = range.createFromNodeBefore(list.head(anchors));                                                 // 4137\n      var startPoint = startRange.getStartPoint();                                                                     // 4138\n      var endRange = range.createFromNodeAfter(list.last(anchors));                                                    // 4139\n      var endPoint = endRange.getEndPoint();                                                                           // 4140\n                                                                                                                       // 4141\n      range.create(                                                                                                    // 4142\n        startPoint.node,                                                                                               // 4143\n        startPoint.offset,                                                                                             // 4144\n        endPoint.node,                                                                                                 // 4145\n        endPoint.offset                                                                                                // 4146\n      ).select();                                                                                                      // 4147\n                                                                                                                       // 4148\n      afterCommand($editable);                                                                                         // 4149\n    };                                                                                                                 // 4150\n                                                                                                                       // 4151\n    /**                                                                                                                // 4152\n     * returns link info                                                                                               // 4153\n     *                                                                                                                 // 4154\n     * @return {Object}                                                                                                // 4155\n     * @return {WrappedRange} return.range                                                                             // 4156\n     * @return {String} return.text                                                                                    // 4157\n     * @return {Boolean} [return.isNewWindow=true]                                                                     // 4158\n     * @return {String} [return.url=\"\"]                                                                                // 4159\n     */                                                                                                                // 4160\n    this.getLinkInfo = function ($editable) {                                                                          // 4161\n      this.focus($editable);                                                                                           // 4162\n                                                                                                                       // 4163\n      var rng = range.create().expand(dom.isAnchor);                                                                   // 4164\n                                                                                                                       // 4165\n      // Get the first anchor on range(for edit).                                                                      // 4166\n      var $anchor = $(list.head(rng.nodes(dom.isAnchor)));                                                             // 4167\n                                                                                                                       // 4168\n      return {                                                                                                         // 4169\n        range: rng,                                                                                                    // 4170\n        text: rng.toString(),                                                                                          // 4171\n        isNewWindow: $anchor.length ? $anchor.attr('target') === '_blank' : false,                                     // 4172\n        url: $anchor.length ? $anchor.attr('href') : ''                                                                // 4173\n      };                                                                                                               // 4174\n    };                                                                                                                 // 4175\n                                                                                                                       // 4176\n    /**                                                                                                                // 4177\n     * setting color                                                                                                   // 4178\n     *                                                                                                                 // 4179\n     * @param {Node} $editable                                                                                         // 4180\n     * @param {Object} sObjColor  color code                                                                           // 4181\n     * @param {String} sObjColor.foreColor foreground color                                                            // 4182\n     * @param {String} sObjColor.backColor background color                                                            // 4183\n     */                                                                                                                // 4184\n    this.color = function ($editable, sObjColor) {                                                                     // 4185\n      var oColor = JSON.parse(sObjColor);                                                                              // 4186\n      var foreColor = oColor.foreColor, backColor = oColor.backColor;                                                  // 4187\n                                                                                                                       // 4188\n      beforeCommand($editable);                                                                                        // 4189\n                                                                                                                       // 4190\n      if (foreColor) { document.execCommand('foreColor', false, foreColor); }                                          // 4191\n      if (backColor) { document.execCommand('backColor', false, backColor); }                                          // 4192\n                                                                                                                       // 4193\n      afterCommand($editable);                                                                                         // 4194\n    };                                                                                                                 // 4195\n                                                                                                                       // 4196\n    /**                                                                                                                // 4197\n     * insert Table                                                                                                    // 4198\n     *                                                                                                                 // 4199\n     * @param {Node} $editable                                                                                         // 4200\n     * @param {String} sDim dimension of table (ex : \"5x5\")                                                            // 4201\n     */                                                                                                                // 4202\n    this.insertTable = function ($editable, sDim) {                                                                    // 4203\n      var dimension = sDim.split('x');                                                                                 // 4204\n      beforeCommand($editable);                                                                                        // 4205\n                                                                                                                       // 4206\n      var rng = range.create().deleteContents();                                                                       // 4207\n      rng.insertNode(table.createTable(dimension[0], dimension[1]));                                                   // 4208\n      afterCommand($editable);                                                                                         // 4209\n    };                                                                                                                 // 4210\n                                                                                                                       // 4211\n    /**                                                                                                                // 4212\n     * float me                                                                                                        // 4213\n     *                                                                                                                 // 4214\n     * @param {jQuery} $editable                                                                                       // 4215\n     * @param {String} value                                                                                           // 4216\n     * @param {jQuery} $target                                                                                         // 4217\n     */                                                                                                                // 4218\n    this.floatMe = function ($editable, value, $target) {                                                              // 4219\n      beforeCommand($editable);                                                                                        // 4220\n      // bootstrap                                                                                                     // 4221\n      $target.removeClass('pull-left pull-right');                                                                     // 4222\n      if (value && value !== 'none') {                                                                                 // 4223\n        $target.addClass('pull-' + value);                                                                             // 4224\n      }                                                                                                                // 4225\n                                                                                                                       // 4226\n      // fallback for non-bootstrap                                                                                    // 4227\n      $target.css('float', value);                                                                                     // 4228\n      afterCommand($editable);                                                                                         // 4229\n    };                                                                                                                 // 4230\n                                                                                                                       // 4231\n    /**                                                                                                                // 4232\n     * change image shape                                                                                              // 4233\n     *                                                                                                                 // 4234\n     * @param {jQuery} $editable                                                                                       // 4235\n     * @param {String} value css class                                                                                 // 4236\n     * @param {Node} $target                                                                                           // 4237\n     */                                                                                                                // 4238\n    this.imageShape = function ($editable, value, $target) {                                                           // 4239\n      beforeCommand($editable);                                                                                        // 4240\n                                                                                                                       // 4241\n      $target.removeClass('img-rounded img-circle img-thumbnail');                                                     // 4242\n                                                                                                                       // 4243\n      if (value) {                                                                                                     // 4244\n        $target.addClass(value);                                                                                       // 4245\n      }                                                                                                                // 4246\n                                                                                                                       // 4247\n      afterCommand($editable);                                                                                         // 4248\n    };                                                                                                                 // 4249\n                                                                                                                       // 4250\n    /**                                                                                                                // 4251\n     * resize overlay element                                                                                          // 4252\n     * @param {jQuery} $editable                                                                                       // 4253\n     * @param {String} value                                                                                           // 4254\n     * @param {jQuery} $target - target element                                                                        // 4255\n     */                                                                                                                // 4256\n    this.resize = function ($editable, value, $target) {                                                               // 4257\n      beforeCommand($editable);                                                                                        // 4258\n                                                                                                                       // 4259\n      $target.css({                                                                                                    // 4260\n        width: value * 100 + '%',                                                                                      // 4261\n        height: ''                                                                                                     // 4262\n      });                                                                                                              // 4263\n                                                                                                                       // 4264\n      afterCommand($editable);                                                                                         // 4265\n    };                                                                                                                 // 4266\n                                                                                                                       // 4267\n    /**                                                                                                                // 4268\n     * @param {Position} pos                                                                                           // 4269\n     * @param {jQuery} $target - target element                                                                        // 4270\n     * @param {Boolean} [bKeepRatio] - keep ratio                                                                      // 4271\n     */                                                                                                                // 4272\n    this.resizeTo = function (pos, $target, bKeepRatio) {                                                              // 4273\n      var imageSize;                                                                                                   // 4274\n      if (bKeepRatio) {                                                                                                // 4275\n        var newRatio = pos.y / pos.x;                                                                                  // 4276\n        var ratio = $target.data('ratio');                                                                             // 4277\n        imageSize = {                                                                                                  // 4278\n          width: ratio > newRatio ? pos.x : pos.y / ratio,                                                             // 4279\n          height: ratio > newRatio ? pos.x * ratio : pos.y                                                             // 4280\n        };                                                                                                             // 4281\n      } else {                                                                                                         // 4282\n        imageSize = {                                                                                                  // 4283\n          width: pos.x,                                                                                                // 4284\n          height: pos.y                                                                                                // 4285\n        };                                                                                                             // 4286\n      }                                                                                                                // 4287\n                                                                                                                       // 4288\n      $target.css(imageSize);                                                                                          // 4289\n    };                                                                                                                 // 4290\n                                                                                                                       // 4291\n    /**                                                                                                                // 4292\n     * remove media object                                                                                             // 4293\n     *                                                                                                                 // 4294\n     * @param {jQuery} $editable                                                                                       // 4295\n     * @param {String} value - dummy argument (for keep interface)                                                     // 4296\n     * @param {jQuery} $target - target element                                                                        // 4297\n     */                                                                                                                // 4298\n    this.removeMedia = function ($editable, value, $target) {                                                          // 4299\n      beforeCommand($editable);                                                                                        // 4300\n      $target.detach();                                                                                                // 4301\n                                                                                                                       // 4302\n      handler.bindCustomEvent(                                                                                         // 4303\n        $(), $editable.data('callbacks'), 'media.delete'                                                               // 4304\n      )($target, $editable);                                                                                           // 4305\n                                                                                                                       // 4306\n      afterCommand($editable);                                                                                         // 4307\n    };                                                                                                                 // 4308\n                                                                                                                       // 4309\n    /**                                                                                                                // 4310\n     * set focus                                                                                                       // 4311\n     *                                                                                                                 // 4312\n     * @param $editable                                                                                                // 4313\n     */                                                                                                                // 4314\n    this.focus = function ($editable) {                                                                                // 4315\n      $editable.focus();                                                                                               // 4316\n                                                                                                                       // 4317\n      // [workaround] for firefox bug http://goo.gl/lVfAaI                                                             // 4318\n      if (agent.isFF && !range.create().isOnEditable()) {                                                              // 4319\n        range.createFromNode($editable[0])                                                                             // 4320\n             .normalize()                                                                                              // 4321\n             .collapse()                                                                                               // 4322\n             .select();                                                                                                // 4323\n      }                                                                                                                // 4324\n    };                                                                                                                 // 4325\n                                                                                                                       // 4326\n    /**                                                                                                                // 4327\n     * returns whether contents is empty or not.                                                                       // 4328\n     *                                                                                                                 // 4329\n     * @param {jQuery} $editable                                                                                       // 4330\n     * @return {Boolean}                                                                                               // 4331\n     */                                                                                                                // 4332\n    this.isEmpty = function ($editable) {                                                                              // 4333\n      return dom.isEmpty($editable[0]) || dom.emptyPara === $editable.html();                                          // 4334\n    };                                                                                                                 // 4335\n  };                                                                                                                   // 4336\n                                                                                                                       // 4337\n  /**                                                                                                                  // 4338\n   * @class module.Button                                                                                              // 4339\n   *                                                                                                                   // 4340\n   * Button                                                                                                            // 4341\n   */                                                                                                                  // 4342\n  var Button = function () {                                                                                           // 4343\n    /**                                                                                                                // 4344\n     * update button status                                                                                            // 4345\n     *                                                                                                                 // 4346\n     * @param {jQuery} $container                                                                                      // 4347\n     * @param {Object} styleInfo                                                                                       // 4348\n     */                                                                                                                // 4349\n    this.update = function ($container, styleInfo) {                                                                   // 4350\n      /**                                                                                                              // 4351\n       * handle dropdown's check mark (for fontname, fontsize, lineHeight).                                            // 4352\n       * @param {jQuery} $btn                                                                                          // 4353\n       * @param {Number} value                                                                                         // 4354\n       */                                                                                                              // 4355\n      var checkDropdownMenu = function ($btn, value) {                                                                 // 4356\n        $btn.find('.dropdown-menu li a').each(function () {                                                            // 4357\n          // always compare string to avoid creating another func.                                                     // 4358\n          var isChecked = ($(this).data('value') + '') === (value + '');                                               // 4359\n          this.className = isChecked ? 'checked' : '';                                                                 // 4360\n        });                                                                                                            // 4361\n      };                                                                                                               // 4362\n                                                                                                                       // 4363\n      /**                                                                                                              // 4364\n       * update button state(active or not).                                                                           // 4365\n       *                                                                                                               // 4366\n       * @private                                                                                                      // 4367\n       * @param {String} selector                                                                                      // 4368\n       * @param {Function} pred                                                                                        // 4369\n       */                                                                                                              // 4370\n      var btnState = function (selector, pred) {                                                                       // 4371\n        var $btn = $container.find(selector);                                                                          // 4372\n        $btn.toggleClass('active', pred());                                                                            // 4373\n      };                                                                                                               // 4374\n                                                                                                                       // 4375\n      if (styleInfo.image) {                                                                                           // 4376\n        var $img = $(styleInfo.image);                                                                                 // 4377\n                                                                                                                       // 4378\n        btnState('button[data-event=\"imageShape\"][data-value=\"img-rounded\"]', function () {                            // 4379\n          return $img.hasClass('img-rounded');                                                                         // 4380\n        });                                                                                                            // 4381\n        btnState('button[data-event=\"imageShape\"][data-value=\"img-circle\"]', function () {                             // 4382\n          return $img.hasClass('img-circle');                                                                          // 4383\n        });                                                                                                            // 4384\n        btnState('button[data-event=\"imageShape\"][data-value=\"img-thumbnail\"]', function () {                          // 4385\n          return $img.hasClass('img-thumbnail');                                                                       // 4386\n        });                                                                                                            // 4387\n        btnState('button[data-event=\"imageShape\"]:not([data-value])', function () {                                    // 4388\n          return !$img.is('.img-rounded, .img-circle, .img-thumbnail');                                                // 4389\n        });                                                                                                            // 4390\n                                                                                                                       // 4391\n        var imgFloat = $img.css('float');                                                                              // 4392\n        btnState('button[data-event=\"floatMe\"][data-value=\"left\"]', function () {                                      // 4393\n          return imgFloat === 'left';                                                                                  // 4394\n        });                                                                                                            // 4395\n        btnState('button[data-event=\"floatMe\"][data-value=\"right\"]', function () {                                     // 4396\n          return imgFloat === 'right';                                                                                 // 4397\n        });                                                                                                            // 4398\n        btnState('button[data-event=\"floatMe\"][data-value=\"none\"]', function () {                                      // 4399\n          return imgFloat !== 'left' && imgFloat !== 'right';                                                          // 4400\n        });                                                                                                            // 4401\n                                                                                                                       // 4402\n        var style = $img.attr('style');                                                                                // 4403\n        btnState('button[data-event=\"resize\"][data-value=\"1\"]', function () {                                          // 4404\n          return !!/(^|\\s)(max-)?width\\s*:\\s*100%/.test(style);                                                        // 4405\n        });                                                                                                            // 4406\n        btnState('button[data-event=\"resize\"][data-value=\"0.5\"]', function () {                                        // 4407\n          return !!/(^|\\s)(max-)?width\\s*:\\s*50%/.test(style);                                                         // 4408\n        });                                                                                                            // 4409\n        btnState('button[data-event=\"resize\"][data-value=\"0.25\"]', function () {                                       // 4410\n          return !!/(^|\\s)(max-)?width\\s*:\\s*25%/.test(style);                                                         // 4411\n        });                                                                                                            // 4412\n        return;                                                                                                        // 4413\n      }                                                                                                                // 4414\n                                                                                                                       // 4415\n      // fontname                                                                                                      // 4416\n      var $fontname = $container.find('.note-fontname');                                                               // 4417\n      if ($fontname.length) {                                                                                          // 4418\n        var selectedFont = styleInfo['font-family'];                                                                   // 4419\n        if (!!selectedFont) {                                                                                          // 4420\n                                                                                                                       // 4421\n          var list = selectedFont.split(',');                                                                          // 4422\n          for (var i = 0, len = list.length; i < len; i++) {                                                           // 4423\n            selectedFont = list[i].replace(/[\\'\\\"]/g, '').replace(/\\s+$/, '').replace(/^\\s+/, '');                     // 4424\n            if (agent.isFontInstalled(selectedFont)) {                                                                 // 4425\n              break;                                                                                                   // 4426\n            }                                                                                                          // 4427\n          }                                                                                                            // 4428\n                                                                                                                       // 4429\n          $fontname.find('.note-current-fontname').text(selectedFont);                                                 // 4430\n          checkDropdownMenu($fontname, selectedFont);                                                                  // 4431\n                                                                                                                       // 4432\n        }                                                                                                              // 4433\n      }                                                                                                                // 4434\n                                                                                                                       // 4435\n      // fontsize                                                                                                      // 4436\n      var $fontsize = $container.find('.note-fontsize');                                                               // 4437\n      $fontsize.find('.note-current-fontsize').text(styleInfo['font-size']);                                           // 4438\n      checkDropdownMenu($fontsize, parseFloat(styleInfo['font-size']));                                                // 4439\n                                                                                                                       // 4440\n      // lineheight                                                                                                    // 4441\n      var $lineHeight = $container.find('.note-height');                                                               // 4442\n      checkDropdownMenu($lineHeight, parseFloat(styleInfo['line-height']));                                            // 4443\n                                                                                                                       // 4444\n      btnState('button[data-event=\"bold\"]', function () {                                                              // 4445\n        return styleInfo['font-bold'] === 'bold';                                                                      // 4446\n      });                                                                                                              // 4447\n      btnState('button[data-event=\"italic\"]', function () {                                                            // 4448\n        return styleInfo['font-italic'] === 'italic';                                                                  // 4449\n      });                                                                                                              // 4450\n      btnState('button[data-event=\"underline\"]', function () {                                                         // 4451\n        return styleInfo['font-underline'] === 'underline';                                                            // 4452\n      });                                                                                                              // 4453\n      btnState('button[data-event=\"strikethrough\"]', function () {                                                     // 4454\n        return styleInfo['font-strikethrough'] === 'strikethrough';                                                    // 4455\n      });                                                                                                              // 4456\n      btnState('button[data-event=\"superscript\"]', function () {                                                       // 4457\n        return styleInfo['font-superscript'] === 'superscript';                                                        // 4458\n      });                                                                                                              // 4459\n      btnState('button[data-event=\"subscript\"]', function () {                                                         // 4460\n        return styleInfo['font-subscript'] === 'subscript';                                                            // 4461\n      });                                                                                                              // 4462\n      btnState('button[data-event=\"justifyLeft\"]', function () {                                                       // 4463\n        return styleInfo['text-align'] === 'left' || styleInfo['text-align'] === 'start';                              // 4464\n      });                                                                                                              // 4465\n      btnState('button[data-event=\"justifyCenter\"]', function () {                                                     // 4466\n        return styleInfo['text-align'] === 'center';                                                                   // 4467\n      });                                                                                                              // 4468\n      btnState('button[data-event=\"justifyRight\"]', function () {                                                      // 4469\n        return styleInfo['text-align'] === 'right';                                                                    // 4470\n      });                                                                                                              // 4471\n      btnState('button[data-event=\"justifyFull\"]', function () {                                                       // 4472\n        return styleInfo['text-align'] === 'justify';                                                                  // 4473\n      });                                                                                                              // 4474\n      btnState('button[data-event=\"insertUnorderedList\"]', function () {                                               // 4475\n        return styleInfo['list-style'] === 'unordered';                                                                // 4476\n      });                                                                                                              // 4477\n      btnState('button[data-event=\"insertOrderedList\"]', function () {                                                 // 4478\n        return styleInfo['list-style'] === 'ordered';                                                                  // 4479\n      });                                                                                                              // 4480\n    };                                                                                                                 // 4481\n                                                                                                                       // 4482\n    /**                                                                                                                // 4483\n     * update recent color                                                                                             // 4484\n     *                                                                                                                 // 4485\n     * @param {Node} button                                                                                            // 4486\n     * @param {String} eventName                                                                                       // 4487\n     * @param {Mixed} value                                                                                            // 4488\n     */                                                                                                                // 4489\n    this.updateRecentColor = function (button, eventName, value) {                                                     // 4490\n      var $color = $(button).closest('.note-color');                                                                   // 4491\n      var $recentColor = $color.find('.note-recent-color');                                                            // 4492\n      var colorInfo = JSON.parse($recentColor.attr('data-value'));                                                     // 4493\n      colorInfo[eventName] = value;                                                                                    // 4494\n      $recentColor.attr('data-value', JSON.stringify(colorInfo));                                                      // 4495\n      var sKey = eventName === 'backColor' ? 'background-color' : 'color';                                             // 4496\n      $recentColor.find('i').css(sKey, value);                                                                         // 4497\n    };                                                                                                                 // 4498\n  };                                                                                                                   // 4499\n                                                                                                                       // 4500\n  /**                                                                                                                  // 4501\n   * @class module.Toolbar                                                                                             // 4502\n   *                                                                                                                   // 4503\n   * Toolbar                                                                                                           // 4504\n   */                                                                                                                  // 4505\n  var Toolbar = function () {                                                                                          // 4506\n    var button = new Button();                                                                                         // 4507\n                                                                                                                       // 4508\n    this.update = function ($toolbar, styleInfo) {                                                                     // 4509\n      button.update($toolbar, styleInfo);                                                                              // 4510\n    };                                                                                                                 // 4511\n                                                                                                                       // 4512\n    /**                                                                                                                // 4513\n     * @param {Node} button                                                                                            // 4514\n     * @param {String} eventName                                                                                       // 4515\n     * @param {String} value                                                                                           // 4516\n     */                                                                                                                // 4517\n    this.updateRecentColor = function (buttonNode, eventName, value) {                                                 // 4518\n      button.updateRecentColor(buttonNode, eventName, value);                                                          // 4519\n    };                                                                                                                 // 4520\n                                                                                                                       // 4521\n    /**                                                                                                                // 4522\n     * activate buttons exclude codeview                                                                               // 4523\n     * @param {jQuery} $toolbar                                                                                        // 4524\n     */                                                                                                                // 4525\n    this.activate = function ($toolbar) {                                                                              // 4526\n      $toolbar.find('button')                                                                                          // 4527\n              .not('button[data-event=\"codeview\"]')                                                                    // 4528\n              .removeClass('disabled');                                                                                // 4529\n    };                                                                                                                 // 4530\n                                                                                                                       // 4531\n    /**                                                                                                                // 4532\n     * deactivate buttons exclude codeview                                                                             // 4533\n     * @param {jQuery} $toolbar                                                                                        // 4534\n     */                                                                                                                // 4535\n    this.deactivate = function ($toolbar) {                                                                            // 4536\n      $toolbar.find('button')                                                                                          // 4537\n              .not('button[data-event=\"codeview\"]')                                                                    // 4538\n              .addClass('disabled');                                                                                   // 4539\n    };                                                                                                                 // 4540\n                                                                                                                       // 4541\n    /**                                                                                                                // 4542\n     * @param {jQuery} $container                                                                                      // 4543\n     * @param {Boolean} [bFullscreen=false]                                                                            // 4544\n     */                                                                                                                // 4545\n    this.updateFullscreen = function ($container, bFullscreen) {                                                       // 4546\n      var $btn = $container.find('button[data-event=\"fullscreen\"]');                                                   // 4547\n      $btn.toggleClass('active', bFullscreen);                                                                         // 4548\n    };                                                                                                                 // 4549\n                                                                                                                       // 4550\n    /**                                                                                                                // 4551\n     * @param {jQuery} $container                                                                                      // 4552\n     * @param {Boolean} [isCodeview=false]                                                                             // 4553\n     */                                                                                                                // 4554\n    this.updateCodeview = function ($container, isCodeview) {                                                          // 4555\n      var $btn = $container.find('button[data-event=\"codeview\"]');                                                     // 4556\n      $btn.toggleClass('active', isCodeview);                                                                          // 4557\n                                                                                                                       // 4558\n      if (isCodeview) {                                                                                                // 4559\n        this.deactivate($container);                                                                                   // 4560\n      } else {                                                                                                         // 4561\n        this.activate($container);                                                                                     // 4562\n      }                                                                                                                // 4563\n    };                                                                                                                 // 4564\n                                                                                                                       // 4565\n    /**                                                                                                                // 4566\n     * get button in toolbar                                                                                           // 4567\n     *                                                                                                                 // 4568\n     * @param {jQuery} $editable                                                                                       // 4569\n     * @param {String} name                                                                                            // 4570\n     * @return {jQuery}                                                                                                // 4571\n     */                                                                                                                // 4572\n    this.get = function ($editable, name) {                                                                            // 4573\n      var $toolbar = dom.makeLayoutInfo($editable).toolbar();                                                          // 4574\n                                                                                                                       // 4575\n      return $toolbar.find('[data-name=' + name + ']');                                                                // 4576\n    };                                                                                                                 // 4577\n                                                                                                                       // 4578\n    /**                                                                                                                // 4579\n     * set button state                                                                                                // 4580\n     * @param {jQuery} $editable                                                                                       // 4581\n     * @param {String} name                                                                                            // 4582\n     * @param {Boolean} [isActive=true]                                                                                // 4583\n     */                                                                                                                // 4584\n    this.setButtonState = function ($editable, name, isActive) {                                                       // 4585\n      isActive = (isActive === false) ? false : true;                                                                  // 4586\n                                                                                                                       // 4587\n      var $button = this.get($editable, name);                                                                         // 4588\n      $button.toggleClass('active', isActive);                                                                         // 4589\n    };                                                                                                                 // 4590\n  };                                                                                                                   // 4591\n                                                                                                                       // 4592\n  var EDITABLE_PADDING = 24;                                                                                           // 4593\n                                                                                                                       // 4594\n  var Statusbar = function () {                                                                                        // 4595\n    var $document = $(document);                                                                                       // 4596\n                                                                                                                       // 4597\n    this.attach = function (layoutInfo, options) {                                                                     // 4598\n      if (!options.disableResizeEditor) {                                                                              // 4599\n        layoutInfo.statusbar().on('mousedown', hStatusbarMousedown);                                                   // 4600\n      }                                                                                                                // 4601\n    };                                                                                                                 // 4602\n                                                                                                                       // 4603\n    /**                                                                                                                // 4604\n     * `mousedown` event handler on statusbar                                                                          // 4605\n     *                                                                                                                 // 4606\n     * @param {MouseEvent} event                                                                                       // 4607\n     */                                                                                                                // 4608\n    var hStatusbarMousedown = function (event) {                                                                       // 4609\n      event.preventDefault();                                                                                          // 4610\n      event.stopPropagation();                                                                                         // 4611\n                                                                                                                       // 4612\n      var $editable = dom.makeLayoutInfo(event.target).editable();                                                     // 4613\n      var editableTop = $editable.offset().top - $document.scrollTop();                                                // 4614\n                                                                                                                       // 4615\n      var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);                                        // 4616\n      var options = layoutInfo.editor().data('options');                                                               // 4617\n                                                                                                                       // 4618\n      $document.on('mousemove', function (event) {                                                                     // 4619\n        var nHeight = event.clientY - (editableTop + EDITABLE_PADDING);                                                // 4620\n                                                                                                                       // 4621\n        nHeight = (options.minHeight > 0) ? Math.max(nHeight, options.minHeight) : nHeight;                            // 4622\n        nHeight = (options.maxHeight > 0) ? Math.min(nHeight, options.maxHeight) : nHeight;                            // 4623\n                                                                                                                       // 4624\n        $editable.height(nHeight);                                                                                     // 4625\n      }).one('mouseup', function () {                                                                                  // 4626\n        $document.off('mousemove');                                                                                    // 4627\n      });                                                                                                              // 4628\n    };                                                                                                                 // 4629\n  };                                                                                                                   // 4630\n                                                                                                                       // 4631\n  /**                                                                                                                  // 4632\n   * @class module.Popover                                                                                             // 4633\n   *                                                                                                                   // 4634\n   * Popover (http://getbootstrap.com/javascript/#popovers)                                                            // 4635\n   *                                                                                                                   // 4636\n   */                                                                                                                  // 4637\n  var Popover = function () {                                                                                          // 4638\n    var button = new Button();                                                                                         // 4639\n                                                                                                                       // 4640\n    /**                                                                                                                // 4641\n     * returns position from placeholder                                                                               // 4642\n     *                                                                                                                 // 4643\n     * @private                                                                                                        // 4644\n     * @param {Node} placeholder                                                                                       // 4645\n     * @param {Object} options                                                                                         // 4646\n     * @param {Boolean} options.isAirMode                                                                              // 4647\n     * @return {Position}                                                                                              // 4648\n     */                                                                                                                // 4649\n    var posFromPlaceholder = function (placeholder, options) {                                                         // 4650\n      var isAirMode = options && options.isAirMode;                                                                    // 4651\n      var isLeftTop = options && options.isLeftTop;                                                                    // 4652\n                                                                                                                       // 4653\n      var $placeholder = $(placeholder);                                                                               // 4654\n      var pos = isAirMode ? $placeholder.offset() : $placeholder.position();                                           // 4655\n      var height = isLeftTop ? 0 : $placeholder.outerHeight(true); // include margin                                   // 4656\n                                                                                                                       // 4657\n      // popover below placeholder.                                                                                    // 4658\n      return {                                                                                                         // 4659\n        left: pos.left,                                                                                                // 4660\n        top: pos.top + height                                                                                          // 4661\n      };                                                                                                               // 4662\n    };                                                                                                                 // 4663\n                                                                                                                       // 4664\n    /**                                                                                                                // 4665\n     * show popover                                                                                                    // 4666\n     *                                                                                                                 // 4667\n     * @private                                                                                                        // 4668\n     * @param {jQuery} popover                                                                                         // 4669\n     * @param {Position} pos                                                                                           // 4670\n     */                                                                                                                // 4671\n    var showPopover = function ($popover, pos) {                                                                       // 4672\n      $popover.css({                                                                                                   // 4673\n        display: 'block',                                                                                              // 4674\n        left: pos.left,                                                                                                // 4675\n        top: pos.top                                                                                                   // 4676\n      });                                                                                                              // 4677\n    };                                                                                                                 // 4678\n                                                                                                                       // 4679\n    var PX_POPOVER_ARROW_OFFSET_X = 20;                                                                                // 4680\n                                                                                                                       // 4681\n    /**                                                                                                                // 4682\n     * update current state                                                                                            // 4683\n     * @param {jQuery} $popover - popover container                                                                    // 4684\n     * @param {Object} styleInfo - style object                                                                        // 4685\n     * @param {Boolean} isAirMode                                                                                      // 4686\n     */                                                                                                                // 4687\n    this.update = function ($popover, styleInfo, isAirMode) {                                                          // 4688\n      button.update($popover, styleInfo);                                                                              // 4689\n                                                                                                                       // 4690\n      var $linkPopover = $popover.find('.note-link-popover');                                                          // 4691\n      if (styleInfo.anchor) {                                                                                          // 4692\n        var $anchor = $linkPopover.find('a');                                                                          // 4693\n        var href = $(styleInfo.anchor).attr('href');                                                                   // 4694\n        var target = $(styleInfo.anchor).attr('target');                                                               // 4695\n        $anchor.attr('href', href).html(href);                                                                         // 4696\n        if (!target) {                                                                                                 // 4697\n          $anchor.removeAttr('target');                                                                                // 4698\n        } else {                                                                                                       // 4699\n          $anchor.attr('target', '_blank');                                                                            // 4700\n        }                                                                                                              // 4701\n        showPopover($linkPopover, posFromPlaceholder(styleInfo.anchor, {                                               // 4702\n          isAirMode: isAirMode                                                                                         // 4703\n        }));                                                                                                           // 4704\n      } else {                                                                                                         // 4705\n        $linkPopover.hide();                                                                                           // 4706\n      }                                                                                                                // 4707\n                                                                                                                       // 4708\n      var $imagePopover = $popover.find('.note-image-popover');                                                        // 4709\n      if (styleInfo.image) {                                                                                           // 4710\n        showPopover($imagePopover, posFromPlaceholder(styleInfo.image, {                                               // 4711\n          isAirMode: isAirMode,                                                                                        // 4712\n          isLeftTop: true                                                                                              // 4713\n        }));                                                                                                           // 4714\n      } else {                                                                                                         // 4715\n        $imagePopover.hide();                                                                                          // 4716\n      }                                                                                                                // 4717\n                                                                                                                       // 4718\n      var $airPopover = $popover.find('.note-air-popover');                                                            // 4719\n      if (isAirMode && styleInfo.range && !styleInfo.range.isCollapsed()) {                                            // 4720\n        var rect = list.last(styleInfo.range.getClientRects());                                                        // 4721\n        if (rect) {                                                                                                    // 4722\n          var bnd = func.rect2bnd(rect);                                                                               // 4723\n          showPopover($airPopover, {                                                                                   // 4724\n            left: Math.max(bnd.left + bnd.width / 2 - PX_POPOVER_ARROW_OFFSET_X, 0),                                   // 4725\n            top: bnd.top + bnd.height                                                                                  // 4726\n          });                                                                                                          // 4727\n        }                                                                                                              // 4728\n      } else {                                                                                                         // 4729\n        $airPopover.hide();                                                                                            // 4730\n      }                                                                                                                // 4731\n    };                                                                                                                 // 4732\n                                                                                                                       // 4733\n    /**                                                                                                                // 4734\n     * @param {Node} button                                                                                            // 4735\n     * @param {String} eventName                                                                                       // 4736\n     * @param {String} value                                                                                           // 4737\n     */                                                                                                                // 4738\n    this.updateRecentColor = function (button, eventName, value) {                                                     // 4739\n      button.updateRecentColor(button, eventName, value);                                                              // 4740\n    };                                                                                                                 // 4741\n                                                                                                                       // 4742\n    /**                                                                                                                // 4743\n     * hide all popovers                                                                                               // 4744\n     * @param {jQuery} $popover - popover container                                                                    // 4745\n     */                                                                                                                // 4746\n    this.hide = function ($popover) {                                                                                  // 4747\n      $popover.children().hide();                                                                                      // 4748\n    };                                                                                                                 // 4749\n  };                                                                                                                   // 4750\n                                                                                                                       // 4751\n  /**                                                                                                                  // 4752\n   * @class module.Handle                                                                                              // 4753\n   *                                                                                                                   // 4754\n   * Handle                                                                                                            // 4755\n   */                                                                                                                  // 4756\n  var Handle = function (handler) {                                                                                    // 4757\n    var $document = $(document);                                                                                       // 4758\n                                                                                                                       // 4759\n    /**                                                                                                                // 4760\n     * `mousedown` event handler on $handle                                                                            // 4761\n     *  - controlSizing: resize image                                                                                  // 4762\n     *                                                                                                                 // 4763\n     * @param {MouseEvent} event                                                                                       // 4764\n     */                                                                                                                // 4765\n    var hHandleMousedown = function (event) {                                                                          // 4766\n      if (dom.isControlSizing(event.target)) {                                                                         // 4767\n        event.preventDefault();                                                                                        // 4768\n        event.stopPropagation();                                                                                       // 4769\n                                                                                                                       // 4770\n        var layoutInfo = dom.makeLayoutInfo(event.target),                                                             // 4771\n            $handle = layoutInfo.handle(),                                                                             // 4772\n            $popover = layoutInfo.popover(),                                                                           // 4773\n            $editable = layoutInfo.editable(),                                                                         // 4774\n            $editor = layoutInfo.editor();                                                                             // 4775\n                                                                                                                       // 4776\n        var target = $handle.find('.note-control-selection').data('target'),                                           // 4777\n            $target = $(target), posStart = $target.offset(),                                                          // 4778\n            scrollTop = $document.scrollTop();                                                                         // 4779\n                                                                                                                       // 4780\n        var isAirMode = $editor.data('options').airMode;                                                               // 4781\n                                                                                                                       // 4782\n        $document.on('mousemove', function (event) {                                                                   // 4783\n          handler.invoke('editor.resizeTo', {                                                                          // 4784\n            x: event.clientX - posStart.left,                                                                          // 4785\n            y: event.clientY - (posStart.top - scrollTop)                                                              // 4786\n          }, $target, !event.shiftKey);                                                                                // 4787\n                                                                                                                       // 4788\n          handler.invoke('handle.update', $handle, {image: target}, isAirMode);                                        // 4789\n          handler.invoke('popover.update', $popover, {image: target}, isAirMode);                                      // 4790\n        }).one('mouseup', function () {                                                                                // 4791\n          $document.off('mousemove');                                                                                  // 4792\n          handler.invoke('editor.afterCommand', $editable);                                                            // 4793\n        });                                                                                                            // 4794\n                                                                                                                       // 4795\n        if (!$target.data('ratio')) { // original ratio.                                                               // 4796\n          $target.data('ratio', $target.height() / $target.width());                                                   // 4797\n        }                                                                                                              // 4798\n      }                                                                                                                // 4799\n    };                                                                                                                 // 4800\n                                                                                                                       // 4801\n    this.attach = function (layoutInfo) {                                                                              // 4802\n      layoutInfo.handle().on('mousedown', hHandleMousedown);                                                           // 4803\n    };                                                                                                                 // 4804\n                                                                                                                       // 4805\n    /**                                                                                                                // 4806\n     * update handle                                                                                                   // 4807\n     * @param {jQuery} $handle                                                                                         // 4808\n     * @param {Object} styleInfo                                                                                       // 4809\n     * @param {Boolean} isAirMode                                                                                      // 4810\n     */                                                                                                                // 4811\n    this.update = function ($handle, styleInfo, isAirMode) {                                                           // 4812\n      var $selection = $handle.find('.note-control-selection');                                                        // 4813\n      if (styleInfo.image) {                                                                                           // 4814\n        var $image = $(styleInfo.image);                                                                               // 4815\n        var pos = isAirMode ? $image.offset() : $image.position();                                                     // 4816\n                                                                                                                       // 4817\n        // include margin                                                                                              // 4818\n        var imageSize = {                                                                                              // 4819\n          w: $image.outerWidth(true),                                                                                  // 4820\n          h: $image.outerHeight(true)                                                                                  // 4821\n        };                                                                                                             // 4822\n                                                                                                                       // 4823\n        $selection.css({                                                                                               // 4824\n          display: 'block',                                                                                            // 4825\n          left: pos.left,                                                                                              // 4826\n          top: pos.top,                                                                                                // 4827\n          width: imageSize.w,                                                                                          // 4828\n          height: imageSize.h                                                                                          // 4829\n        }).data('target', styleInfo.image); // save current image element.                                             // 4830\n        var sizingText = imageSize.w + 'x' + imageSize.h;                                                              // 4831\n        $selection.find('.note-control-selection-info').text(sizingText);                                              // 4832\n      } else {                                                                                                         // 4833\n        $selection.hide();                                                                                             // 4834\n      }                                                                                                                // 4835\n    };                                                                                                                 // 4836\n                                                                                                                       // 4837\n    /**                                                                                                                // 4838\n     * hide                                                                                                            // 4839\n     *                                                                                                                 // 4840\n     * @param {jQuery} $handle                                                                                         // 4841\n     */                                                                                                                // 4842\n    this.hide = function ($handle) {                                                                                   // 4843\n      $handle.children().hide();                                                                                       // 4844\n    };                                                                                                                 // 4845\n  };                                                                                                                   // 4846\n                                                                                                                       // 4847\n  var Fullscreen = function (handler) {                                                                                // 4848\n    var $window = $(window);                                                                                           // 4849\n    var $scrollbar = $('html, body');                                                                                  // 4850\n                                                                                                                       // 4851\n    /**                                                                                                                // 4852\n     * toggle fullscreen                                                                                               // 4853\n     *                                                                                                                 // 4854\n     * @param {Object} layoutInfo                                                                                      // 4855\n     */                                                                                                                // 4856\n    this.toggle = function (layoutInfo) {                                                                              // 4857\n                                                                                                                       // 4858\n      var $editor = layoutInfo.editor(),                                                                               // 4859\n          $toolbar = layoutInfo.toolbar(),                                                                             // 4860\n          $editable = layoutInfo.editable(),                                                                           // 4861\n          $codable = layoutInfo.codable();                                                                             // 4862\n                                                                                                                       // 4863\n      var resize = function (size) {                                                                                   // 4864\n        $editable.css('height', size.h);                                                                               // 4865\n        $codable.css('height', size.h);                                                                                // 4866\n        if ($codable.data('cmeditor')) {                                                                               // 4867\n          $codable.data('cmeditor').setsize(null, size.h);                                                             // 4868\n        }                                                                                                              // 4869\n      };                                                                                                               // 4870\n                                                                                                                       // 4871\n      $editor.toggleClass('fullscreen');                                                                               // 4872\n      var isFullscreen = $editor.hasClass('fullscreen');                                                               // 4873\n      if (isFullscreen) {                                                                                              // 4874\n        $editable.data('orgheight', $editable.css('height'));                                                          // 4875\n                                                                                                                       // 4876\n        $window.on('resize', function () {                                                                             // 4877\n          resize({                                                                                                     // 4878\n            h: $window.height() - $toolbar.outerHeight()                                                               // 4879\n          });                                                                                                          // 4880\n        }).trigger('resize');                                                                                          // 4881\n                                                                                                                       // 4882\n        $scrollbar.css('overflow', 'hidden');                                                                          // 4883\n      } else {                                                                                                         // 4884\n        $window.off('resize');                                                                                         // 4885\n        resize({                                                                                                       // 4886\n          h: $editable.data('orgheight')                                                                               // 4887\n        });                                                                                                            // 4888\n        $scrollbar.css('overflow', 'visible');                                                                         // 4889\n      }                                                                                                                // 4890\n                                                                                                                       // 4891\n      handler.invoke('toolbar.updateFullscreen', $toolbar, isFullscreen);                                              // 4892\n    };                                                                                                                 // 4893\n  };                                                                                                                   // 4894\n                                                                                                                       // 4895\n                                                                                                                       // 4896\n  var CodeMirror;                                                                                                      // 4897\n  if (agent.hasCodeMirror) {                                                                                           // 4898\n    if (agent.isSupportAmd) {                                                                                          // 4899\n      require(['CodeMirror'], function (cm) {                                                                          // 4900\n        CodeMirror = cm;                                                                                               // 4901\n      });                                                                                                              // 4902\n    } else {                                                                                                           // 4903\n      CodeMirror = window.CodeMirror;                                                                                  // 4904\n    }                                                                                                                  // 4905\n  }                                                                                                                    // 4906\n                                                                                                                       // 4907\n  /**                                                                                                                  // 4908\n   * @class Codeview                                                                                                   // 4909\n   */                                                                                                                  // 4910\n  var Codeview = function (handler) {                                                                                  // 4911\n                                                                                                                       // 4912\n    this.sync = function (layoutInfo) {                                                                                // 4913\n      var isCodeview = handler.invoke('codeview.isActivated', layoutInfo);                                             // 4914\n      if (isCodeview && agent.hasCodeMirror) {                                                                         // 4915\n        layoutInfo.codable().data('cmEditor').save();                                                                  // 4916\n      }                                                                                                                // 4917\n    };                                                                                                                 // 4918\n                                                                                                                       // 4919\n    /**                                                                                                                // 4920\n     * @param {Object} layoutInfo                                                                                      // 4921\n     * @return {Boolean}                                                                                               // 4922\n     */                                                                                                                // 4923\n    this.isActivated = function (layoutInfo) {                                                                         // 4924\n      var $editor = layoutInfo.editor();                                                                               // 4925\n      return $editor.hasClass('codeview');                                                                             // 4926\n    };                                                                                                                 // 4927\n                                                                                                                       // 4928\n    /**                                                                                                                // 4929\n     * toggle codeview                                                                                                 // 4930\n     *                                                                                                                 // 4931\n     * @param {Object} layoutInfo                                                                                      // 4932\n     */                                                                                                                // 4933\n    this.toggle = function (layoutInfo) {                                                                              // 4934\n      if (this.isActivated(layoutInfo)) {                                                                              // 4935\n        this.deactivate(layoutInfo);                                                                                   // 4936\n      } else {                                                                                                         // 4937\n        this.activate(layoutInfo);                                                                                     // 4938\n      }                                                                                                                // 4939\n    };                                                                                                                 // 4940\n                                                                                                                       // 4941\n    /**                                                                                                                // 4942\n     * activate code view                                                                                              // 4943\n     *                                                                                                                 // 4944\n     * @param {Object} layoutInfo                                                                                      // 4945\n     */                                                                                                                // 4946\n    this.activate = function (layoutInfo) {                                                                            // 4947\n      var $editor = layoutInfo.editor(),                                                                               // 4948\n          $toolbar = layoutInfo.toolbar(),                                                                             // 4949\n          $editable = layoutInfo.editable(),                                                                           // 4950\n          $codable = layoutInfo.codable(),                                                                             // 4951\n          $popover = layoutInfo.popover(),                                                                             // 4952\n          $handle = layoutInfo.handle();                                                                               // 4953\n                                                                                                                       // 4954\n      var options = $editor.data('options');                                                                           // 4955\n                                                                                                                       // 4956\n      $codable.val(dom.html($editable, options.prettifyHtml));                                                         // 4957\n      $codable.height($editable.height());                                                                             // 4958\n                                                                                                                       // 4959\n      handler.invoke('toolbar.updateCodeview', $toolbar, true);                                                        // 4960\n      handler.invoke('popover.hide', $popover);                                                                        // 4961\n      handler.invoke('handle.hide', $handle);                                                                          // 4962\n                                                                                                                       // 4963\n      $editor.addClass('codeview');                                                                                    // 4964\n                                                                                                                       // 4965\n      $codable.focus();                                                                                                // 4966\n                                                                                                                       // 4967\n      // activate CodeMirror as codable                                                                                // 4968\n      if (agent.hasCodeMirror) {                                                                                       // 4969\n        var cmEditor = CodeMirror.fromTextArea($codable[0], options.codemirror);                                       // 4970\n                                                                                                                       // 4971\n        // CodeMirror TernServer                                                                                       // 4972\n        if (options.codemirror.tern) {                                                                                 // 4973\n          var server = new CodeMirror.TernServer(options.codemirror.tern);                                             // 4974\n          cmEditor.ternServer = server;                                                                                // 4975\n          cmEditor.on('cursorActivity', function (cm) {                                                                // 4976\n            server.updateArgHints(cm);                                                                                 // 4977\n          });                                                                                                          // 4978\n        }                                                                                                              // 4979\n                                                                                                                       // 4980\n        // CodeMirror hasn't Padding.                                                                                  // 4981\n        cmEditor.setSize(null, $editable.outerHeight());                                                               // 4982\n        $codable.data('cmEditor', cmEditor);                                                                           // 4983\n      }                                                                                                                // 4984\n    };                                                                                                                 // 4985\n                                                                                                                       // 4986\n    /**                                                                                                                // 4987\n     * deactivate code view                                                                                            // 4988\n     *                                                                                                                 // 4989\n     * @param {Object} layoutInfo                                                                                      // 4990\n     */                                                                                                                // 4991\n    this.deactivate = function (layoutInfo) {                                                                          // 4992\n      var $holder = layoutInfo.holder(),                                                                               // 4993\n          $editor = layoutInfo.editor(),                                                                               // 4994\n          $toolbar = layoutInfo.toolbar(),                                                                             // 4995\n          $editable = layoutInfo.editable(),                                                                           // 4996\n          $codable = layoutInfo.codable();                                                                             // 4997\n                                                                                                                       // 4998\n      var options = $editor.data('options');                                                                           // 4999\n                                                                                                                       // 5000\n      // deactivate CodeMirror as codable                                                                              // 5001\n      if (agent.hasCodeMirror) {                                                                                       // 5002\n        var cmEditor = $codable.data('cmEditor');                                                                      // 5003\n        $codable.val(cmEditor.getValue());                                                                             // 5004\n        cmEditor.toTextArea();                                                                                         // 5005\n      }                                                                                                                // 5006\n                                                                                                                       // 5007\n      var value = dom.value($codable, options.prettifyHtml) || dom.emptyPara;                                          // 5008\n      var isChange = $editable.html() !== value;                                                                       // 5009\n                                                                                                                       // 5010\n      $editable.html(value);                                                                                           // 5011\n      $editable.height(options.height ? $codable.height() : 'auto');                                                   // 5012\n      $editor.removeClass('codeview');                                                                                 // 5013\n                                                                                                                       // 5014\n      if (isChange) {                                                                                                  // 5015\n        handler.bindCustomEvent(                                                                                       // 5016\n          $holder, $editable.data('callbacks'), 'change'                                                               // 5017\n        )($editable.html(), $editable);                                                                                // 5018\n      }                                                                                                                // 5019\n                                                                                                                       // 5020\n      $editable.focus();                                                                                               // 5021\n                                                                                                                       // 5022\n      handler.invoke('toolbar.updateCodeview', $toolbar, false);                                                       // 5023\n    };                                                                                                                 // 5024\n  };                                                                                                                   // 5025\n                                                                                                                       // 5026\n  var DragAndDrop = function (handler) {                                                                               // 5027\n    var $document = $(document);                                                                                       // 5028\n                                                                                                                       // 5029\n    /**                                                                                                                // 5030\n     * attach Drag and Drop Events                                                                                     // 5031\n     *                                                                                                                 // 5032\n     * @param {Object} layoutInfo - layout Informations                                                                // 5033\n     * @param {Object} options                                                                                         // 5034\n     */                                                                                                                // 5035\n    this.attach = function (layoutInfo, options) {                                                                     // 5036\n      if (options.airMode || options.disableDragAndDrop) {                                                             // 5037\n        // prevent default drop event                                                                                  // 5038\n        $document.on('drop', function (e) {                                                                            // 5039\n          e.preventDefault();                                                                                          // 5040\n        });                                                                                                            // 5041\n      } else {                                                                                                         // 5042\n        this.attachDragAndDropEvent(layoutInfo, options);                                                              // 5043\n      }                                                                                                                // 5044\n    };                                                                                                                 // 5045\n                                                                                                                       // 5046\n    /**                                                                                                                // 5047\n     * attach Drag and Drop Events                                                                                     // 5048\n     *                                                                                                                 // 5049\n     * @param {Object} layoutInfo - layout Informations                                                                // 5050\n     * @param {Object} options                                                                                         // 5051\n     */                                                                                                                // 5052\n    this.attachDragAndDropEvent = function (layoutInfo, options) {                                                     // 5053\n      var collection = $(),                                                                                            // 5054\n          $editor = layoutInfo.editor(),                                                                               // 5055\n          $dropzone = layoutInfo.dropzone(),                                                                           // 5056\n          $dropzoneMessage = $dropzone.find('.note-dropzone-message');                                                 // 5057\n                                                                                                                       // 5058\n      // show dropzone on dragenter when dragging a object to document                                                 // 5059\n      // -but only if the editor is visible, i.e. has a positive width and height                                      // 5060\n      $document.on('dragenter', function (e) {                                                                         // 5061\n        var isCodeview = handler.invoke('codeview.isActivated', layoutInfo);                                           // 5062\n        var hasEditorSize = $editor.width() > 0 && $editor.height() > 0;                                               // 5063\n        if (!isCodeview && !collection.length && hasEditorSize) {                                                      // 5064\n          $editor.addClass('dragover');                                                                                // 5065\n          $dropzone.width($editor.width());                                                                            // 5066\n          $dropzone.height($editor.height());                                                                          // 5067\n          $dropzoneMessage.text(options.langInfo.image.dragImageHere);                                                 // 5068\n        }                                                                                                              // 5069\n        collection = collection.add(e.target);                                                                         // 5070\n      }).on('dragleave', function (e) {                                                                                // 5071\n        collection = collection.not(e.target);                                                                         // 5072\n        if (!collection.length) {                                                                                      // 5073\n          $editor.removeClass('dragover');                                                                             // 5074\n        }                                                                                                              // 5075\n      }).on('drop', function () {                                                                                      // 5076\n        collection = $();                                                                                              // 5077\n        $editor.removeClass('dragover');                                                                               // 5078\n      });                                                                                                              // 5079\n                                                                                                                       // 5080\n      // change dropzone's message on hover.                                                                           // 5081\n      $dropzone.on('dragenter', function () {                                                                          // 5082\n        $dropzone.addClass('hover');                                                                                   // 5083\n        $dropzoneMessage.text(options.langInfo.image.dropImage);                                                       // 5084\n      }).on('dragleave', function () {                                                                                 // 5085\n        $dropzone.removeClass('hover');                                                                                // 5086\n        $dropzoneMessage.text(options.langInfo.image.dragImageHere);                                                   // 5087\n      });                                                                                                              // 5088\n                                                                                                                       // 5089\n      // attach dropImage                                                                                              // 5090\n      $dropzone.on('drop', function (event) {                                                                          // 5091\n                                                                                                                       // 5092\n        var dataTransfer = event.originalEvent.dataTransfer;                                                           // 5093\n        var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);                                      // 5094\n                                                                                                                       // 5095\n        if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {                                         // 5096\n          event.preventDefault();                                                                                      // 5097\n          layoutInfo.editable().focus();                                                                               // 5098\n          handler.insertImages(layoutInfo, dataTransfer.files);                                                        // 5099\n        } else {                                                                                                       // 5100\n          var insertNodefunc = function () {                                                                           // 5101\n            layoutInfo.holder().summernote('insertNode', this);                                                        // 5102\n          };                                                                                                           // 5103\n                                                                                                                       // 5104\n          for (var i = 0, len = dataTransfer.types.length; i < len; i++) {                                             // 5105\n            var type = dataTransfer.types[i];                                                                          // 5106\n            var content = dataTransfer.getData(type);                                                                  // 5107\n                                                                                                                       // 5108\n            if (type.toLowerCase().indexOf('text') > -1) {                                                             // 5109\n              layoutInfo.holder().summernote('pasteHTML', content);                                                    // 5110\n            } else {                                                                                                   // 5111\n              $(content).each(insertNodefunc);                                                                         // 5112\n            }                                                                                                          // 5113\n          }                                                                                                            // 5114\n        }                                                                                                              // 5115\n      }).on('dragover', false); // prevent default dragover event                                                      // 5116\n    };                                                                                                                 // 5117\n  };                                                                                                                   // 5118\n                                                                                                                       // 5119\n  var Clipboard = function (handler) {                                                                                 // 5120\n    var $paste;                                                                                                        // 5121\n                                                                                                                       // 5122\n    this.attach = function (layoutInfo) {                                                                              // 5123\n      // [workaround] getting image from clipboard                                                                     // 5124\n      //  - IE11 and Firefox: CTRL+v hook                                                                              // 5125\n      //  - Webkit: event.clipboardData                                                                                // 5126\n      if ((agent.isMSIE && agent.browserVersion > 10) || agent.isFF) {                                                 // 5127\n        $paste = $('<div />').attr('contenteditable', true).css({                                                      // 5128\n          position : 'absolute',                                                                                       // 5129\n          left : -100000,                                                                                              // 5130\n          opacity : 0                                                                                                  // 5131\n        });                                                                                                            // 5132\n                                                                                                                       // 5133\n        layoutInfo.editable().on('keydown', function (e) {                                                             // 5134\n          if (e.ctrlKey && e.keyCode === key.code.V) {                                                                 // 5135\n            handler.invoke('saveRange', layoutInfo.editable());                                                        // 5136\n            $paste.focus();                                                                                            // 5137\n                                                                                                                       // 5138\n            setTimeout(function () {                                                                                   // 5139\n              pasteByHook(layoutInfo);                                                                                 // 5140\n            }, 0);                                                                                                     // 5141\n          }                                                                                                            // 5142\n        });                                                                                                            // 5143\n                                                                                                                       // 5144\n        layoutInfo.editable().before($paste);                                                                          // 5145\n      } else {                                                                                                         // 5146\n        layoutInfo.editable().on('paste', pasteByEvent);                                                               // 5147\n      }                                                                                                                // 5148\n    };                                                                                                                 // 5149\n                                                                                                                       // 5150\n    var pasteByHook = function (layoutInfo) {                                                                          // 5151\n      var $editable = layoutInfo.editable();                                                                           // 5152\n      var node = $paste[0].firstChild;                                                                                 // 5153\n                                                                                                                       // 5154\n      if (dom.isImg(node)) {                                                                                           // 5155\n        var dataURI = node.src;                                                                                        // 5156\n        var decodedData = atob(dataURI.split(',')[1]);                                                                 // 5157\n        var array = new Uint8Array(decodedData.length);                                                                // 5158\n        for (var i = 0; i < decodedData.length; i++) {                                                                 // 5159\n          array[i] = decodedData.charCodeAt(i);                                                                        // 5160\n        }                                                                                                              // 5161\n                                                                                                                       // 5162\n        var blob = new Blob([array], { type : 'image/png' });                                                          // 5163\n        blob.name = 'clipboard.png';                                                                                   // 5164\n                                                                                                                       // 5165\n        handler.invoke('restoreRange', $editable);                                                                     // 5166\n        handler.invoke('focus', $editable);                                                                            // 5167\n        handler.insertImages(layoutInfo, [blob]);                                                                      // 5168\n      } else {                                                                                                         // 5169\n        var pasteContent = $('<div />').html($paste.html()).html();                                                    // 5170\n        handler.invoke('restoreRange', $editable);                                                                     // 5171\n        handler.invoke('focus', $editable);                                                                            // 5172\n                                                                                                                       // 5173\n        if (pasteContent) {                                                                                            // 5174\n          handler.invoke('pasteHTML', $editable, pasteContent);                                                        // 5175\n        }                                                                                                              // 5176\n      }                                                                                                                // 5177\n                                                                                                                       // 5178\n      $paste.empty();                                                                                                  // 5179\n    };                                                                                                                 // 5180\n                                                                                                                       // 5181\n    /**                                                                                                                // 5182\n     * paste by clipboard event                                                                                        // 5183\n     *                                                                                                                 // 5184\n     * @param {Event} event                                                                                            // 5185\n     */                                                                                                                // 5186\n    var pasteByEvent = function (event) {                                                                              // 5187\n      var clipboardData = event.originalEvent.clipboardData;                                                           // 5188\n      var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);                                        // 5189\n      var $editable = layoutInfo.editable();                                                                           // 5190\n                                                                                                                       // 5191\n      if (clipboardData && clipboardData.items && clipboardData.items.length) {                                        // 5192\n        var item = list.head(clipboardData.items);                                                                     // 5193\n        if (item.kind === 'file' && item.type.indexOf('image/') !== -1) {                                              // 5194\n          handler.insertImages(layoutInfo, [item.getAsFile()]);                                                        // 5195\n        }                                                                                                              // 5196\n        handler.invoke('editor.afterCommand', $editable);                                                              // 5197\n      }                                                                                                                // 5198\n    };                                                                                                                 // 5199\n  };                                                                                                                   // 5200\n                                                                                                                       // 5201\n  var LinkDialog = function (handler) {                                                                                // 5202\n                                                                                                                       // 5203\n    /**                                                                                                                // 5204\n     * toggle button status                                                                                            // 5205\n     *                                                                                                                 // 5206\n     * @private                                                                                                        // 5207\n     * @param {jQuery} $btn                                                                                            // 5208\n     * @param {Boolean} isEnable                                                                                       // 5209\n     */                                                                                                                // 5210\n    var toggleBtn = function ($btn, isEnable) {                                                                        // 5211\n      $btn.toggleClass('disabled', !isEnable);                                                                         // 5212\n      $btn.attr('disabled', !isEnable);                                                                                // 5213\n    };                                                                                                                 // 5214\n                                                                                                                       // 5215\n    /**                                                                                                                // 5216\n     * bind enter key                                                                                                  // 5217\n     *                                                                                                                 // 5218\n     * @private                                                                                                        // 5219\n     * @param {jQuery} $input                                                                                          // 5220\n     * @param {jQuery} $btn                                                                                            // 5221\n     */                                                                                                                // 5222\n    var bindEnterKey = function ($input, $btn) {                                                                       // 5223\n      $input.on('keypress', function (event) {                                                                         // 5224\n        if (event.keyCode === key.code.ENTER) {                                                                        // 5225\n          $btn.trigger('click');                                                                                       // 5226\n        }                                                                                                              // 5227\n      });                                                                                                              // 5228\n    };                                                                                                                 // 5229\n                                                                                                                       // 5230\n    /**                                                                                                                // 5231\n     * Show link dialog and set event handlers on dialog controls.                                                     // 5232\n     *                                                                                                                 // 5233\n     * @param {jQuery} $editable                                                                                       // 5234\n     * @param {jQuery} $dialog                                                                                         // 5235\n     * @param {Object} linkInfo                                                                                        // 5236\n     * @return {Promise}                                                                                               // 5237\n     */                                                                                                                // 5238\n    this.showLinkDialog = function ($editable, $dialog, linkInfo) {                                                    // 5239\n      return $.Deferred(function (deferred) {                                                                          // 5240\n        var $linkDialog = $dialog.find('.note-link-dialog');                                                           // 5241\n                                                                                                                       // 5242\n        var $linkText = $linkDialog.find('.note-link-text'),                                                           // 5243\n        $linkUrl = $linkDialog.find('.note-link-url'),                                                                 // 5244\n        $linkBtn = $linkDialog.find('.note-link-btn'),                                                                 // 5245\n        $openInNewWindow = $linkDialog.find('input[type=checkbox]');                                                   // 5246\n                                                                                                                       // 5247\n        $linkDialog.one('shown.bs.modal', function () {                                                                // 5248\n          $linkText.val(linkInfo.text);                                                                                // 5249\n                                                                                                                       // 5250\n          $linkText.on('input', function () {                                                                          // 5251\n            toggleBtn($linkBtn, $linkText.val() && $linkUrl.val());                                                    // 5252\n            // if linktext was modified by keyup,                                                                      // 5253\n            // stop cloning text from linkUrl                                                                          // 5254\n            linkInfo.text = $linkText.val();                                                                           // 5255\n          });                                                                                                          // 5256\n                                                                                                                       // 5257\n          // if no url was given, copy text to url                                                                     // 5258\n          if (!linkInfo.url) {                                                                                         // 5259\n            linkInfo.url = linkInfo.text || 'http://';                                                                 // 5260\n            toggleBtn($linkBtn, linkInfo.text);                                                                        // 5261\n          }                                                                                                            // 5262\n                                                                                                                       // 5263\n          $linkUrl.on('input', function () {                                                                           // 5264\n            toggleBtn($linkBtn, $linkText.val() && $linkUrl.val());                                                    // 5265\n            // display same link on `Text to display` input                                                            // 5266\n            // when create a new link                                                                                  // 5267\n            if (!linkInfo.text) {                                                                                      // 5268\n              $linkText.val($linkUrl.val());                                                                           // 5269\n            }                                                                                                          // 5270\n          }).val(linkInfo.url).trigger('focus').trigger('select');                                                     // 5271\n                                                                                                                       // 5272\n          bindEnterKey($linkUrl, $linkBtn);                                                                            // 5273\n          bindEnterKey($linkText, $linkBtn);                                                                           // 5274\n                                                                                                                       // 5275\n          $openInNewWindow.prop('checked', linkInfo.isNewWindow);                                                      // 5276\n                                                                                                                       // 5277\n          $linkBtn.one('click', function (event) {                                                                     // 5278\n            event.preventDefault();                                                                                    // 5279\n                                                                                                                       // 5280\n            deferred.resolve({                                                                                         // 5281\n              range: linkInfo.range,                                                                                   // 5282\n              url: $linkUrl.val(),                                                                                     // 5283\n              text: $linkText.val(),                                                                                   // 5284\n              isNewWindow: $openInNewWindow.is(':checked')                                                             // 5285\n            });                                                                                                        // 5286\n            $linkDialog.modal('hide');                                                                                 // 5287\n          });                                                                                                          // 5288\n        }).one('hidden.bs.modal', function () {                                                                        // 5289\n          // detach events                                                                                             // 5290\n          $linkText.off('input keypress');                                                                             // 5291\n          $linkUrl.off('input keypress');                                                                              // 5292\n          $linkBtn.off('click');                                                                                       // 5293\n                                                                                                                       // 5294\n          if (deferred.state() === 'pending') {                                                                        // 5295\n            deferred.reject();                                                                                         // 5296\n          }                                                                                                            // 5297\n        }).modal('show');                                                                                              // 5298\n      }).promise();                                                                                                    // 5299\n    };                                                                                                                 // 5300\n                                                                                                                       // 5301\n    /**                                                                                                                // 5302\n     * @param {Object} layoutInfo                                                                                      // 5303\n     */                                                                                                                // 5304\n    this.show = function (layoutInfo) {                                                                                // 5305\n      var $editor = layoutInfo.editor(),                                                                               // 5306\n          $dialog = layoutInfo.dialog(),                                                                               // 5307\n          $editable = layoutInfo.editable(),                                                                           // 5308\n          $popover = layoutInfo.popover(),                                                                             // 5309\n          linkInfo = handler.invoke('editor.getLinkInfo', $editable);                                                  // 5310\n                                                                                                                       // 5311\n      var options = $editor.data('options');                                                                           // 5312\n                                                                                                                       // 5313\n      handler.invoke('editor.saveRange', $editable);                                                                   // 5314\n      this.showLinkDialog($editable, $dialog, linkInfo).then(function (linkInfo) {                                     // 5315\n        handler.invoke('editor.restoreRange', $editable);                                                              // 5316\n        handler.invoke('editor.createLink', $editable, linkInfo, options);                                             // 5317\n        // hide popover after creating link                                                                            // 5318\n        handler.invoke('popover.hide', $popover);                                                                      // 5319\n      }).fail(function () {                                                                                            // 5320\n        handler.invoke('editor.restoreRange', $editable);                                                              // 5321\n      });                                                                                                              // 5322\n    };                                                                                                                 // 5323\n  };                                                                                                                   // 5324\n                                                                                                                       // 5325\n  var ImageDialog = function (handler) {                                                                               // 5326\n    /**                                                                                                                // 5327\n     * toggle button status                                                                                            // 5328\n     *                                                                                                                 // 5329\n     * @private                                                                                                        // 5330\n     * @param {jQuery} $btn                                                                                            // 5331\n     * @param {Boolean} isEnable                                                                                       // 5332\n     */                                                                                                                // 5333\n    var toggleBtn = function ($btn, isEnable) {                                                                        // 5334\n      $btn.toggleClass('disabled', !isEnable);                                                                         // 5335\n      $btn.attr('disabled', !isEnable);                                                                                // 5336\n    };                                                                                                                 // 5337\n                                                                                                                       // 5338\n    /**                                                                                                                // 5339\n     * bind enter key                                                                                                  // 5340\n     *                                                                                                                 // 5341\n     * @private                                                                                                        // 5342\n     * @param {jQuery} $input                                                                                          // 5343\n     * @param {jQuery} $btn                                                                                            // 5344\n     */                                                                                                                // 5345\n    var bindEnterKey = function ($input, $btn) {                                                                       // 5346\n      $input.on('keypress', function (event) {                                                                         // 5347\n        if (event.keyCode === key.code.ENTER) {                                                                        // 5348\n          $btn.trigger('click');                                                                                       // 5349\n        }                                                                                                              // 5350\n      });                                                                                                              // 5351\n    };                                                                                                                 // 5352\n                                                                                                                       // 5353\n    this.show = function (layoutInfo) {                                                                                // 5354\n      var $dialog = layoutInfo.dialog(),                                                                               // 5355\n          $editable = layoutInfo.editable();                                                                           // 5356\n                                                                                                                       // 5357\n      handler.invoke('editor.saveRange', $editable);                                                                   // 5358\n      this.showImageDialog($editable, $dialog).then(function (data) {                                                  // 5359\n        handler.invoke('editor.restoreRange', $editable);                                                              // 5360\n                                                                                                                       // 5361\n        if (typeof data === 'string') {                                                                                // 5362\n          // image url                                                                                                 // 5363\n          handler.invoke('editor.insertImage', $editable, data);                                                       // 5364\n        } else {                                                                                                       // 5365\n          // array of files                                                                                            // 5366\n          handler.insertImages(layoutInfo, data);                                                                      // 5367\n        }                                                                                                              // 5368\n      }).fail(function () {                                                                                            // 5369\n        handler.invoke('editor.restoreRange', $editable);                                                              // 5370\n      });                                                                                                              // 5371\n    };                                                                                                                 // 5372\n                                                                                                                       // 5373\n    /**                                                                                                                // 5374\n     * show image dialog                                                                                               // 5375\n     *                                                                                                                 // 5376\n     * @param {jQuery} $editable                                                                                       // 5377\n     * @param {jQuery} $dialog                                                                                         // 5378\n     * @return {Promise}                                                                                               // 5379\n     */                                                                                                                // 5380\n    this.showImageDialog = function ($editable, $dialog) {                                                             // 5381\n      return $.Deferred(function (deferred) {                                                                          // 5382\n        var $imageDialog = $dialog.find('.note-image-dialog');                                                         // 5383\n                                                                                                                       // 5384\n        var $imageInput = $dialog.find('.note-image-input'),                                                           // 5385\n            $imageUrl = $dialog.find('.note-image-url'),                                                               // 5386\n            $imageBtn = $dialog.find('.note-image-btn');                                                               // 5387\n                                                                                                                       // 5388\n        $imageDialog.one('shown.bs.modal', function () {                                                               // 5389\n          // Cloning imageInput to clear element.                                                                      // 5390\n          $imageInput.replaceWith($imageInput.clone()                                                                  // 5391\n            .on('change', function () {                                                                                // 5392\n              deferred.resolve(this.files || this.value);                                                              // 5393\n              $imageDialog.modal('hide');                                                                              // 5394\n            })                                                                                                         // 5395\n            .val('')                                                                                                   // 5396\n          );                                                                                                           // 5397\n                                                                                                                       // 5398\n          $imageBtn.click(function (event) {                                                                           // 5399\n            event.preventDefault();                                                                                    // 5400\n                                                                                                                       // 5401\n            deferred.resolve($imageUrl.val());                                                                         // 5402\n            $imageDialog.modal('hide');                                                                                // 5403\n          });                                                                                                          // 5404\n                                                                                                                       // 5405\n          $imageUrl.on('keyup paste', function (event) {                                                               // 5406\n            var url;                                                                                                   // 5407\n                                                                                                                       // 5408\n            if (event.type === 'paste') {                                                                              // 5409\n              url = event.originalEvent.clipboardData.getData('text');                                                 // 5410\n            } else {                                                                                                   // 5411\n              url = $imageUrl.val();                                                                                   // 5412\n            }                                                                                                          // 5413\n                                                                                                                       // 5414\n            toggleBtn($imageBtn, url);                                                                                 // 5415\n          }).val('').trigger('focus');                                                                                 // 5416\n          bindEnterKey($imageUrl, $imageBtn);                                                                          // 5417\n        }).one('hidden.bs.modal', function () {                                                                        // 5418\n          $imageInput.off('change');                                                                                   // 5419\n          $imageUrl.off('keyup paste keypress');                                                                       // 5420\n          $imageBtn.off('click');                                                                                      // 5421\n                                                                                                                       // 5422\n          if (deferred.state() === 'pending') {                                                                        // 5423\n            deferred.reject();                                                                                         // 5424\n          }                                                                                                            // 5425\n        }).modal('show');                                                                                              // 5426\n      });                                                                                                              // 5427\n    };                                                                                                                 // 5428\n  };                                                                                                                   // 5429\n                                                                                                                       // 5430\n  var HelpDialog = function (handler) {                                                                                // 5431\n    /**                                                                                                                // 5432\n     * show help dialog                                                                                                // 5433\n     *                                                                                                                 // 5434\n     * @param {jQuery} $editable                                                                                       // 5435\n     * @param {jQuery} $dialog                                                                                         // 5436\n     * @return {Promise}                                                                                               // 5437\n     */                                                                                                                // 5438\n    this.showHelpDialog = function ($editable, $dialog) {                                                              // 5439\n      return $.Deferred(function (deferred) {                                                                          // 5440\n        var $helpDialog = $dialog.find('.note-help-dialog');                                                           // 5441\n                                                                                                                       // 5442\n        $helpDialog.one('hidden.bs.modal', function () {                                                               // 5443\n          deferred.resolve();                                                                                          // 5444\n        }).modal('show');                                                                                              // 5445\n      }).promise();                                                                                                    // 5446\n    };                                                                                                                 // 5447\n                                                                                                                       // 5448\n    /**                                                                                                                // 5449\n     * @param {Object} layoutInfo                                                                                      // 5450\n     */                                                                                                                // 5451\n    this.show = function (layoutInfo) {                                                                                // 5452\n      var $dialog = layoutInfo.dialog(),                                                                               // 5453\n          $editable = layoutInfo.editable();                                                                           // 5454\n                                                                                                                       // 5455\n      handler.invoke('editor.saveRange', $editable, true);                                                             // 5456\n      this.showHelpDialog($editable, $dialog).then(function () {                                                       // 5457\n        handler.invoke('editor.restoreRange', $editable);                                                              // 5458\n      });                                                                                                              // 5459\n    };                                                                                                                 // 5460\n  };                                                                                                                   // 5461\n                                                                                                                       // 5462\n                                                                                                                       // 5463\n  /**                                                                                                                  // 5464\n   * @class EventHandler                                                                                               // 5465\n   *                                                                                                                   // 5466\n   * EventHandler                                                                                                      // 5467\n   *  - TODO: new instance per a editor                                                                                // 5468\n   */                                                                                                                  // 5469\n  var EventHandler = function () {                                                                                     // 5470\n    var self = this;                                                                                                   // 5471\n                                                                                                                       // 5472\n    /**                                                                                                                // 5473\n     * Modules                                                                                                         // 5474\n     */                                                                                                                // 5475\n    var modules = this.modules = {                                                                                     // 5476\n      editor: new Editor(this),                                                                                        // 5477\n      toolbar: new Toolbar(this),                                                                                      // 5478\n      statusbar: new Statusbar(this),                                                                                  // 5479\n      popover: new Popover(this),                                                                                      // 5480\n      handle: new Handle(this),                                                                                        // 5481\n      fullscreen: new Fullscreen(this),                                                                                // 5482\n      codeview: new Codeview(this),                                                                                    // 5483\n      dragAndDrop: new DragAndDrop(this),                                                                              // 5484\n      clipboard: new Clipboard(this),                                                                                  // 5485\n      linkDialog: new LinkDialog(this),                                                                                // 5486\n      imageDialog: new ImageDialog(this),                                                                              // 5487\n      helpDialog: new HelpDialog(this)                                                                                 // 5488\n    };                                                                                                                 // 5489\n                                                                                                                       // 5490\n    /**                                                                                                                // 5491\n     * invoke module's method                                                                                          // 5492\n     *                                                                                                                 // 5493\n     * @param {String} moduleAndMethod - ex) 'editor.redo'                                                             // 5494\n     * @param {...*} arguments - arguments of method                                                                   // 5495\n     * @return {*}                                                                                                     // 5496\n     */                                                                                                                // 5497\n    this.invoke = function () {                                                                                        // 5498\n      var moduleAndMethod = list.head(list.from(arguments));                                                           // 5499\n      var args = list.tail(list.from(arguments));                                                                      // 5500\n                                                                                                                       // 5501\n      var splits = moduleAndMethod.split('.');                                                                         // 5502\n      var hasSeparator = splits.length > 1;                                                                            // 5503\n      var moduleName = hasSeparator && list.head(splits);                                                              // 5504\n      var methodName = hasSeparator ? list.last(splits) : list.head(splits);                                           // 5505\n                                                                                                                       // 5506\n      var module = this.getModule(moduleName);                                                                         // 5507\n      var method = module[methodName];                                                                                 // 5508\n                                                                                                                       // 5509\n      return method && method.apply(module, args);                                                                     // 5510\n    };                                                                                                                 // 5511\n                                                                                                                       // 5512\n    /**                                                                                                                // 5513\n     * returns module                                                                                                  // 5514\n     *                                                                                                                 // 5515\n     * @param {String} moduleName - name of module                                                                     // 5516\n     * @return {Module} - defaults is editor                                                                           // 5517\n     */                                                                                                                // 5518\n    this.getModule = function (moduleName) {                                                                           // 5519\n      return this.modules[moduleName] || this.modules.editor;                                                          // 5520\n    };                                                                                                                 // 5521\n                                                                                                                       // 5522\n    /**                                                                                                                // 5523\n     * @param {jQuery} $holder                                                                                         // 5524\n     * @param {Object} callbacks                                                                                       // 5525\n     * @param {String} eventNamespace                                                                                  // 5526\n     * @returns {Function}                                                                                             // 5527\n     */                                                                                                                // 5528\n    var bindCustomEvent = this.bindCustomEvent = function ($holder, callbacks, eventNamespace) {                       // 5529\n      return function () {                                                                                             // 5530\n        var callback = callbacks[func.namespaceToCamel(eventNamespace, 'on')];                                         // 5531\n        if (callback) {                                                                                                // 5532\n          callback.apply($holder[0], arguments);                                                                       // 5533\n        }                                                                                                              // 5534\n        return $holder.trigger('summernote.' + eventNamespace, arguments);                                             // 5535\n      };                                                                                                               // 5536\n    };                                                                                                                 // 5537\n                                                                                                                       // 5538\n    /**                                                                                                                // 5539\n     * insert Images from file array.                                                                                  // 5540\n     *                                                                                                                 // 5541\n     * @private                                                                                                        // 5542\n     * @param {Object} layoutInfo                                                                                      // 5543\n     * @param {File[]} files                                                                                           // 5544\n     */                                                                                                                // 5545\n    this.insertImages = function (layoutInfo, files) {                                                                 // 5546\n      var $editor = layoutInfo.editor(),                                                                               // 5547\n          $editable = layoutInfo.editable(),                                                                           // 5548\n          $holder = layoutInfo.holder();                                                                               // 5549\n                                                                                                                       // 5550\n      var callbacks = $editable.data('callbacks');                                                                     // 5551\n      var options = $editor.data('options');                                                                           // 5552\n                                                                                                                       // 5553\n      // If onImageUpload options setted                                                                               // 5554\n      if (callbacks.onImageUpload) {                                                                                   // 5555\n        bindCustomEvent($holder, callbacks, 'image.upload')(files);                                                    // 5556\n      // else insert Image as dataURL                                                                                  // 5557\n      } else {                                                                                                         // 5558\n        $.each(files, function (idx, file) {                                                                           // 5559\n          var filename = file.name;                                                                                    // 5560\n          if (options.maximumImageFileSize && options.maximumImageFileSize < file.size) {                              // 5561\n            bindCustomEvent($holder, callbacks, 'image.upload.error')(options.langInfo.image.maximumFileSizeError);    // 5562\n          } else {                                                                                                     // 5563\n            async.readFileAsDataURL(file).then(function (sDataURL) {                                                   // 5564\n              modules.editor.insertImage($editable, sDataURL, filename);                                               // 5565\n            }).fail(function () {                                                                                      // 5566\n              bindCustomEvent($holder, callbacks, 'image.upload.error')(options.langInfo.image.maximumFileSizeError);  // 5567\n            });                                                                                                        // 5568\n          }                                                                                                            // 5569\n        });                                                                                                            // 5570\n      }                                                                                                                // 5571\n    };                                                                                                                 // 5572\n                                                                                                                       // 5573\n    var commands = {                                                                                                   // 5574\n      /**                                                                                                              // 5575\n       * @param {Object} layoutInfo                                                                                    // 5576\n       */                                                                                                              // 5577\n      showLinkDialog: function (layoutInfo) {                                                                          // 5578\n        modules.linkDialog.show(layoutInfo);                                                                           // 5579\n      },                                                                                                               // 5580\n                                                                                                                       // 5581\n      /**                                                                                                              // 5582\n       * @param {Object} layoutInfo                                                                                    // 5583\n       */                                                                                                              // 5584\n      showImageDialog: function (layoutInfo) {                                                                         // 5585\n        modules.imageDialog.show(layoutInfo);                                                                          // 5586\n      },                                                                                                               // 5587\n                                                                                                                       // 5588\n      /**                                                                                                              // 5589\n       * @param {Object} layoutInfo                                                                                    // 5590\n       */                                                                                                              // 5591\n      showHelpDialog: function (layoutInfo) {                                                                          // 5592\n        modules.helpDialog.show(layoutInfo);                                                                           // 5593\n      },                                                                                                               // 5594\n                                                                                                                       // 5595\n      /**                                                                                                              // 5596\n       * @param {Object} layoutInfo                                                                                    // 5597\n       */                                                                                                              // 5598\n      fullscreen: function (layoutInfo) {                                                                              // 5599\n        modules.fullscreen.toggle(layoutInfo);                                                                         // 5600\n      },                                                                                                               // 5601\n                                                                                                                       // 5602\n      /**                                                                                                              // 5603\n       * @param {Object} layoutInfo                                                                                    // 5604\n       */                                                                                                              // 5605\n      codeview: function (layoutInfo) {                                                                                // 5606\n        modules.codeview.toggle(layoutInfo);                                                                           // 5607\n      }                                                                                                                // 5608\n    };                                                                                                                 // 5609\n                                                                                                                       // 5610\n    var hMousedown = function (event) {                                                                                // 5611\n      //preventDefault Selection for FF, IE8+                                                                          // 5612\n      if (dom.isImg(event.target)) {                                                                                   // 5613\n        event.preventDefault();                                                                                        // 5614\n      }                                                                                                                // 5615\n    };                                                                                                                 // 5616\n                                                                                                                       // 5617\n    var hKeyupAndMouseup = function (event) {                                                                          // 5618\n      var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);                                        // 5619\n      modules.editor.removeBogus(layoutInfo.editable());                                                               // 5620\n      hToolbarAndPopoverUpdate(event);                                                                                 // 5621\n    };                                                                                                                 // 5622\n                                                                                                                       // 5623\n    /**                                                                                                                // 5624\n     * update sytle info                                                                                               // 5625\n     * @param {Object} styleInfo                                                                                       // 5626\n     * @param {Object} layoutInfo                                                                                      // 5627\n     */                                                                                                                // 5628\n    this.updateStyleInfo = function (styleInfo, layoutInfo) {                                                          // 5629\n      if (!styleInfo) {                                                                                                // 5630\n        return;                                                                                                        // 5631\n      }                                                                                                                // 5632\n      var isAirMode = layoutInfo.editor().data('options').airMode;                                                     // 5633\n      if (!isAirMode) {                                                                                                // 5634\n        modules.toolbar.update(layoutInfo.toolbar(), styleInfo);                                                       // 5635\n      }                                                                                                                // 5636\n                                                                                                                       // 5637\n      modules.popover.update(layoutInfo.popover(), styleInfo, isAirMode);                                              // 5638\n      modules.handle.update(layoutInfo.handle(), styleInfo, isAirMode);                                                // 5639\n    };                                                                                                                 // 5640\n                                                                                                                       // 5641\n    var hToolbarAndPopoverUpdate = function (event) {                                                                  // 5642\n      var target = event.target;                                                                                       // 5643\n      // delay for range after mouseup                                                                                 // 5644\n      setTimeout(function () {                                                                                         // 5645\n        var layoutInfo = dom.makeLayoutInfo(target);                                                                   // 5646\n        var styleInfo = modules.editor.currentStyle(target);                                                           // 5647\n        self.updateStyleInfo(styleInfo, layoutInfo);                                                                   // 5648\n      }, 0);                                                                                                           // 5649\n    };                                                                                                                 // 5650\n                                                                                                                       // 5651\n    var hScroll = function (event) {                                                                                   // 5652\n      var layoutInfo = dom.makeLayoutInfo(event.currentTarget || event.target);                                        // 5653\n      //hide popover and handle when scrolled                                                                          // 5654\n      modules.popover.hide(layoutInfo.popover());                                                                      // 5655\n      modules.handle.hide(layoutInfo.handle());                                                                        // 5656\n    };                                                                                                                 // 5657\n                                                                                                                       // 5658\n    var hToolbarAndPopoverMousedown = function (event) {                                                               // 5659\n      // prevent default event when insertTable (FF, Webkit)                                                           // 5660\n      var $btn = $(event.target).closest('[data-event]');                                                              // 5661\n      if ($btn.length) {                                                                                               // 5662\n        event.preventDefault();                                                                                        // 5663\n      }                                                                                                                // 5664\n    };                                                                                                                 // 5665\n                                                                                                                       // 5666\n    var hToolbarAndPopoverClick = function (event) {                                                                   // 5667\n      var $btn = $(event.target).closest('[data-event]');                                                              // 5668\n                                                                                                                       // 5669\n      if (!$btn.length) {                                                                                              // 5670\n        return;                                                                                                        // 5671\n      }                                                                                                                // 5672\n                                                                                                                       // 5673\n      var eventName = $btn.attr('data-event'),                                                                         // 5674\n          value = $btn.attr('data-value'),                                                                             // 5675\n          hide = $btn.attr('data-hide');                                                                               // 5676\n                                                                                                                       // 5677\n      var layoutInfo = dom.makeLayoutInfo(event.target);                                                               // 5678\n                                                                                                                       // 5679\n      // before command: detect control selection element($target)                                                     // 5680\n      var $target;                                                                                                     // 5681\n      if ($.inArray(eventName, ['resize', 'floatMe', 'removeMedia', 'imageShape']) !== -1) {                           // 5682\n        var $selection = layoutInfo.handle().find('.note-control-selection');                                          // 5683\n        $target = $($selection.data('target'));                                                                        // 5684\n      }                                                                                                                // 5685\n                                                                                                                       // 5686\n      // If requested, hide the popover when the button is clicked.                                                    // 5687\n      // Useful for things like showHelpDialog.                                                                        // 5688\n      if (hide) {                                                                                                      // 5689\n        $btn.parents('.popover').hide();                                                                               // 5690\n      }                                                                                                                // 5691\n                                                                                                                       // 5692\n      if ($.isFunction($.summernote.pluginEvents[eventName])) {                                                        // 5693\n        $.summernote.pluginEvents[eventName](event, modules.editor, layoutInfo, value);                                // 5694\n      } else if (modules.editor[eventName]) { // on command                                                            // 5695\n        var $editable = layoutInfo.editable();                                                                         // 5696\n        $editable.focus();                                                                                             // 5697\n        modules.editor[eventName]($editable, value, $target);                                                          // 5698\n        event.preventDefault();                                                                                        // 5699\n      } else if (commands[eventName]) {                                                                                // 5700\n        commands[eventName].call(this, layoutInfo);                                                                    // 5701\n        event.preventDefault();                                                                                        // 5702\n      }                                                                                                                // 5703\n                                                                                                                       // 5704\n      // after command                                                                                                 // 5705\n      if ($.inArray(eventName, ['backColor', 'foreColor']) !== -1) {                                                   // 5706\n        var options = layoutInfo.editor().data('options', options);                                                    // 5707\n        var module = options.airMode ? modules.popover : modules.toolbar;                                              // 5708\n        module.updateRecentColor(list.head($btn), eventName, value);                                                   // 5709\n      }                                                                                                                // 5710\n                                                                                                                       // 5711\n      hToolbarAndPopoverUpdate(event);                                                                                 // 5712\n    };                                                                                                                 // 5713\n                                                                                                                       // 5714\n    var PX_PER_EM = 18;                                                                                                // 5715\n    var hDimensionPickerMove = function (event, options) {                                                             // 5716\n      var $picker = $(event.target.parentNode); // target is mousecatcher                                              // 5717\n      var $dimensionDisplay = $picker.next();                                                                          // 5718\n      var $catcher = $picker.find('.note-dimension-picker-mousecatcher');                                              // 5719\n      var $highlighted = $picker.find('.note-dimension-picker-highlighted');                                           // 5720\n      var $unhighlighted = $picker.find('.note-dimension-picker-unhighlighted');                                       // 5721\n                                                                                                                       // 5722\n      var posOffset;                                                                                                   // 5723\n      // HTML5 with jQuery - e.offsetX is undefined in Firefox                                                         // 5724\n      if (event.offsetX === undefined) {                                                                               // 5725\n        var posCatcher = $(event.target).offset();                                                                     // 5726\n        posOffset = {                                                                                                  // 5727\n          x: event.pageX - posCatcher.left,                                                                            // 5728\n          y: event.pageY - posCatcher.top                                                                              // 5729\n        };                                                                                                             // 5730\n      } else {                                                                                                         // 5731\n        posOffset = {                                                                                                  // 5732\n          x: event.offsetX,                                                                                            // 5733\n          y: event.offsetY                                                                                             // 5734\n        };                                                                                                             // 5735\n      }                                                                                                                // 5736\n                                                                                                                       // 5737\n      var dim = {                                                                                                      // 5738\n        c: Math.ceil(posOffset.x / PX_PER_EM) || 1,                                                                    // 5739\n        r: Math.ceil(posOffset.y / PX_PER_EM) || 1                                                                     // 5740\n      };                                                                                                               // 5741\n                                                                                                                       // 5742\n      $highlighted.css({ width: dim.c + 'em', height: dim.r + 'em' });                                                 // 5743\n      $catcher.attr('data-value', dim.c + 'x' + dim.r);                                                                // 5744\n                                                                                                                       // 5745\n      if (3 < dim.c && dim.c < options.insertTableMaxSize.col) {                                                       // 5746\n        $unhighlighted.css({ width: dim.c + 1 + 'em'});                                                                // 5747\n      }                                                                                                                // 5748\n                                                                                                                       // 5749\n      if (3 < dim.r && dim.r < options.insertTableMaxSize.row) {                                                       // 5750\n        $unhighlighted.css({ height: dim.r + 1 + 'em'});                                                               // 5751\n      }                                                                                                                // 5752\n                                                                                                                       // 5753\n      $dimensionDisplay.html(dim.c + ' x ' + dim.r);                                                                   // 5754\n    };                                                                                                                 // 5755\n                                                                                                                       // 5756\n    /**                                                                                                                // 5757\n     * bind KeyMap on keydown                                                                                          // 5758\n     *                                                                                                                 // 5759\n     * @param {Object} layoutInfo                                                                                      // 5760\n     * @param {Object} keyMap                                                                                          // 5761\n     */                                                                                                                // 5762\n    this.bindKeyMap = function (layoutInfo, keyMap) {                                                                  // 5763\n      var $editor = layoutInfo.editor();                                                                               // 5764\n      var $editable = layoutInfo.editable();                                                                           // 5765\n                                                                                                                       // 5766\n      $editable.on('keydown', function (event) {                                                                       // 5767\n        var keys = [];                                                                                                 // 5768\n                                                                                                                       // 5769\n        // modifier                                                                                                    // 5770\n        if (event.metaKey) { keys.push('CMD'); }                                                                       // 5771\n        if (event.ctrlKey && !event.altKey) { keys.push('CTRL'); }                                                     // 5772\n        if (event.shiftKey) { keys.push('SHIFT'); }                                                                    // 5773\n                                                                                                                       // 5774\n        // keycode                                                                                                     // 5775\n        var keyName = key.nameFromCode[event.keyCode];                                                                 // 5776\n        if (keyName) {                                                                                                 // 5777\n          keys.push(keyName);                                                                                          // 5778\n        }                                                                                                              // 5779\n                                                                                                                       // 5780\n        var pluginEvent;                                                                                               // 5781\n        var keyString = keys.join('+');                                                                                // 5782\n        var eventName = keyMap[keyString];                                                                             // 5783\n        if (eventName) {                                                                                               // 5784\n          // FIXME Summernote doesn't support event pipeline yet.                                                      // 5785\n          //  - Plugin -> Base Code                                                                                    // 5786\n          pluginEvent = $.summernote.pluginEvents[keyString];                                                          // 5787\n          if ($.isFunction(pluginEvent)) {                                                                             // 5788\n            if (pluginEvent(event, modules.editor, layoutInfo)) {                                                      // 5789\n              return false;                                                                                            // 5790\n            }                                                                                                          // 5791\n          }                                                                                                            // 5792\n                                                                                                                       // 5793\n          pluginEvent = $.summernote.pluginEvents[eventName];                                                          // 5794\n                                                                                                                       // 5795\n          if ($.isFunction(pluginEvent)) {                                                                             // 5796\n            pluginEvent(event, modules.editor, layoutInfo);                                                            // 5797\n          } else if (modules.editor[eventName]) {                                                                      // 5798\n            modules.editor[eventName]($editable, $editor.data('options'));                                             // 5799\n            event.preventDefault();                                                                                    // 5800\n          } else if (commands[eventName]) {                                                                            // 5801\n            commands[eventName].call(this, layoutInfo);                                                                // 5802\n            event.preventDefault();                                                                                    // 5803\n          }                                                                                                            // 5804\n        } else if (key.isEdit(event.keyCode)) {                                                                        // 5805\n          modules.editor.afterCommand($editable);                                                                      // 5806\n        }                                                                                                              // 5807\n      });                                                                                                              // 5808\n    };                                                                                                                 // 5809\n                                                                                                                       // 5810\n    /**                                                                                                                // 5811\n     * attach eventhandler                                                                                             // 5812\n     *                                                                                                                 // 5813\n     * @param {Object} layoutInfo - layout Informations                                                                // 5814\n     * @param {Object} options - user options include custom event handlers                                            // 5815\n     */                                                                                                                // 5816\n    this.attach = function (layoutInfo, options) {                                                                     // 5817\n      // handlers for editable                                                                                         // 5818\n      if (options.shortcuts) {                                                                                         // 5819\n        this.bindKeyMap(layoutInfo, options.keyMap[agent.isMac ? 'mac' : 'pc']);                                       // 5820\n      }                                                                                                                // 5821\n      layoutInfo.editable().on('mousedown', hMousedown);                                                               // 5822\n      layoutInfo.editable().on('keyup mouseup', hKeyupAndMouseup);                                                     // 5823\n      layoutInfo.editable().on('scroll', hScroll);                                                                     // 5824\n                                                                                                                       // 5825\n      // handler for clipboard                                                                                         // 5826\n      modules.clipboard.attach(layoutInfo, options);                                                                   // 5827\n                                                                                                                       // 5828\n      // handler for handle and popover                                                                                // 5829\n      modules.handle.attach(layoutInfo, options);                                                                      // 5830\n      layoutInfo.popover().on('click', hToolbarAndPopoverClick);                                                       // 5831\n      layoutInfo.popover().on('mousedown', hToolbarAndPopoverMousedown);                                               // 5832\n                                                                                                                       // 5833\n      // handler for drag and drop                                                                                     // 5834\n      modules.dragAndDrop.attach(layoutInfo, options);                                                                 // 5835\n                                                                                                                       // 5836\n      // handlers for frame mode (toolbar, statusbar)                                                                  // 5837\n      if (!options.airMode) {                                                                                          // 5838\n        // handler for toolbar                                                                                         // 5839\n        layoutInfo.toolbar().on('click', hToolbarAndPopoverClick);                                                     // 5840\n        layoutInfo.toolbar().on('mousedown', hToolbarAndPopoverMousedown);                                             // 5841\n                                                                                                                       // 5842\n        // handler for statusbar                                                                                       // 5843\n        modules.statusbar.attach(layoutInfo, options);                                                                 // 5844\n      }                                                                                                                // 5845\n                                                                                                                       // 5846\n      // handler for table dimension                                                                                   // 5847\n      var $catcherContainer = options.airMode ? layoutInfo.popover() :                                                 // 5848\n                                                layoutInfo.toolbar();                                                  // 5849\n      var $catcher = $catcherContainer.find('.note-dimension-picker-mousecatcher');                                    // 5850\n      $catcher.css({                                                                                                   // 5851\n        width: options.insertTableMaxSize.col + 'em',                                                                  // 5852\n        height: options.insertTableMaxSize.row + 'em'                                                                  // 5853\n      }).on('mousemove', function (event) {                                                                            // 5854\n        hDimensionPickerMove(event, options);                                                                          // 5855\n      });                                                                                                              // 5856\n                                                                                                                       // 5857\n      // save options on editor                                                                                        // 5858\n      layoutInfo.editor().data('options', options);                                                                    // 5859\n                                                                                                                       // 5860\n      // ret styleWithCSS for backColor / foreColor clearing with 'inherit'.                                           // 5861\n      if (!agent.isMSIE) {                                                                                             // 5862\n        // [workaround] for Firefox                                                                                    // 5863\n        //  - protect FF Error: NS_ERROR_FAILURE: Failure                                                              // 5864\n        setTimeout(function () {                                                                                       // 5865\n          document.execCommand('styleWithCSS', 0, options.styleWithSpan);                                              // 5866\n        }, 0);                                                                                                         // 5867\n      }                                                                                                                // 5868\n                                                                                                                       // 5869\n      // History                                                                                                       // 5870\n      var history = new History(layoutInfo.editable());                                                                // 5871\n      layoutInfo.editable().data('NoteHistory', history);                                                              // 5872\n                                                                                                                       // 5873\n      // All editor status will be saved on editable with jquery's data                                                // 5874\n      // for support multiple editor with singleton object.                                                            // 5875\n      layoutInfo.editable().data('callbacks', {                                                                        // 5876\n        onInit: options.onInit,                                                                                        // 5877\n        onFocus: options.onFocus,                                                                                      // 5878\n        onBlur: options.onBlur,                                                                                        // 5879\n        onKeydown: options.onKeydown,                                                                                  // 5880\n        onKeyup: options.onKeyup,                                                                                      // 5881\n        onMousedown: options.onMousedown,                                                                              // 5882\n        onEnter: options.onEnter,                                                                                      // 5883\n        onPaste: options.onPaste,                                                                                      // 5884\n        onBeforeCommand: options.onBeforeCommand,                                                                      // 5885\n        onChange: options.onChange,                                                                                    // 5886\n        onImageUpload: options.onImageUpload,                                                                          // 5887\n        onImageUploadError: options.onImageUploadError,                                                                // 5888\n        onMediaDelete: options.onMediaDelete,                                                                          // 5889\n        onToolbarClick: options.onToolbarClick                                                                         // 5890\n      });                                                                                                              // 5891\n                                                                                                                       // 5892\n      var styleInfo = modules.editor.styleFromNode(layoutInfo.editable());                                             // 5893\n      this.updateStyleInfo(styleInfo, layoutInfo);                                                                     // 5894\n    };                                                                                                                 // 5895\n                                                                                                                       // 5896\n    /**                                                                                                                // 5897\n     * attach jquery custom event                                                                                      // 5898\n     *                                                                                                                 // 5899\n     * @param {Object} layoutInfo - layout Informations                                                                // 5900\n     */                                                                                                                // 5901\n    this.attachCustomEvent = function (layoutInfo, options) {                                                          // 5902\n      var $holder = layoutInfo.holder();                                                                               // 5903\n      var $editable = layoutInfo.editable();                                                                           // 5904\n      var callbacks = $editable.data('callbacks');                                                                     // 5905\n                                                                                                                       // 5906\n      $editable.focus(bindCustomEvent($holder, callbacks, 'focus'));                                                   // 5907\n      $editable.blur(bindCustomEvent($holder, callbacks, 'blur'));                                                     // 5908\n                                                                                                                       // 5909\n      $editable.keydown(function (event) {                                                                             // 5910\n        if (event.keyCode === key.code.ENTER) {                                                                        // 5911\n          bindCustomEvent($holder, callbacks, 'enter').call(this, event);                                              // 5912\n        }                                                                                                              // 5913\n        bindCustomEvent($holder, callbacks, 'keydown').call(this, event);                                              // 5914\n      });                                                                                                              // 5915\n      $editable.keyup(bindCustomEvent($holder, callbacks, 'keyup'));                                                   // 5916\n                                                                                                                       // 5917\n      $editable.on('mousedown', bindCustomEvent($holder, callbacks, 'mousedown'));                                     // 5918\n      $editable.on('mouseup', bindCustomEvent($holder, callbacks, 'mouseup'));                                         // 5919\n      $editable.on('scroll', bindCustomEvent($holder, callbacks, 'scroll'));                                           // 5920\n                                                                                                                       // 5921\n      $editable.on('paste', bindCustomEvent($holder, callbacks, 'paste'));                                             // 5922\n                                                                                                                       // 5923\n      // [workaround] IE doesn't have input events for contentEditable                                                 // 5924\n      //  - see: https://goo.gl/4bfIvA                                                                                 // 5925\n      var changeEventName = agent.isMSIE ? 'DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted' : 'input';    // 5926\n      $editable.on(changeEventName, function () {                                                                      // 5927\n        bindCustomEvent($holder, callbacks, 'change')($editable.html(), $editable);                                    // 5928\n      });                                                                                                              // 5929\n                                                                                                                       // 5930\n      if (!options.airMode) {                                                                                          // 5931\n        layoutInfo.toolbar().click(bindCustomEvent($holder, callbacks, 'toolbar.click'));                              // 5932\n        layoutInfo.popover().click(bindCustomEvent($holder, callbacks, 'popover.click'));                              // 5933\n      }                                                                                                                // 5934\n                                                                                                                       // 5935\n      // Textarea: auto filling the code before form submit.                                                           // 5936\n      if (dom.isTextarea(list.head($holder))) {                                                                        // 5937\n        $holder.closest('form').submit(function (e) {                                                                  // 5938\n          layoutInfo.holder().val(layoutInfo.holder().code());                                                         // 5939\n          bindCustomEvent($holder, callbacks, 'submit').call(this, e, $holder.code());                                 // 5940\n        });                                                                                                            // 5941\n      }                                                                                                                // 5942\n                                                                                                                       // 5943\n      // textarea auto sync                                                                                            // 5944\n      if (dom.isTextarea(list.head($holder)) && options.textareaAutoSync) {                                            // 5945\n        $holder.on('summernote.change', function () {                                                                  // 5946\n          layoutInfo.holder().val(layoutInfo.holder().code());                                                         // 5947\n        });                                                                                                            // 5948\n      }                                                                                                                // 5949\n                                                                                                                       // 5950\n      // fire init event                                                                                               // 5951\n      bindCustomEvent($holder, callbacks, 'init')(layoutInfo);                                                         // 5952\n                                                                                                                       // 5953\n      // fire plugin init event                                                                                        // 5954\n      for (var i = 0, len = $.summernote.plugins.length; i < len; i++) {                                               // 5955\n        if ($.isFunction($.summernote.plugins[i].init)) {                                                              // 5956\n          $.summernote.plugins[i].init(layoutInfo);                                                                    // 5957\n        }                                                                                                              // 5958\n      }                                                                                                                // 5959\n    };                                                                                                                 // 5960\n                                                                                                                       // 5961\n    this.detach = function (layoutInfo, options) {                                                                     // 5962\n      layoutInfo.holder().off();                                                                                       // 5963\n      layoutInfo.editable().off();                                                                                     // 5964\n                                                                                                                       // 5965\n      layoutInfo.popover().off();                                                                                      // 5966\n      layoutInfo.handle().off();                                                                                       // 5967\n      layoutInfo.dialog().off();                                                                                       // 5968\n                                                                                                                       // 5969\n      if (!options.airMode) {                                                                                          // 5970\n        layoutInfo.dropzone().off();                                                                                   // 5971\n        layoutInfo.toolbar().off();                                                                                    // 5972\n        layoutInfo.statusbar().off();                                                                                  // 5973\n      }                                                                                                                // 5974\n    };                                                                                                                 // 5975\n  };                                                                                                                   // 5976\n                                                                                                                       // 5977\n  /**                                                                                                                  // 5978\n   * @class Renderer                                                                                                   // 5979\n   *                                                                                                                   // 5980\n   * renderer                                                                                                          // 5981\n   *                                                                                                                   // 5982\n   * rendering toolbar and editable                                                                                    // 5983\n   */                                                                                                                  // 5984\n  var Renderer = function () {                                                                                         // 5985\n                                                                                                                       // 5986\n    /**                                                                                                                // 5987\n     * bootstrap button template                                                                                       // 5988\n     * @private                                                                                                        // 5989\n     * @param {String} label button name                                                                               // 5990\n     * @param {Object} [options] button options                                                                        // 5991\n     * @param {String} [options.event] data-event                                                                      // 5992\n     * @param {String} [options.className] button's class name                                                         // 5993\n     * @param {String} [options.value] data-value                                                                      // 5994\n     * @param {String} [options.title] button's title for popup                                                        // 5995\n     * @param {String} [options.dropdown] dropdown html                                                                // 5996\n     * @param {String} [options.hide] data-hide                                                                        // 5997\n     */                                                                                                                // 5998\n    var tplButton = function (label, options) {                                                                        // 5999\n      var event = options.event;                                                                                       // 6000\n      var value = options.value;                                                                                       // 6001\n      var title = options.title;                                                                                       // 6002\n      var className = options.className;                                                                               // 6003\n      var dropdown = options.dropdown;                                                                                 // 6004\n      var hide = options.hide;                                                                                         // 6005\n                                                                                                                       // 6006\n      return (dropdown ? '<div class=\"btn-group' +                                                                     // 6007\n               (className ? ' ' + className : '') + '\">' : '') +                                                       // 6008\n               '<button type=\"button\"' +                                                                               // 6009\n                 ' class=\"btn btn-default btn-sm' +                                                                    // 6010\n                   ((!dropdown && className) ? ' ' + className : '') +                                                 // 6011\n                   (dropdown ? ' dropdown-toggle' : '') +                                                              // 6012\n                 '\"' +                                                                                                 // 6013\n                 (dropdown ? ' data-toggle=\"dropdown\"' : '') +                                                         // 6014\n                 (title ? ' title=\"' + title + '\"' : '') +                                                             // 6015\n                 (event ? ' data-event=\"' + event + '\"' : '') +                                                        // 6016\n                 (value ? ' data-value=\\'' + value + '\\'' : '') +                                                      // 6017\n                 (hide ? ' data-hide=\\'' + hide + '\\'' : '') +                                                         // 6018\n                 ' tabindex=\"-1\">' +                                                                                   // 6019\n                 label +                                                                                               // 6020\n                 (dropdown ? ' <span class=\"caret\"></span>' : '') +                                                    // 6021\n               '</button>' +                                                                                           // 6022\n               (dropdown || '') +                                                                                      // 6023\n             (dropdown ? '</div>' : '');                                                                               // 6024\n    };                                                                                                                 // 6025\n                                                                                                                       // 6026\n    /**                                                                                                                // 6027\n     * bootstrap icon button template                                                                                  // 6028\n     * @private                                                                                                        // 6029\n     * @param {String} iconClassName                                                                                   // 6030\n     * @param {Object} [options]                                                                                       // 6031\n     * @param {String} [options.event]                                                                                 // 6032\n     * @param {String} [options.value]                                                                                 // 6033\n     * @param {String} [options.title]                                                                                 // 6034\n     * @param {String} [options.dropdown]                                                                              // 6035\n     */                                                                                                                // 6036\n    var tplIconButton = function (iconClassName, options) {                                                            // 6037\n      var label = '<i class=\"' + iconClassName + '\"></i>';                                                             // 6038\n      return tplButton(label, options);                                                                                // 6039\n    };                                                                                                                 // 6040\n                                                                                                                       // 6041\n    /**                                                                                                                // 6042\n     * bootstrap popover template                                                                                      // 6043\n     * @private                                                                                                        // 6044\n     * @param {String} className                                                                                       // 6045\n     * @param {String} content                                                                                         // 6046\n     */                                                                                                                // 6047\n    var tplPopover = function (className, content) {                                                                   // 6048\n      var $popover = $('<div class=\"' + className + ' popover bottom in\" style=\"display: none;\">' +                    // 6049\n               '<div class=\"arrow\"></div>' +                                                                           // 6050\n               '<div class=\"popover-content\">' +                                                                       // 6051\n               '</div>' +                                                                                              // 6052\n             '</div>');                                                                                                // 6053\n                                                                                                                       // 6054\n      $popover.find('.popover-content').append(content);                                                               // 6055\n      return $popover;                                                                                                 // 6056\n    };                                                                                                                 // 6057\n                                                                                                                       // 6058\n    /**                                                                                                                // 6059\n     * bootstrap dialog template                                                                                       // 6060\n     *                                                                                                                 // 6061\n     * @param {String} className                                                                                       // 6062\n     * @param {String} [title='']                                                                                      // 6063\n     * @param {String} body                                                                                            // 6064\n     * @param {String} [footer='']                                                                                     // 6065\n     */                                                                                                                // 6066\n    var tplDialog = function (className, title, body, footer) {                                                        // 6067\n      return '<div class=\"' + className + ' modal\" aria-hidden=\"false\">' +                                             // 6068\n               '<div class=\"modal-dialog\">' +                                                                          // 6069\n                 '<div class=\"modal-content\">' +                                                                       // 6070\n                   (title ?                                                                                            // 6071\n                   '<div class=\"modal-header\">' +                                                                      // 6072\n                     '<button type=\"button\" class=\"close\" aria-hidden=\"true\" tabindex=\"-1\">&times;</button>' +         // 6073\n                     '<h4 class=\"modal-title\">' + title + '</h4>' +                                                    // 6074\n                   '</div>' : ''                                                                                       // 6075\n                   ) +                                                                                                 // 6076\n                   '<div class=\"modal-body\">' + body + '</div>' +                                                      // 6077\n                   (footer ?                                                                                           // 6078\n                   '<div class=\"modal-footer\">' + footer + '</div>' : ''                                               // 6079\n                   ) +                                                                                                 // 6080\n                 '</div>' +                                                                                            // 6081\n               '</div>' +                                                                                              // 6082\n             '</div>';                                                                                                 // 6083\n    };                                                                                                                 // 6084\n                                                                                                                       // 6085\n    /**                                                                                                                // 6086\n     * bootstrap dropdown template                                                                                     // 6087\n     *                                                                                                                 // 6088\n     * @param {String|String[]} contents                                                                               // 6089\n     * @param {String} [className='']                                                                                  // 6090\n     * @param {String} [nodeName='']                                                                                   // 6091\n     */                                                                                                                // 6092\n    var tplDropdown = function (contents, className, nodeName) {                                                       // 6093\n      var classes = 'dropdown-menu' + (className ? ' ' + className : '');                                              // 6094\n      nodeName = nodeName || 'ul';                                                                                     // 6095\n      if (contents instanceof Array) {                                                                                 // 6096\n        contents = contents.join('');                                                                                  // 6097\n      }                                                                                                                // 6098\n                                                                                                                       // 6099\n      return '<' + nodeName + ' class=\"' + classes + '\">' + contents + '</' + nodeName + '>';                          // 6100\n    };                                                                                                                 // 6101\n                                                                                                                       // 6102\n    var tplButtonInfo = {                                                                                              // 6103\n      picture: function (lang, options) {                                                                              // 6104\n        return tplIconButton(options.iconPrefix + options.icons.image.image, {                                         // 6105\n          event: 'showImageDialog',                                                                                    // 6106\n          title: lang.image.image,                                                                                     // 6107\n          hide: true                                                                                                   // 6108\n        });                                                                                                            // 6109\n      },                                                                                                               // 6110\n      link: function (lang, options) {                                                                                 // 6111\n        return tplIconButton(options.iconPrefix + options.icons.link.link, {                                           // 6112\n          event: 'showLinkDialog',                                                                                     // 6113\n          title: lang.link.link,                                                                                       // 6114\n          hide: true                                                                                                   // 6115\n        });                                                                                                            // 6116\n      },                                                                                                               // 6117\n      table: function (lang, options) {                                                                                // 6118\n        var dropdown = [                                                                                               // 6119\n          '<div class=\"note-dimension-picker\">',                                                                       // 6120\n          '<div class=\"note-dimension-picker-mousecatcher\" data-event=\"insertTable\" data-value=\"1x1\"></div>',          // 6121\n          '<div class=\"note-dimension-picker-highlighted\"></div>',                                                     // 6122\n          '<div class=\"note-dimension-picker-unhighlighted\"></div>',                                                   // 6123\n          '</div>',                                                                                                    // 6124\n          '<div class=\"note-dimension-display\"> 1 x 1 </div>'                                                          // 6125\n        ];                                                                                                             // 6126\n                                                                                                                       // 6127\n        return tplIconButton(options.iconPrefix + options.icons.table.table, {                                         // 6128\n          title: lang.table.table,                                                                                     // 6129\n          dropdown: tplDropdown(dropdown, 'note-table')                                                                // 6130\n        });                                                                                                            // 6131\n      },                                                                                                               // 6132\n      style: function (lang, options) {                                                                                // 6133\n        var items = options.styleTags.reduce(function (memo, v) {                                                      // 6134\n          var label = lang.style[v === 'p' ? 'normal' : v];                                                            // 6135\n          return memo + '<li><a data-event=\"formatBlock\" href=\"#\" data-value=\"' + v + '\">' +                           // 6136\n                   (                                                                                                   // 6137\n                     (v === 'p' || v === 'pre') ? label :                                                              // 6138\n                     '<' + v + '>' + label + '</' + v + '>'                                                            // 6139\n                   ) +                                                                                                 // 6140\n                 '</a></li>';                                                                                          // 6141\n        }, '');                                                                                                        // 6142\n                                                                                                                       // 6143\n        return tplIconButton(options.iconPrefix + options.icons.style.style, {                                         // 6144\n          title: lang.style.style,                                                                                     // 6145\n          dropdown: tplDropdown(items)                                                                                 // 6146\n        });                                                                                                            // 6147\n      },                                                                                                               // 6148\n      fontname: function (lang, options) {                                                                             // 6149\n        var realFontList = [];                                                                                         // 6150\n        var items = options.fontNames.reduce(function (memo, v) {                                                      // 6151\n          if (!agent.isFontInstalled(v) && !list.contains(options.fontNamesIgnoreCheck, v)) {                          // 6152\n            return memo;                                                                                               // 6153\n          }                                                                                                            // 6154\n          realFontList.push(v);                                                                                        // 6155\n          return memo + '<li><a data-event=\"fontName\" href=\"#\" data-value=\"' + v + '\" style=\"font-family:\\'' + v + '\\'\">' +\n                          '<i class=\"' + options.iconPrefix + options.icons.misc.check + '\"></i> ' + v +               // 6157\n                        '</a></li>';                                                                                   // 6158\n        }, '');                                                                                                        // 6159\n                                                                                                                       // 6160\n        var hasDefaultFont = agent.isFontInstalled(options.defaultFontName);                                           // 6161\n        var defaultFontName = (hasDefaultFont) ? options.defaultFontName : realFontList[0];                            // 6162\n                                                                                                                       // 6163\n        var label = '<span class=\"note-current-fontname\">' +                                                           // 6164\n                        defaultFontName +                                                                              // 6165\n                     '</span>';                                                                                        // 6166\n        return tplButton(label, {                                                                                      // 6167\n          title: lang.font.name,                                                                                       // 6168\n          className: 'note-fontname',                                                                                  // 6169\n          dropdown: tplDropdown(items, 'note-check')                                                                   // 6170\n        });                                                                                                            // 6171\n      },                                                                                                               // 6172\n      fontsize: function (lang, options) {                                                                             // 6173\n        var items = options.fontSizes.reduce(function (memo, v) {                                                      // 6174\n          return memo + '<li><a data-event=\"fontSize\" href=\"#\" data-value=\"' + v + '\">' +                              // 6175\n                          '<i class=\"' + options.iconPrefix + options.icons.misc.check + '\"></i> ' + v +               // 6176\n                        '</a></li>';                                                                                   // 6177\n        }, '');                                                                                                        // 6178\n                                                                                                                       // 6179\n        var label = '<span class=\"note-current-fontsize\">11</span>';                                                   // 6180\n        return tplButton(label, {                                                                                      // 6181\n          title: lang.font.size,                                                                                       // 6182\n          className: 'note-fontsize',                                                                                  // 6183\n          dropdown: tplDropdown(items, 'note-check')                                                                   // 6184\n        });                                                                                                            // 6185\n      },                                                                                                               // 6186\n      color: function (lang, options) {                                                                                // 6187\n        var colorButtonLabel = '<i class=\"' +                                                                          // 6188\n                                  options.iconPrefix + options.icons.color.recent +                                    // 6189\n                                '\" style=\"color:black;background-color:yellow;\"></i>';                                 // 6190\n                                                                                                                       // 6191\n        var colorButton = tplButton(colorButtonLabel, {                                                                // 6192\n          className: 'note-recent-color',                                                                              // 6193\n          title: lang.color.recent,                                                                                    // 6194\n          event: 'color',                                                                                              // 6195\n          value: '{\"backColor\":\"yellow\"}'                                                                              // 6196\n        });                                                                                                            // 6197\n                                                                                                                       // 6198\n        var items = [                                                                                                  // 6199\n          '<li><div class=\"btn-group\">',                                                                               // 6200\n          '<div class=\"note-palette-title\">' + lang.color.background + '</div>',                                       // 6201\n          '<div class=\"note-color-reset\" data-event=\"backColor\"',                                                      // 6202\n          ' data-value=\"inherit\" title=\"' + lang.color.transparent + '\">' + lang.color.setTransparent + '</div>',      // 6203\n          '<div class=\"note-color-palette\" data-target-event=\"backColor\"></div>',                                      // 6204\n          '</div><div class=\"btn-group\">',                                                                             // 6205\n          '<div class=\"note-palette-title\">' + lang.color.foreground + '</div>',                                       // 6206\n          '<div class=\"note-color-reset\" data-event=\"foreColor\" data-value=\"inherit\" title=\"' + lang.color.reset + '\">',\n          lang.color.resetToDefault,                                                                                   // 6208\n          '</div>',                                                                                                    // 6209\n          '<div class=\"note-color-palette\" data-target-event=\"foreColor\"></div>',                                      // 6210\n          '</div></li>'                                                                                                // 6211\n        ];                                                                                                             // 6212\n                                                                                                                       // 6213\n        var moreButton = tplButton('', {                                                                               // 6214\n          title: lang.color.more,                                                                                      // 6215\n          dropdown: tplDropdown(items)                                                                                 // 6216\n        });                                                                                                            // 6217\n                                                                                                                       // 6218\n        return colorButton + moreButton;                                                                               // 6219\n      },                                                                                                               // 6220\n      bold: function (lang, options) {                                                                                 // 6221\n        return tplIconButton(options.iconPrefix + options.icons.font.bold, {                                           // 6222\n          event: 'bold',                                                                                               // 6223\n          title: lang.font.bold                                                                                        // 6224\n        });                                                                                                            // 6225\n      },                                                                                                               // 6226\n      italic: function (lang, options) {                                                                               // 6227\n        return tplIconButton(options.iconPrefix + options.icons.font.italic, {                                         // 6228\n          event: 'italic',                                                                                             // 6229\n          title: lang.font.italic                                                                                      // 6230\n        });                                                                                                            // 6231\n      },                                                                                                               // 6232\n      underline: function (lang, options) {                                                                            // 6233\n        return tplIconButton(options.iconPrefix + options.icons.font.underline, {                                      // 6234\n          event: 'underline',                                                                                          // 6235\n          title: lang.font.underline                                                                                   // 6236\n        });                                                                                                            // 6237\n      },                                                                                                               // 6238\n      strikethrough: function (lang, options) {                                                                        // 6239\n        return tplIconButton(options.iconPrefix + options.icons.font.strikethrough, {                                  // 6240\n          event: 'strikethrough',                                                                                      // 6241\n          title: lang.font.strikethrough                                                                               // 6242\n        });                                                                                                            // 6243\n      },                                                                                                               // 6244\n      superscript: function (lang, options) {                                                                          // 6245\n        return tplIconButton(options.iconPrefix + options.icons.font.superscript, {                                    // 6246\n          event: 'superscript',                                                                                        // 6247\n          title: lang.font.superscript                                                                                 // 6248\n        });                                                                                                            // 6249\n      },                                                                                                               // 6250\n      subscript: function (lang, options) {                                                                            // 6251\n        return tplIconButton(options.iconPrefix + options.icons.font.subscript, {                                      // 6252\n          event: 'subscript',                                                                                          // 6253\n          title: lang.font.subscript                                                                                   // 6254\n        });                                                                                                            // 6255\n      },                                                                                                               // 6256\n      clear: function (lang, options) {                                                                                // 6257\n        return tplIconButton(options.iconPrefix + options.icons.font.clear, {                                          // 6258\n          event: 'removeFormat',                                                                                       // 6259\n          title: lang.font.clear                                                                                       // 6260\n        });                                                                                                            // 6261\n      },                                                                                                               // 6262\n      ul: function (lang, options) {                                                                                   // 6263\n        return tplIconButton(options.iconPrefix + options.icons.lists.unordered, {                                     // 6264\n          event: 'insertUnorderedList',                                                                                // 6265\n          title: lang.lists.unordered                                                                                  // 6266\n        });                                                                                                            // 6267\n      },                                                                                                               // 6268\n      ol: function (lang, options) {                                                                                   // 6269\n        return tplIconButton(options.iconPrefix + options.icons.lists.ordered, {                                       // 6270\n          event: 'insertOrderedList',                                                                                  // 6271\n          title: lang.lists.ordered                                                                                    // 6272\n        });                                                                                                            // 6273\n      },                                                                                                               // 6274\n      paragraph: function (lang, options) {                                                                            // 6275\n        var leftButton = tplIconButton(options.iconPrefix + options.icons.paragraph.left, {                            // 6276\n          title: lang.paragraph.left,                                                                                  // 6277\n          event: 'justifyLeft'                                                                                         // 6278\n        });                                                                                                            // 6279\n        var centerButton = tplIconButton(options.iconPrefix + options.icons.paragraph.center, {                        // 6280\n          title: lang.paragraph.center,                                                                                // 6281\n          event: 'justifyCenter'                                                                                       // 6282\n        });                                                                                                            // 6283\n        var rightButton = tplIconButton(options.iconPrefix + options.icons.paragraph.right, {                          // 6284\n          title: lang.paragraph.right,                                                                                 // 6285\n          event: 'justifyRight'                                                                                        // 6286\n        });                                                                                                            // 6287\n        var justifyButton = tplIconButton(options.iconPrefix + options.icons.paragraph.justify, {                      // 6288\n          title: lang.paragraph.justify,                                                                               // 6289\n          event: 'justifyFull'                                                                                         // 6290\n        });                                                                                                            // 6291\n                                                                                                                       // 6292\n        var outdentButton = tplIconButton(options.iconPrefix + options.icons.paragraph.outdent, {                      // 6293\n          title: lang.paragraph.outdent,                                                                               // 6294\n          event: 'outdent'                                                                                             // 6295\n        });                                                                                                            // 6296\n        var indentButton = tplIconButton(options.iconPrefix + options.icons.paragraph.indent, {                        // 6297\n          title: lang.paragraph.indent,                                                                                // 6298\n          event: 'indent'                                                                                              // 6299\n        });                                                                                                            // 6300\n                                                                                                                       // 6301\n        var dropdown = [                                                                                               // 6302\n          '<div class=\"note-align btn-group\">',                                                                        // 6303\n          leftButton + centerButton + rightButton + justifyButton,                                                     // 6304\n          '</div><div class=\"note-list btn-group\">',                                                                   // 6305\n          indentButton + outdentButton,                                                                                // 6306\n          '</div>'                                                                                                     // 6307\n        ];                                                                                                             // 6308\n                                                                                                                       // 6309\n        return tplIconButton(options.iconPrefix + options.icons.paragraph.paragraph, {                                 // 6310\n          title: lang.paragraph.paragraph,                                                                             // 6311\n          dropdown: tplDropdown(dropdown, '', 'div')                                                                   // 6312\n        });                                                                                                            // 6313\n      },                                                                                                               // 6314\n      height: function (lang, options) {                                                                               // 6315\n        var items = options.lineHeights.reduce(function (memo, v) {                                                    // 6316\n          return memo + '<li><a data-event=\"lineHeight\" href=\"#\" data-value=\"' + parseFloat(v) + '\">' +                // 6317\n                          '<i class=\"' + options.iconPrefix + options.icons.misc.check + '\"></i> ' + v +               // 6318\n                        '</a></li>';                                                                                   // 6319\n        }, '');                                                                                                        // 6320\n                                                                                                                       // 6321\n        return tplIconButton(options.iconPrefix + options.icons.font.height, {                                         // 6322\n          title: lang.font.height,                                                                                     // 6323\n          dropdown: tplDropdown(items, 'note-check')                                                                   // 6324\n        });                                                                                                            // 6325\n                                                                                                                       // 6326\n      },                                                                                                               // 6327\n      help: function (lang, options) {                                                                                 // 6328\n        return tplIconButton(options.iconPrefix + options.icons.options.help, {                                        // 6329\n          event: 'showHelpDialog',                                                                                     // 6330\n          title: lang.options.help,                                                                                    // 6331\n          hide: true                                                                                                   // 6332\n        });                                                                                                            // 6333\n      },                                                                                                               // 6334\n      fullscreen: function (lang, options) {                                                                           // 6335\n        return tplIconButton(options.iconPrefix + options.icons.options.fullscreen, {                                  // 6336\n          event: 'fullscreen',                                                                                         // 6337\n          title: lang.options.fullscreen                                                                               // 6338\n        });                                                                                                            // 6339\n      },                                                                                                               // 6340\n      codeview: function (lang, options) {                                                                             // 6341\n        return tplIconButton(options.iconPrefix + options.icons.options.codeview, {                                    // 6342\n          event: 'codeview',                                                                                           // 6343\n          title: lang.options.codeview                                                                                 // 6344\n        });                                                                                                            // 6345\n      },                                                                                                               // 6346\n      undo: function (lang, options) {                                                                                 // 6347\n        return tplIconButton(options.iconPrefix + options.icons.history.undo, {                                        // 6348\n          event: 'undo',                                                                                               // 6349\n          title: lang.history.undo                                                                                     // 6350\n        });                                                                                                            // 6351\n      },                                                                                                               // 6352\n      redo: function (lang, options) {                                                                                 // 6353\n        return tplIconButton(options.iconPrefix + options.icons.history.redo, {                                        // 6354\n          event: 'redo',                                                                                               // 6355\n          title: lang.history.redo                                                                                     // 6356\n        });                                                                                                            // 6357\n      },                                                                                                               // 6358\n      hr: function (lang, options) {                                                                                   // 6359\n        return tplIconButton(options.iconPrefix + options.icons.hr.insert, {                                           // 6360\n          event: 'insertHorizontalRule',                                                                               // 6361\n          title: lang.hr.insert                                                                                        // 6362\n        });                                                                                                            // 6363\n      }                                                                                                                // 6364\n    };                                                                                                                 // 6365\n                                                                                                                       // 6366\n    var tplPopovers = function (lang, options) {                                                                       // 6367\n      var tplLinkPopover = function () {                                                                               // 6368\n        var linkButton = tplIconButton(options.iconPrefix + options.icons.link.edit, {                                 // 6369\n          title: lang.link.edit,                                                                                       // 6370\n          event: 'showLinkDialog',                                                                                     // 6371\n          hide: true                                                                                                   // 6372\n        });                                                                                                            // 6373\n        var unlinkButton = tplIconButton(options.iconPrefix + options.icons.link.unlink, {                             // 6374\n          title: lang.link.unlink,                                                                                     // 6375\n          event: 'unlink'                                                                                              // 6376\n        });                                                                                                            // 6377\n        var content = '<a href=\"http://www.google.com\" target=\"_blank\">www.google.com</a>&nbsp;&nbsp;' +               // 6378\n                      '<div class=\"note-insert btn-group\">' +                                                          // 6379\n                        linkButton + unlinkButton +                                                                    // 6380\n                      '</div>';                                                                                        // 6381\n        return tplPopover('note-link-popover', content);                                                               // 6382\n      };                                                                                                               // 6383\n                                                                                                                       // 6384\n      var tplImagePopover = function () {                                                                              // 6385\n        var fullButton = tplButton('<span class=\"note-fontsize-10\">100%</span>', {                                     // 6386\n          title: lang.image.resizeFull,                                                                                // 6387\n          event: 'resize',                                                                                             // 6388\n          value: '1'                                                                                                   // 6389\n        });                                                                                                            // 6390\n        var halfButton = tplButton('<span class=\"note-fontsize-10\">50%</span>', {                                      // 6391\n          title: lang.image.resizeHalf,                                                                                // 6392\n          event: 'resize',                                                                                             // 6393\n          value: '0.5'                                                                                                 // 6394\n        });                                                                                                            // 6395\n        var quarterButton = tplButton('<span class=\"note-fontsize-10\">25%</span>', {                                   // 6396\n          title: lang.image.resizeQuarter,                                                                             // 6397\n          event: 'resize',                                                                                             // 6398\n          value: '0.25'                                                                                                // 6399\n        });                                                                                                            // 6400\n                                                                                                                       // 6401\n        var leftButton = tplIconButton(options.iconPrefix + options.icons.image.floatLeft, {                           // 6402\n          title: lang.image.floatLeft,                                                                                 // 6403\n          event: 'floatMe',                                                                                            // 6404\n          value: 'left'                                                                                                // 6405\n        });                                                                                                            // 6406\n        var rightButton = tplIconButton(options.iconPrefix + options.icons.image.floatRight, {                         // 6407\n          title: lang.image.floatRight,                                                                                // 6408\n          event: 'floatMe',                                                                                            // 6409\n          value: 'right'                                                                                               // 6410\n        });                                                                                                            // 6411\n        var justifyButton = tplIconButton(options.iconPrefix + options.icons.image.floatNone, {                        // 6412\n          title: lang.image.floatNone,                                                                                 // 6413\n          event: 'floatMe',                                                                                            // 6414\n          value: 'none'                                                                                                // 6415\n        });                                                                                                            // 6416\n                                                                                                                       // 6417\n        var roundedButton = tplIconButton(options.iconPrefix + options.icons.image.shapeRounded, {                     // 6418\n          title: lang.image.shapeRounded,                                                                              // 6419\n          event: 'imageShape',                                                                                         // 6420\n          value: 'img-rounded'                                                                                         // 6421\n        });                                                                                                            // 6422\n        var circleButton = tplIconButton(options.iconPrefix + options.icons.image.shapeCircle, {                       // 6423\n          title: lang.image.shapeCircle,                                                                               // 6424\n          event: 'imageShape',                                                                                         // 6425\n          value: 'img-circle'                                                                                          // 6426\n        });                                                                                                            // 6427\n        var thumbnailButton = tplIconButton(options.iconPrefix + options.icons.image.shapeThumbnail, {                 // 6428\n          title: lang.image.shapeThumbnail,                                                                            // 6429\n          event: 'imageShape',                                                                                         // 6430\n          value: 'img-thumbnail'                                                                                       // 6431\n        });                                                                                                            // 6432\n        var noneButton = tplIconButton(options.iconPrefix + options.icons.image.shapeNone, {                           // 6433\n          title: lang.image.shapeNone,                                                                                 // 6434\n          event: 'imageShape',                                                                                         // 6435\n          value: ''                                                                                                    // 6436\n        });                                                                                                            // 6437\n                                                                                                                       // 6438\n        var removeButton = tplIconButton(options.iconPrefix + options.icons.image.remove, {                            // 6439\n          title: lang.image.remove,                                                                                    // 6440\n          event: 'removeMedia',                                                                                        // 6441\n          value: 'none'                                                                                                // 6442\n        });                                                                                                            // 6443\n                                                                                                                       // 6444\n        var content = (options.disableResizeImage ? '' : '<div class=\"btn-group\">' + fullButton + halfButton + quarterButton + '</div>') +\n                      '<div class=\"btn-group\">' + leftButton + rightButton + justifyButton + '</div><br>' +            // 6446\n                      '<div class=\"btn-group\">' + roundedButton + circleButton + thumbnailButton + noneButton + '</div>' +\n                      '<div class=\"btn-group\">' + removeButton + '</div>';                                             // 6448\n        return tplPopover('note-image-popover', content);                                                              // 6449\n      };                                                                                                               // 6450\n                                                                                                                       // 6451\n      var tplAirPopover = function () {                                                                                // 6452\n        var $content = $('<div />');                                                                                   // 6453\n        for (var idx = 0, len = options.airPopover.length; idx < len; idx ++) {                                        // 6454\n          var group = options.airPopover[idx];                                                                         // 6455\n                                                                                                                       // 6456\n          var $group = $('<div class=\"note-' + group[0] + ' btn-group\">');                                             // 6457\n          for (var i = 0, lenGroup = group[1].length; i < lenGroup; i++) {                                             // 6458\n            var $button = $(tplButtonInfo[group[1][i]](lang, options));                                                // 6459\n                                                                                                                       // 6460\n            $button.attr('data-name', group[1][i]);                                                                    // 6461\n                                                                                                                       // 6462\n            $group.append($button);                                                                                    // 6463\n          }                                                                                                            // 6464\n          $content.append($group);                                                                                     // 6465\n        }                                                                                                              // 6466\n                                                                                                                       // 6467\n        return tplPopover('note-air-popover', $content.children());                                                    // 6468\n      };                                                                                                               // 6469\n                                                                                                                       // 6470\n      var $notePopover = $('<div class=\"note-popover\" />');                                                            // 6471\n                                                                                                                       // 6472\n      $notePopover.append(tplLinkPopover());                                                                           // 6473\n      $notePopover.append(tplImagePopover());                                                                          // 6474\n                                                                                                                       // 6475\n      if (options.airMode) {                                                                                           // 6476\n        $notePopover.append(tplAirPopover());                                                                          // 6477\n      }                                                                                                                // 6478\n                                                                                                                       // 6479\n      return $notePopover;                                                                                             // 6480\n    };                                                                                                                 // 6481\n                                                                                                                       // 6482\n    var tplHandles = function (options) {                                                                              // 6483\n      return '<div class=\"note-handle\">' +                                                                             // 6484\n               '<div class=\"note-control-selection\">' +                                                                // 6485\n                 '<div class=\"note-control-selection-bg\"></div>' +                                                     // 6486\n                 '<div class=\"note-control-holder note-control-nw\"></div>' +                                           // 6487\n                 '<div class=\"note-control-holder note-control-ne\"></div>' +                                           // 6488\n                 '<div class=\"note-control-holder note-control-sw\"></div>' +                                           // 6489\n                 '<div class=\"' +                                                                                      // 6490\n                 (options.disableResizeImage ? 'note-control-holder' : 'note-control-sizing') +                        // 6491\n                 ' note-control-se\"></div>' +                                                                          // 6492\n                 (options.disableResizeImage ? '' : '<div class=\"note-control-selection-info\"></div>') +               // 6493\n               '</div>' +                                                                                              // 6494\n             '</div>';                                                                                                 // 6495\n    };                                                                                                                 // 6496\n                                                                                                                       // 6497\n    /**                                                                                                                // 6498\n     * shortcut table template                                                                                         // 6499\n     * @param {String} title                                                                                           // 6500\n     * @param {String} body                                                                                            // 6501\n     */                                                                                                                // 6502\n    var tplShortcut = function (title, keys) {                                                                         // 6503\n      var keyClass = 'note-shortcut-col col-xs-6 note-shortcut-';                                                      // 6504\n      var body = [];                                                                                                   // 6505\n                                                                                                                       // 6506\n      for (var i in keys) {                                                                                            // 6507\n        if (keys.hasOwnProperty(i)) {                                                                                  // 6508\n          body.push(                                                                                                   // 6509\n            '<div class=\"' + keyClass + 'key\">' + keys[i].kbd + '</div>' +                                             // 6510\n            '<div class=\"' + keyClass + 'name\">' + keys[i].text + '</div>'                                             // 6511\n            );                                                                                                         // 6512\n        }                                                                                                              // 6513\n      }                                                                                                                // 6514\n                                                                                                                       // 6515\n      return '<div class=\"note-shortcut-row row\"><div class=\"' + keyClass + 'title col-xs-offset-6\">' + title + '</div></div>' +\n             '<div class=\"note-shortcut-row row\">' + body.join('</div><div class=\"note-shortcut-row row\">') + '</div>';\n    };                                                                                                                 // 6518\n                                                                                                                       // 6519\n    var tplShortcutText = function (lang) {                                                                            // 6520\n      var keys = [                                                                                                     // 6521\n        { kbd: '⌘ + B', text: lang.font.bold },                                                                        // 6522\n        { kbd: '⌘ + I', text: lang.font.italic },                                                                      // 6523\n        { kbd: '⌘ + U', text: lang.font.underline },                                                                   // 6524\n        { kbd: '⌘ + \\\\', text: lang.font.clear }                                                                       // 6525\n      ];                                                                                                               // 6526\n                                                                                                                       // 6527\n      return tplShortcut(lang.shortcut.textFormatting, keys);                                                          // 6528\n    };                                                                                                                 // 6529\n                                                                                                                       // 6530\n    var tplShortcutAction = function (lang) {                                                                          // 6531\n      var keys = [                                                                                                     // 6532\n        { kbd: '⌘ + Z', text: lang.history.undo },                                                                     // 6533\n        { kbd: '⌘ + ⇧ + Z', text: lang.history.redo },                                                                 // 6534\n        { kbd: '⌘ + ]', text: lang.paragraph.indent },                                                                 // 6535\n        { kbd: '⌘ + [', text: lang.paragraph.outdent },                                                                // 6536\n        { kbd: '⌘ + ENTER', text: lang.hr.insert }                                                                     // 6537\n      ];                                                                                                               // 6538\n                                                                                                                       // 6539\n      return tplShortcut(lang.shortcut.action, keys);                                                                  // 6540\n    };                                                                                                                 // 6541\n                                                                                                                       // 6542\n    var tplShortcutPara = function (lang) {                                                                            // 6543\n      var keys = [                                                                                                     // 6544\n        { kbd: '⌘ + ⇧ + L', text: lang.paragraph.left },                                                               // 6545\n        { kbd: '⌘ + ⇧ + E', text: lang.paragraph.center },                                                             // 6546\n        { kbd: '⌘ + ⇧ + R', text: lang.paragraph.right },                                                              // 6547\n        { kbd: '⌘ + ⇧ + J', text: lang.paragraph.justify },                                                            // 6548\n        { kbd: '⌘ + ⇧ + NUM7', text: lang.lists.ordered },                                                             // 6549\n        { kbd: '⌘ + ⇧ + NUM8', text: lang.lists.unordered }                                                            // 6550\n      ];                                                                                                               // 6551\n                                                                                                                       // 6552\n      return tplShortcut(lang.shortcut.paragraphFormatting, keys);                                                     // 6553\n    };                                                                                                                 // 6554\n                                                                                                                       // 6555\n    var tplShortcutStyle = function (lang) {                                                                           // 6556\n      var keys = [                                                                                                     // 6557\n        { kbd: '⌘ + NUM0', text: lang.style.normal },                                                                  // 6558\n        { kbd: '⌘ + NUM1', text: lang.style.h1 },                                                                      // 6559\n        { kbd: '⌘ + NUM2', text: lang.style.h2 },                                                                      // 6560\n        { kbd: '⌘ + NUM3', text: lang.style.h3 },                                                                      // 6561\n        { kbd: '⌘ + NUM4', text: lang.style.h4 },                                                                      // 6562\n        { kbd: '⌘ + NUM5', text: lang.style.h5 },                                                                      // 6563\n        { kbd: '⌘ + NUM6', text: lang.style.h6 }                                                                       // 6564\n      ];                                                                                                               // 6565\n                                                                                                                       // 6566\n      return tplShortcut(lang.shortcut.documentStyle, keys);                                                           // 6567\n    };                                                                                                                 // 6568\n                                                                                                                       // 6569\n    var tplExtraShortcuts = function (lang, options) {                                                                 // 6570\n      var extraKeys = options.extraKeys;                                                                               // 6571\n      var keys = [];                                                                                                   // 6572\n                                                                                                                       // 6573\n      for (var key in extraKeys) {                                                                                     // 6574\n        if (extraKeys.hasOwnProperty(key)) {                                                                           // 6575\n          keys.push({ kbd: key, text: extraKeys[key] });                                                               // 6576\n        }                                                                                                              // 6577\n      }                                                                                                                // 6578\n                                                                                                                       // 6579\n      return tplShortcut(lang.shortcut.extraKeys, keys);                                                               // 6580\n    };                                                                                                                 // 6581\n                                                                                                                       // 6582\n    var tplShortcutTable = function (lang, options) {                                                                  // 6583\n      var colClass = 'class=\"note-shortcut note-shortcut-col col-sm-6 col-xs-12\"';                                     // 6584\n      var template = [                                                                                                 // 6585\n        '<div ' + colClass + '>' + tplShortcutAction(lang, options) + '</div>' +                                       // 6586\n        '<div ' + colClass + '>' + tplShortcutText(lang, options) + '</div>',                                          // 6587\n        '<div ' + colClass + '>' + tplShortcutStyle(lang, options) + '</div>' +                                        // 6588\n        '<div ' + colClass + '>' + tplShortcutPara(lang, options) + '</div>'                                           // 6589\n      ];                                                                                                               // 6590\n                                                                                                                       // 6591\n      if (options.extraKeys) {                                                                                         // 6592\n        template.push('<div ' + colClass + '>' + tplExtraShortcuts(lang, options) + '</div>');                         // 6593\n      }                                                                                                                // 6594\n                                                                                                                       // 6595\n      return '<div class=\"note-shortcut-row row\">' +                                                                   // 6596\n               template.join('</div><div class=\"note-shortcut-row row\">') +                                            // 6597\n             '</div>';                                                                                                 // 6598\n    };                                                                                                                 // 6599\n                                                                                                                       // 6600\n    var replaceMacKeys = function (sHtml) {                                                                            // 6601\n      return sHtml.replace(/⌘/g, 'Ctrl').replace(/⇧/g, 'Shift');                                                       // 6602\n    };                                                                                                                 // 6603\n                                                                                                                       // 6604\n    var tplDialogInfo = {                                                                                              // 6605\n      image: function (lang, options) {                                                                                // 6606\n        var imageLimitation = '';                                                                                      // 6607\n        if (options.maximumImageFileSize) {                                                                            // 6608\n          var unit = Math.floor(Math.log(options.maximumImageFileSize) / Math.log(1024));                              // 6609\n          var readableSize = (options.maximumImageFileSize / Math.pow(1024, unit)).toFixed(2) * 1 +                    // 6610\n                             ' ' + ' KMGTP'[unit] + 'B';                                                               // 6611\n          imageLimitation = '<small>' + lang.image.maximumFileSize + ' : ' + readableSize + '</small>';                // 6612\n        }                                                                                                              // 6613\n                                                                                                                       // 6614\n        var body = '<div class=\"form-group row note-group-select-from-files\">' +                                       // 6615\n                     '<label>' + lang.image.selectFromFiles + '</label>' +                                             // 6616\n                     '<input class=\"note-image-input form-control\" type=\"file\" name=\"files\" accept=\"image/*\" multiple=\"multiple\" />' +\n                     imageLimitation +                                                                                 // 6618\n                   '</div>' +                                                                                          // 6619\n                   '<div class=\"form-group row\">' +                                                                    // 6620\n                     '<label>' + lang.image.url + '</label>' +                                                         // 6621\n                     '<input class=\"note-image-url form-control col-md-12\" type=\"text\" />' +                           // 6622\n                   '</div>';                                                                                           // 6623\n        var footer = '<button href=\"#\" class=\"btn btn-primary note-image-btn disabled\" disabled>' + lang.image.insert + '</button>';\n        return tplDialog('note-image-dialog', lang.image.insert, body, footer);                                        // 6625\n      },                                                                                                               // 6626\n                                                                                                                       // 6627\n      link: function (lang, options) {                                                                                 // 6628\n        var body = '<div class=\"form-group row\">' +                                                                    // 6629\n                     '<label>' + lang.link.textToDisplay + '</label>' +                                                // 6630\n                     '<input class=\"note-link-text form-control col-md-12\" type=\"text\" />' +                           // 6631\n                   '</div>' +                                                                                          // 6632\n                   '<div class=\"form-group row\">' +                                                                    // 6633\n                     '<label>' + lang.link.url + '</label>' +                                                          // 6634\n                     '<input class=\"note-link-url form-control col-md-12\" type=\"text\" value=\"http://\" />' +            // 6635\n                   '</div>' +                                                                                          // 6636\n                   (!options.disableLinkTarget ?                                                                       // 6637\n                     '<div class=\"checkbox\">' +                                                                        // 6638\n                       '<label>' + '<input type=\"checkbox\" checked> ' +                                                // 6639\n                         lang.link.openInNewWindow +                                                                   // 6640\n                       '</label>' +                                                                                    // 6641\n                     '</div>' : ''                                                                                     // 6642\n                   );                                                                                                  // 6643\n        var footer = '<button href=\"#\" class=\"btn btn-primary note-link-btn disabled\" disabled>' + lang.link.insert + '</button>';\n        return tplDialog('note-link-dialog', lang.link.insert, body, footer);                                          // 6645\n      },                                                                                                               // 6646\n                                                                                                                       // 6647\n      help: function (lang, options) {                                                                                 // 6648\n        var body = '<a class=\"modal-close pull-right\" aria-hidden=\"true\" tabindex=\"-1\">' + lang.shortcut.close + '</a>' +\n                   '<div class=\"title\">' + lang.shortcut.shortcuts + '</div>' +                                        // 6650\n                   (agent.isMac ? tplShortcutTable(lang, options) : replaceMacKeys(tplShortcutTable(lang, options))) + // 6651\n                   '<p class=\"text-center\">' +                                                                         // 6652\n                     '<a href=\"//summernote.org/\" target=\"_blank\">Summernote 0.6.16</a> · ' +                          // 6653\n                     '<a href=\"//github.com/summernote/summernote\" target=\"_blank\">Project</a> · ' +                   // 6654\n                     '<a href=\"//github.com/summernote/summernote/issues\" target=\"_blank\">Issues</a>' +                // 6655\n                   '</p>';                                                                                             // 6656\n        return tplDialog('note-help-dialog', '', body, '');                                                            // 6657\n      }                                                                                                                // 6658\n    };                                                                                                                 // 6659\n                                                                                                                       // 6660\n    var tplDialogs = function (lang, options) {                                                                        // 6661\n      var dialogs = '';                                                                                                // 6662\n                                                                                                                       // 6663\n      $.each(tplDialogInfo, function (idx, tplDialog) {                                                                // 6664\n        dialogs += tplDialog(lang, options);                                                                           // 6665\n      });                                                                                                              // 6666\n                                                                                                                       // 6667\n      return '<div class=\"note-dialog\">' + dialogs + '</div>';                                                         // 6668\n    };                                                                                                                 // 6669\n                                                                                                                       // 6670\n    var tplStatusbar = function () {                                                                                   // 6671\n      return '<div class=\"note-resizebar\">' +                                                                          // 6672\n               '<div class=\"note-icon-bar\"></div>' +                                                                   // 6673\n               '<div class=\"note-icon-bar\"></div>' +                                                                   // 6674\n               '<div class=\"note-icon-bar\"></div>' +                                                                   // 6675\n             '</div>';                                                                                                 // 6676\n    };                                                                                                                 // 6677\n                                                                                                                       // 6678\n    var representShortcut = function (str) {                                                                           // 6679\n      if (agent.isMac) {                                                                                               // 6680\n        str = str.replace('CMD', '⌘').replace('SHIFT', '⇧');                                                           // 6681\n      }                                                                                                                // 6682\n                                                                                                                       // 6683\n      return str.replace('BACKSLASH', '\\\\')                                                                            // 6684\n                .replace('SLASH', '/')                                                                                 // 6685\n                .replace('LEFTBRACKET', '[')                                                                           // 6686\n                .replace('RIGHTBRACKET', ']');                                                                         // 6687\n    };                                                                                                                 // 6688\n                                                                                                                       // 6689\n    /**                                                                                                                // 6690\n     * createTooltip                                                                                                   // 6691\n     *                                                                                                                 // 6692\n     * @param {jQuery} $container                                                                                      // 6693\n     * @param {Object} keyMap                                                                                          // 6694\n     * @param {String} [sPlacement]                                                                                    // 6695\n     */                                                                                                                // 6696\n    var createTooltip = function ($container, keyMap, sPlacement) {                                                    // 6697\n      var invertedKeyMap = func.invertObject(keyMap);                                                                  // 6698\n      var $buttons = $container.find('button');                                                                        // 6699\n                                                                                                                       // 6700\n      $buttons.each(function (i, elBtn) {                                                                              // 6701\n        var $btn = $(elBtn);                                                                                           // 6702\n        var sShortcut = invertedKeyMap[$btn.data('event')];                                                            // 6703\n        if (sShortcut) {                                                                                               // 6704\n          $btn.attr('title', function (i, v) {                                                                         // 6705\n            return v + ' (' + representShortcut(sShortcut) + ')';                                                      // 6706\n          });                                                                                                          // 6707\n        }                                                                                                              // 6708\n      // bootstrap tooltip on btn-group bug                                                                            // 6709\n      // https://github.com/twbs/bootstrap/issues/5687                                                                 // 6710\n      }).tooltip({                                                                                                     // 6711\n        container: 'body',                                                                                             // 6712\n        trigger: 'hover',                                                                                              // 6713\n        placement: sPlacement || 'top'                                                                                 // 6714\n      }).on('click', function () {                                                                                     // 6715\n        $(this).tooltip('hide');                                                                                       // 6716\n      });                                                                                                              // 6717\n    };                                                                                                                 // 6718\n                                                                                                                       // 6719\n    // createPalette                                                                                                   // 6720\n    var createPalette = function ($container, options) {                                                               // 6721\n      var colorInfo = options.colors;                                                                                  // 6722\n      $container.find('.note-color-palette').each(function () {                                                        // 6723\n        var $palette = $(this), eventName = $palette.attr('data-target-event');                                        // 6724\n        var paletteContents = [];                                                                                      // 6725\n        for (var row = 0, lenRow = colorInfo.length; row < lenRow; row++) {                                            // 6726\n          var colors = colorInfo[row];                                                                                 // 6727\n          var buttons = [];                                                                                            // 6728\n          for (var col = 0, lenCol = colors.length; col < lenCol; col++) {                                             // 6729\n            var color = colors[col];                                                                                   // 6730\n            buttons.push(['<button type=\"button\" class=\"note-color-btn\" style=\"background-color:', color,              // 6731\n                           ';\" data-event=\"', eventName,                                                               // 6732\n                           '\" data-value=\"', color,                                                                    // 6733\n                           '\" title=\"', color,                                                                         // 6734\n                           '\" data-toggle=\"button\" tabindex=\"-1\"></button>'].join(''));                                // 6735\n          }                                                                                                            // 6736\n          paletteContents.push('<div class=\"note-color-row\">' + buttons.join('') + '</div>');                          // 6737\n        }                                                                                                              // 6738\n        $palette.html(paletteContents.join(''));                                                                       // 6739\n      });                                                                                                              // 6740\n    };                                                                                                                 // 6741\n                                                                                                                       // 6742\n    /**                                                                                                                // 6743\n     * create summernote layout (air mode)                                                                             // 6744\n     *                                                                                                                 // 6745\n     * @param {jQuery} $holder                                                                                         // 6746\n     * @param {Object} options                                                                                         // 6747\n     */                                                                                                                // 6748\n    this.createLayoutByAirMode = function ($holder, options) {                                                         // 6749\n      var langInfo = options.langInfo;                                                                                 // 6750\n      var keyMap = options.keyMap[agent.isMac ? 'mac' : 'pc'];                                                         // 6751\n      var id = func.uniqueId();                                                                                        // 6752\n                                                                                                                       // 6753\n      $holder.addClass('note-air-editor note-editable panel-body');                                                    // 6754\n      $holder.attr({                                                                                                   // 6755\n        'id': 'note-editor-' + id,                                                                                     // 6756\n        'contentEditable': true                                                                                        // 6757\n      });                                                                                                              // 6758\n                                                                                                                       // 6759\n      var body = document.body;                                                                                        // 6760\n                                                                                                                       // 6761\n      // create Popover                                                                                                // 6762\n      var $popover = $(tplPopovers(langInfo, options));                                                                // 6763\n      $popover.addClass('note-air-layout');                                                                            // 6764\n      $popover.attr('id', 'note-popover-' + id);                                                                       // 6765\n      $popover.appendTo(body);                                                                                         // 6766\n      createTooltip($popover, keyMap);                                                                                 // 6767\n      createPalette($popover, options);                                                                                // 6768\n                                                                                                                       // 6769\n      // create Handle                                                                                                 // 6770\n      var $handle = $(tplHandles(options));                                                                            // 6771\n      $handle.addClass('note-air-layout');                                                                             // 6772\n      $handle.attr('id', 'note-handle-' + id);                                                                         // 6773\n      $handle.appendTo(body);                                                                                          // 6774\n                                                                                                                       // 6775\n      // create Dialog                                                                                                 // 6776\n      var $dialog = $(tplDialogs(langInfo, options));                                                                  // 6777\n      $dialog.addClass('note-air-layout');                                                                             // 6778\n      $dialog.attr('id', 'note-dialog-' + id);                                                                         // 6779\n      $dialog.find('button.close, a.modal-close').click(function () {                                                  // 6780\n        $(this).closest('.modal').modal('hide');                                                                       // 6781\n      });                                                                                                              // 6782\n      $dialog.appendTo(body);                                                                                          // 6783\n    };                                                                                                                 // 6784\n                                                                                                                       // 6785\n    /**                                                                                                                // 6786\n     * create summernote layout (normal mode)                                                                          // 6787\n     *                                                                                                                 // 6788\n     * @param {jQuery} $holder                                                                                         // 6789\n     * @param {Object} options                                                                                         // 6790\n     */                                                                                                                // 6791\n    this.createLayoutByFrame = function ($holder, options) {                                                           // 6792\n      var langInfo = options.langInfo;                                                                                 // 6793\n                                                                                                                       // 6794\n      //01. create Editor                                                                                              // 6795\n      var $editor = $('<div class=\"note-editor panel panel-default\" />');                                              // 6796\n      if (options.width) {                                                                                             // 6797\n        $editor.width(options.width);                                                                                  // 6798\n      }                                                                                                                // 6799\n                                                                                                                       // 6800\n      //02. statusbar (resizebar)                                                                                      // 6801\n      if (options.height > 0) {                                                                                        // 6802\n        $('<div class=\"note-statusbar\">' + (options.disableResizeEditor ? '' : tplStatusbar()) + '</div>').prependTo($editor);\n      }                                                                                                                // 6804\n                                                                                                                       // 6805\n      //03 editing area                                                                                                // 6806\n      var $editingArea = $('<div class=\"note-editing-area\" />');                                                       // 6807\n      //03. create editable                                                                                            // 6808\n      var isContentEditable = !$holder.is(':disabled');                                                                // 6809\n      var $editable = $('<div class=\"note-editable panel-body\" contentEditable=\"' + isContentEditable + '\"></div>').prependTo($editingArea);\n                                                                                                                       // 6811\n      if (options.height) {                                                                                            // 6812\n        $editable.height(options.height);                                                                              // 6813\n      }                                                                                                                // 6814\n      if (options.direction) {                                                                                         // 6815\n        $editable.attr('dir', options.direction);                                                                      // 6816\n      }                                                                                                                // 6817\n      var placeholder = $holder.attr('placeholder') || options.placeholder;                                            // 6818\n      if (placeholder) {                                                                                               // 6819\n        $editable.attr('data-placeholder', placeholder);                                                               // 6820\n      }                                                                                                                // 6821\n                                                                                                                       // 6822\n      $editable.html(dom.html($holder) || dom.emptyPara);                                                              // 6823\n                                                                                                                       // 6824\n      //031. create codable                                                                                            // 6825\n      $('<textarea class=\"note-codable\"></textarea>').prependTo($editingArea);                                         // 6826\n                                                                                                                       // 6827\n      //04. create Popover                                                                                             // 6828\n      var $popover = $(tplPopovers(langInfo, options)).prependTo($editingArea);                                        // 6829\n      createPalette($popover, options);                                                                                // 6830\n      createTooltip($popover, keyMap);                                                                                 // 6831\n                                                                                                                       // 6832\n      //05. handle(control selection, ...)                                                                             // 6833\n      $(tplHandles(options)).prependTo($editingArea);                                                                  // 6834\n                                                                                                                       // 6835\n      $editingArea.prependTo($editor);                                                                                 // 6836\n                                                                                                                       // 6837\n      //06. create Toolbar                                                                                             // 6838\n      var $toolbar = $('<div class=\"note-toolbar panel-heading\" />');                                                  // 6839\n      for (var idx = 0, len = options.toolbar.length; idx < len; idx ++) {                                             // 6840\n        var groupName = options.toolbar[idx][0];                                                                       // 6841\n        var groupButtons = options.toolbar[idx][1];                                                                    // 6842\n                                                                                                                       // 6843\n        var $group = $('<div class=\"note-' + groupName + ' btn-group\" />');                                            // 6844\n        for (var i = 0, btnLength = groupButtons.length; i < btnLength; i++) {                                         // 6845\n          var buttonInfo = tplButtonInfo[groupButtons[i]];                                                             // 6846\n          // continue creating toolbar even if a button doesn't exist                                                  // 6847\n          if (!$.isFunction(buttonInfo)) { continue; }                                                                 // 6848\n                                                                                                                       // 6849\n          var $button = $(buttonInfo(langInfo, options));                                                              // 6850\n          $button.attr('data-name', groupButtons[i]);  // set button's alias, becuase to get button element from $toolbar\n          $group.append($button);                                                                                      // 6852\n        }                                                                                                              // 6853\n        $toolbar.append($group);                                                                                       // 6854\n      }                                                                                                                // 6855\n                                                                                                                       // 6856\n      var keyMap = options.keyMap[agent.isMac ? 'mac' : 'pc'];                                                         // 6857\n      createPalette($toolbar, options);                                                                                // 6858\n      createTooltip($toolbar, keyMap, 'bottom');                                                                       // 6859\n      $toolbar.prependTo($editor);                                                                                     // 6860\n                                                                                                                       // 6861\n      //07. create Dropzone                                                                                            // 6862\n      $('<div class=\"note-dropzone\"><div class=\"note-dropzone-message\"></div></div>').prependTo($editor);              // 6863\n                                                                                                                       // 6864\n      //08. create Dialog                                                                                              // 6865\n      var $dialogContainer = options.dialogsInBody ? $(document.body) : $editor;                                       // 6866\n      var $dialog = $(tplDialogs(langInfo, options)).prependTo($dialogContainer);                                      // 6867\n      $dialog.find('button.close, a.modal-close').click(function () {                                                  // 6868\n        $(this).closest('.modal').modal('hide');                                                                       // 6869\n      });                                                                                                              // 6870\n                                                                                                                       // 6871\n      //09. Editor/Holder switch                                                                                       // 6872\n      $editor.insertAfter($holder);                                                                                    // 6873\n      $holder.hide();                                                                                                  // 6874\n    };                                                                                                                 // 6875\n                                                                                                                       // 6876\n    this.hasNoteEditor = function ($holder) {                                                                          // 6877\n      return this.noteEditorFromHolder($holder).length > 0;                                                            // 6878\n    };                                                                                                                 // 6879\n                                                                                                                       // 6880\n    this.noteEditorFromHolder = function ($holder) {                                                                   // 6881\n      if ($holder.hasClass('note-air-editor')) {                                                                       // 6882\n        return $holder;                                                                                                // 6883\n      } else if ($holder.next().hasClass('note-editor')) {                                                             // 6884\n        return $holder.next();                                                                                         // 6885\n      } else {                                                                                                         // 6886\n        return $();                                                                                                    // 6887\n      }                                                                                                                // 6888\n    };                                                                                                                 // 6889\n                                                                                                                       // 6890\n    /**                                                                                                                // 6891\n     * create summernote layout                                                                                        // 6892\n     *                                                                                                                 // 6893\n     * @param {jQuery} $holder                                                                                         // 6894\n     * @param {Object} options                                                                                         // 6895\n     */                                                                                                                // 6896\n    this.createLayout = function ($holder, options) {                                                                  // 6897\n      if (options.airMode) {                                                                                           // 6898\n        this.createLayoutByAirMode($holder, options);                                                                  // 6899\n      } else {                                                                                                         // 6900\n        this.createLayoutByFrame($holder, options);                                                                    // 6901\n      }                                                                                                                // 6902\n    };                                                                                                                 // 6903\n                                                                                                                       // 6904\n    /**                                                                                                                // 6905\n     * returns layoutInfo from holder                                                                                  // 6906\n     *                                                                                                                 // 6907\n     * @param {jQuery} $holder - placeholder                                                                           // 6908\n     * @return {Object}                                                                                                // 6909\n     */                                                                                                                // 6910\n    this.layoutInfoFromHolder = function ($holder) {                                                                   // 6911\n      var $editor = this.noteEditorFromHolder($holder);                                                                // 6912\n      if (!$editor.length) {                                                                                           // 6913\n        return;                                                                                                        // 6914\n      }                                                                                                                // 6915\n                                                                                                                       // 6916\n      // connect $holder to $editor                                                                                    // 6917\n      $editor.data('holder', $holder);                                                                                 // 6918\n                                                                                                                       // 6919\n      return dom.buildLayoutInfo($editor);                                                                             // 6920\n    };                                                                                                                 // 6921\n                                                                                                                       // 6922\n    /**                                                                                                                // 6923\n     * removeLayout                                                                                                    // 6924\n     *                                                                                                                 // 6925\n     * @param {jQuery} $holder - placeholder                                                                           // 6926\n     * @param {Object} layoutInfo                                                                                      // 6927\n     * @param {Object} options                                                                                         // 6928\n     *                                                                                                                 // 6929\n     */                                                                                                                // 6930\n    this.removeLayout = function ($holder, layoutInfo, options) {                                                      // 6931\n      if (options.airMode) {                                                                                           // 6932\n        $holder.removeClass('note-air-editor note-editable')                                                           // 6933\n               .removeAttr('id contentEditable');                                                                      // 6934\n                                                                                                                       // 6935\n        layoutInfo.popover().remove();                                                                                 // 6936\n        layoutInfo.handle().remove();                                                                                  // 6937\n        layoutInfo.dialog().remove();                                                                                  // 6938\n      } else {                                                                                                         // 6939\n        $holder.html(layoutInfo.editable().html());                                                                    // 6940\n                                                                                                                       // 6941\n        if (options.dialogsInBody) {                                                                                   // 6942\n          layoutInfo.dialog().remove();                                                                                // 6943\n        }                                                                                                              // 6944\n        layoutInfo.editor().remove();                                                                                  // 6945\n        $holder.show();                                                                                                // 6946\n      }                                                                                                                // 6947\n    };                                                                                                                 // 6948\n                                                                                                                       // 6949\n    /**                                                                                                                // 6950\n     *                                                                                                                 // 6951\n     * @return {Object}                                                                                                // 6952\n     * @return {function(label, options=):string} return.button {@link #tplButton function to make text button}        // 6953\n     * @return {function(iconClass, options=):string} return.iconButton {@link #tplIconButton function to make icon button}\n     * @return {function(className, title=, body=, footer=):string} return.dialog {@link #tplDialog function to make dialog}\n     */                                                                                                                // 6956\n    this.getTemplate = function () {                                                                                   // 6957\n      return {                                                                                                         // 6958\n        button: tplButton,                                                                                             // 6959\n        iconButton: tplIconButton,                                                                                     // 6960\n        dialog: tplDialog                                                                                              // 6961\n      };                                                                                                               // 6962\n    };                                                                                                                 // 6963\n                                                                                                                       // 6964\n    /**                                                                                                                // 6965\n     * add button information                                                                                          // 6966\n     *                                                                                                                 // 6967\n     * @param {String} name button name                                                                                // 6968\n     * @param {Function} buttonInfo function to make button, reference to {@link #tplButton},{@link #tplIconButton}    // 6969\n     */                                                                                                                // 6970\n    this.addButtonInfo = function (name, buttonInfo) {                                                                 // 6971\n      tplButtonInfo[name] = buttonInfo;                                                                                // 6972\n    };                                                                                                                 // 6973\n                                                                                                                       // 6974\n    /**                                                                                                                // 6975\n     *                                                                                                                 // 6976\n     * @param {String} name                                                                                            // 6977\n     * @param {Function} dialogInfo function to make dialog, reference to {@link #tplDialog}                           // 6978\n     */                                                                                                                // 6979\n    this.addDialogInfo = function (name, dialogInfo) {                                                                 // 6980\n      tplDialogInfo[name] = dialogInfo;                                                                                // 6981\n    };                                                                                                                 // 6982\n  };                                                                                                                   // 6983\n                                                                                                                       // 6984\n                                                                                                                       // 6985\n  // jQuery namespace for summernote                                                                                   // 6986\n  /**                                                                                                                  // 6987\n   * @class $.summernote                                                                                               // 6988\n   *                                                                                                                   // 6989\n   * summernote attribute                                                                                              // 6990\n   *                                                                                                                   // 6991\n   * @mixin defaults                                                                                                   // 6992\n   * @singleton                                                                                                        // 6993\n   *                                                                                                                   // 6994\n   */                                                                                                                  // 6995\n  $.summernote = $.summernote || {};                                                                                   // 6996\n                                                                                                                       // 6997\n  // extends default settings                                                                                          // 6998\n  //  - $.summernote.version                                                                                           // 6999\n  //  - $.summernote.options                                                                                           // 7000\n  //  - $.summernote.lang                                                                                              // 7001\n  $.extend($.summernote, defaults);                                                                                    // 7002\n                                                                                                                       // 7003\n  var renderer = new Renderer();                                                                                       // 7004\n  var eventHandler = new EventHandler();                                                                               // 7005\n                                                                                                                       // 7006\n  $.extend($.summernote, {                                                                                             // 7007\n    /** @property {Renderer} */                                                                                        // 7008\n    renderer: renderer,                                                                                                // 7009\n    /** @property {EventHandler} */                                                                                    // 7010\n    eventHandler: eventHandler,                                                                                        // 7011\n    /**                                                                                                                // 7012\n     * @property {Object} core                                                                                         // 7013\n     * @property {core.agent} core.agent                                                                               // 7014\n     * @property {core.dom} core.dom                                                                                   // 7015\n     * @property {core.range} core.range                                                                               // 7016\n     */                                                                                                                // 7017\n    core: {                                                                                                            // 7018\n      agent: agent,                                                                                                    // 7019\n      list : list,                                                                                                     // 7020\n      dom: dom,                                                                                                        // 7021\n      range: range                                                                                                     // 7022\n    },                                                                                                                 // 7023\n    /**                                                                                                                // 7024\n     * @property {Object}                                                                                              // 7025\n     * pluginEvents event list for plugins                                                                             // 7026\n     * event has name and callback function.                                                                           // 7027\n     *                                                                                                                 // 7028\n     * ```                                                                                                             // 7029\n     * $.summernote.addPlugin({                                                                                        // 7030\n     *     events : {                                                                                                  // 7031\n     *          'hello' : function(layoutInfo, value, $target) {                                                       // 7032\n     *              console.log('event name is hello, value is ' + value );                                            // 7033\n     *          }                                                                                                      // 7034\n     *     }                                                                                                           // 7035\n     * })                                                                                                              // 7036\n     * ```                                                                                                             // 7037\n     *                                                                                                                 // 7038\n     * * event name is data-event property.                                                                            // 7039\n     * * layoutInfo is a summernote layout information.                                                                // 7040\n     * * value is data-value property.                                                                                 // 7041\n     */                                                                                                                // 7042\n    pluginEvents: {},                                                                                                  // 7043\n                                                                                                                       // 7044\n    plugins : []                                                                                                       // 7045\n  });                                                                                                                  // 7046\n                                                                                                                       // 7047\n  /**                                                                                                                  // 7048\n   * @method addPlugin                                                                                                 // 7049\n   *                                                                                                                   // 7050\n   * add Plugin in Summernote                                                                                          // 7051\n   *                                                                                                                   // 7052\n   * Summernote can make a own plugin.                                                                                 // 7053\n   *                                                                                                                   // 7054\n   * ### Define plugin                                                                                                 // 7055\n   * ```                                                                                                               // 7056\n   * // get template function                                                                                          // 7057\n   * var tmpl = $.summernote.renderer.getTemplate();                                                                   // 7058\n   *                                                                                                                   // 7059\n   * // add a button                                                                                                   // 7060\n   * $.summernote.addPlugin({                                                                                          // 7061\n   *     buttons : {                                                                                                   // 7062\n   *        // \"hello\"  is button's namespace.                                                                         // 7063\n   *        \"hello\" : function(lang, options) {                                                                        // 7064\n   *            // make icon button by template function                                                               // 7065\n   *            return tmpl.iconButton(options.iconPrefix + 'header', {                                                // 7066\n   *                // callback function name when button clicked                                                      // 7067\n   *                event : 'hello',                                                                                   // 7068\n   *                // set data-value property                                                                         // 7069\n   *                value : 'hello',                                                                                   // 7070\n   *                hide : true                                                                                        // 7071\n   *            });                                                                                                    // 7072\n   *        }                                                                                                          // 7073\n   *                                                                                                                   // 7074\n   *     },                                                                                                            // 7075\n   *                                                                                                                   // 7076\n   *     events : {                                                                                                    // 7077\n   *        \"hello\" : function(layoutInfo, value) {                                                                    // 7078\n   *            // here is event code                                                                                  // 7079\n   *        }                                                                                                          // 7080\n   *     }                                                                                                             // 7081\n   * });                                                                                                               // 7082\n   * ```                                                                                                               // 7083\n   * ### Use a plugin in toolbar                                                                                       // 7084\n   *                                                                                                                   // 7085\n   * ```                                                                                                               // 7086\n   *    $(\"#editor\").summernote({                                                                                      // 7087\n   *    ...                                                                                                            // 7088\n   *    toolbar : [                                                                                                    // 7089\n   *        // display hello plugin in toolbar                                                                         // 7090\n   *        ['group', [ 'hello' ]]                                                                                     // 7091\n   *    ]                                                                                                              // 7092\n   *    ...                                                                                                            // 7093\n   *    });                                                                                                            // 7094\n   * ```                                                                                                               // 7095\n   *                                                                                                                   // 7096\n   *                                                                                                                   // 7097\n   * @param {Object} plugin                                                                                            // 7098\n   * @param {Object} [plugin.buttons] define plugin button. for detail, see to Renderer.addButtonInfo                  // 7099\n   * @param {Object} [plugin.dialogs] define plugin dialog. for detail, see to Renderer.addDialogInfo                  // 7100\n   * @param {Object} [plugin.events] add event in $.summernote.pluginEvents                                            // 7101\n   * @param {Object} [plugin.langs] update $.summernote.lang                                                           // 7102\n   * @param {Object} [plugin.options] update $.summernote.options                                                      // 7103\n   */                                                                                                                  // 7104\n  $.summernote.addPlugin = function (plugin) {                                                                         // 7105\n                                                                                                                       // 7106\n    // save plugin list                                                                                                // 7107\n    $.summernote.plugins.push(plugin);                                                                                 // 7108\n                                                                                                                       // 7109\n    if (plugin.buttons) {                                                                                              // 7110\n      $.each(plugin.buttons, function (name, button) {                                                                 // 7111\n        renderer.addButtonInfo(name, button);                                                                          // 7112\n      });                                                                                                              // 7113\n    }                                                                                                                  // 7114\n                                                                                                                       // 7115\n    if (plugin.dialogs) {                                                                                              // 7116\n      $.each(plugin.dialogs, function (name, dialog) {                                                                 // 7117\n        renderer.addDialogInfo(name, dialog);                                                                          // 7118\n      });                                                                                                              // 7119\n    }                                                                                                                  // 7120\n                                                                                                                       // 7121\n    if (plugin.events) {                                                                                               // 7122\n      $.each(plugin.events, function (name, event) {                                                                   // 7123\n        $.summernote.pluginEvents[name] = event;                                                                       // 7124\n      });                                                                                                              // 7125\n    }                                                                                                                  // 7126\n                                                                                                                       // 7127\n    if (plugin.langs) {                                                                                                // 7128\n      $.each(plugin.langs, function (locale, lang) {                                                                   // 7129\n        if ($.summernote.lang[locale]) {                                                                               // 7130\n          $.extend($.summernote.lang[locale], lang);                                                                   // 7131\n        }                                                                                                              // 7132\n      });                                                                                                              // 7133\n    }                                                                                                                  // 7134\n                                                                                                                       // 7135\n    if (plugin.options) {                                                                                              // 7136\n      $.extend($.summernote.options, plugin.options);                                                                  // 7137\n    }                                                                                                                  // 7138\n  };                                                                                                                   // 7139\n                                                                                                                       // 7140\n  /*                                                                                                                   // 7141\n   * extend $.fn                                                                                                       // 7142\n   */                                                                                                                  // 7143\n  $.fn.extend({                                                                                                        // 7144\n    /**                                                                                                                // 7145\n     * @method                                                                                                         // 7146\n     * Initialize summernote                                                                                           // 7147\n     *  - create editor layout and attach Mouse and keyboard events.                                                   // 7148\n     *                                                                                                                 // 7149\n     * ```                                                                                                             // 7150\n     * $(\"#summernote\").summernote( { options ..} );                                                                   // 7151\n     * ```                                                                                                             // 7152\n     *                                                                                                                 // 7153\n     * @member $.fn                                                                                                    // 7154\n     * @param {Object|String} options reference to $.summernote.options                                                // 7155\n     * @return {this}                                                                                                  // 7156\n     */                                                                                                                // 7157\n    summernote: function () {                                                                                          // 7158\n      // check first argument's type                                                                                   // 7159\n      //  - {String}: External API call {{module}}.{{method}}                                                          // 7160\n      //  - {Object}: init options                                                                                     // 7161\n      var type = $.type(list.head(arguments));                                                                         // 7162\n      var isExternalAPICalled = type === 'string';                                                                     // 7163\n      var hasInitOptions = type === 'object';                                                                          // 7164\n                                                                                                                       // 7165\n      // extend default options with custom user options                                                               // 7166\n      var options = hasInitOptions ? list.head(arguments) : {};                                                        // 7167\n                                                                                                                       // 7168\n      options = $.extend({}, $.summernote.options, options);                                                           // 7169\n      options.icons = $.extend({}, $.summernote.options.icons, options.icons);                                         // 7170\n                                                                                                                       // 7171\n      // Include langInfo in options for later use, e.g. for image drag-n-drop                                         // 7172\n      // Setup language info with en-US as default                                                                     // 7173\n      options.langInfo = $.extend(true, {}, $.summernote.lang['en-US'], $.summernote.lang[options.lang]);              // 7174\n                                                                                                                       // 7175\n      // override plugin options                                                                                       // 7176\n      if (!isExternalAPICalled && hasInitOptions) {                                                                    // 7177\n        for (var i = 0, len = $.summernote.plugins.length; i < len; i++) {                                             // 7178\n          var plugin = $.summernote.plugins[i];                                                                        // 7179\n                                                                                                                       // 7180\n          if (options.plugin[plugin.name]) {                                                                           // 7181\n            $.summernote.plugins[i] = $.extend(true, plugin, options.plugin[plugin.name]);                             // 7182\n          }                                                                                                            // 7183\n        }                                                                                                              // 7184\n      }                                                                                                                // 7185\n                                                                                                                       // 7186\n      this.each(function (idx, holder) {                                                                               // 7187\n        var $holder = $(holder);                                                                                       // 7188\n                                                                                                                       // 7189\n        // if layout isn't created yet, createLayout and attach events                                                 // 7190\n        if (!renderer.hasNoteEditor($holder)) {                                                                        // 7191\n          renderer.createLayout($holder, options);                                                                     // 7192\n                                                                                                                       // 7193\n          var layoutInfo = renderer.layoutInfoFromHolder($holder);                                                     // 7194\n          $holder.data('layoutInfo', layoutInfo);                                                                      // 7195\n                                                                                                                       // 7196\n          eventHandler.attach(layoutInfo, options);                                                                    // 7197\n          eventHandler.attachCustomEvent(layoutInfo, options);                                                         // 7198\n        }                                                                                                              // 7199\n      });                                                                                                              // 7200\n                                                                                                                       // 7201\n      var $first = this.first();                                                                                       // 7202\n      if ($first.length) {                                                                                             // 7203\n        var layoutInfo = renderer.layoutInfoFromHolder($first);                                                        // 7204\n                                                                                                                       // 7205\n        // external API                                                                                                // 7206\n        if (isExternalAPICalled) {                                                                                     // 7207\n          var moduleAndMethod = list.head(list.from(arguments));                                                       // 7208\n          var args = list.tail(list.from(arguments));                                                                  // 7209\n                                                                                                                       // 7210\n          // TODO now external API only works for editor                                                               // 7211\n          var params = [moduleAndMethod, layoutInfo.editable()].concat(args);                                          // 7212\n          return eventHandler.invoke.apply(eventHandler, params);                                                      // 7213\n        } else if (options.focus) {                                                                                    // 7214\n          // focus on first editable element for initialize editor                                                     // 7215\n          layoutInfo.editable().focus();                                                                               // 7216\n        }                                                                                                              // 7217\n      }                                                                                                                // 7218\n                                                                                                                       // 7219\n      return this;                                                                                                     // 7220\n    },                                                                                                                 // 7221\n                                                                                                                       // 7222\n    /**                                                                                                                // 7223\n     * @method                                                                                                         // 7224\n     *                                                                                                                 // 7225\n     * get the HTML contents of note or set the HTML contents of note.                                                 // 7226\n     *                                                                                                                 // 7227\n     * * get contents                                                                                                  // 7228\n     * ```                                                                                                             // 7229\n     * var content = $(\"#summernote\").code();                                                                          // 7230\n     * ```                                                                                                             // 7231\n     * * set contents                                                                                                  // 7232\n     *                                                                                                                 // 7233\n     * ```                                                                                                             // 7234\n     * $(\"#summernote\").code(html);                                                                                    // 7235\n     * ```                                                                                                             // 7236\n     *                                                                                                                 // 7237\n     * @member $.fn                                                                                                    // 7238\n     * @param {String} [html] - HTML contents(optional, set)                                                           // 7239\n     * @return {this|String} - context(set) or HTML contents of note(get).                                             // 7240\n     */                                                                                                                // 7241\n    code: function (html) {                                                                                            // 7242\n      // get the HTML contents of note                                                                                 // 7243\n      if (html === undefined) {                                                                                        // 7244\n        var $holder = this.first();                                                                                    // 7245\n        if (!$holder.length) {                                                                                         // 7246\n          return;                                                                                                      // 7247\n        }                                                                                                              // 7248\n                                                                                                                       // 7249\n        var layoutInfo = renderer.layoutInfoFromHolder($holder);                                                       // 7250\n        var $editable = layoutInfo && layoutInfo.editable();                                                           // 7251\n                                                                                                                       // 7252\n        if ($editable && $editable.length) {                                                                           // 7253\n          var isCodeview = eventHandler.invoke('codeview.isActivated', layoutInfo);                                    // 7254\n          eventHandler.invoke('codeview.sync', layoutInfo);                                                            // 7255\n          return isCodeview ? layoutInfo.codable().val() :                                                             // 7256\n                              layoutInfo.editable().html();                                                            // 7257\n        }                                                                                                              // 7258\n        return dom.value($holder);                                                                                     // 7259\n      }                                                                                                                // 7260\n                                                                                                                       // 7261\n      // set the HTML contents of note                                                                                 // 7262\n      this.each(function (i, holder) {                                                                                 // 7263\n        var layoutInfo = renderer.layoutInfoFromHolder($(holder));                                                     // 7264\n        var $editable = layoutInfo && layoutInfo.editable();                                                           // 7265\n        if ($editable) {                                                                                               // 7266\n          $editable.html(html);                                                                                        // 7267\n        }                                                                                                              // 7268\n      });                                                                                                              // 7269\n                                                                                                                       // 7270\n      return this;                                                                                                     // 7271\n    },                                                                                                                 // 7272\n                                                                                                                       // 7273\n    /**                                                                                                                // 7274\n     * @method                                                                                                         // 7275\n     *                                                                                                                 // 7276\n     * destroy Editor Layout and detach Key and Mouse Event                                                            // 7277\n     *                                                                                                                 // 7278\n     * @member $.fn                                                                                                    // 7279\n     * @return {this}                                                                                                  // 7280\n     */                                                                                                                // 7281\n    destroy: function () {                                                                                             // 7282\n      this.each(function (idx, holder) {                                                                               // 7283\n        var $holder = $(holder);                                                                                       // 7284\n                                                                                                                       // 7285\n        if (!renderer.hasNoteEditor($holder)) {                                                                        // 7286\n          return;                                                                                                      // 7287\n        }                                                                                                              // 7288\n                                                                                                                       // 7289\n        var info = renderer.layoutInfoFromHolder($holder);                                                             // 7290\n        var options = info.editor().data('options');                                                                   // 7291\n                                                                                                                       // 7292\n        eventHandler.detach(info, options);                                                                            // 7293\n        renderer.removeLayout($holder, info, options);                                                                 // 7294\n      });                                                                                                              // 7295\n                                                                                                                       // 7296\n      return this;                                                                                                     // 7297\n    }                                                                                                                  // 7298\n  });                                                                                                                  // 7299\n}));                                                                                                                   // 7300\n                                                                                                                       // 7301\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]